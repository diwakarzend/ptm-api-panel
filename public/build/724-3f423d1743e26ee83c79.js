/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkreact_boiler_plate"] = self["webpackChunkreact_boiler_plate"] || []).push([[724],{

/***/ 1724:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ DashBoard_DashBoard)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(4942);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 19 modules\nvar es = __webpack_require__(4494);\n// EXTERNAL MODULE: ./src/Components/BreadCrumb/BreadCrumb.js + 2 modules\nvar BreadCrumb = __webpack_require__(3851);\n// EXTERNAL MODULE: ./src/actions/payout.js\nvar actions_payout = __webpack_require__(9155);\n;// CONCATENATED MODULE: ./src/lib/Chart/common.js\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar dynamicDataWithXY = function dynamicDataWithXY(xdata, yData, chartTitle, xLabel, yLabel, chartOptions) {\n  var chartObj = {\n    type: 'bar',\n    // also try bar or other graph types\n    data: {\n      labels: xdata,\n      // Information about the dataset\n      datasets: [{\n        label: \"\",\n        backgroundColor: 'lightblue',\n        borderColor: 'royalblue',\n        data: yData\n      }]\n    },\n    // Configuration options\n    options: _objectSpread({\n      layout: {\n        padding: 10\n      },\n      legend: {\n        position: 'bottom'\n      },\n      title: {\n        display: true,\n        text: chartTitle\n      },\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: yLabel\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: xLabel\n          }\n        }]\n      }\n    }, chartOptions)\n  };\n  return chartObj;\n};\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(5671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(3144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(136);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(2963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(1120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\nvar taggedTemplateLiteral = __webpack_require__(168);\n// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js + 4 modules\nvar styled_components_browser_esm = __webpack_require__(5458);\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/style.js\n\n\nvar _templateObject;\n\n\n/* harmony default export */ const style = (styled_components_browser_esm/* default.svg */.ZP.svg(_templateObject || (_templateObject = (0,taggedTemplateLiteral/* default */.Z)([\"\\n.circle-background,\\n.circle-progress {\\n  fill: none;\\n}\\n\\n.circle-background {\\n  stroke: #ddd;\\n}\\n\\n.circle-progress {\\n  stroke: \", \";\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n}\\n\\n.circle-text {\\n  font-size: 14px;\\n  font-weight: bold;\\n  fill: \", \";\\n}\\n\"])), function (props) {\n  return props.strokeColor ? \"\".concat(props.strokeColor) : '#4d94ff';\n}, function (props) {\n  return props.strokeColor ? \"\".concat(props.strokeColor) : '#4d94ff';\n}));\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/CircularProgressBar.js\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar CircularProgressBar = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.Z)(CircularProgressBar, _React$Component);\n\n  var _super = _createSuper(CircularProgressBar);\n\n  function CircularProgressBar(props) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, CircularProgressBar);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(CircularProgressBar, [{\n    key: \"render\",\n    value: function render() {\n      // Size of the enclosing square\n      var sqSize = this.props.sqSize; // SVG centers the stroke width on the radius, subtract out so circle fits in square\n\n      var radius = (this.props.sqSize - this.props.strokeWidth) / 2; // Enclose cicle in a circumscribing square\n\n      var viewBox = \"0 0 \".concat(sqSize, \" \").concat(sqSize); // Arc length at 100% coverage is the circle circumference\n\n      var dashArray = radius * Math.PI * 2; // Scale 100% coverage overlay with the actual percent\n\n      var dashOffset = dashArray - dashArray * this.props.percentage / 100;\n      return /*#__PURE__*/react.createElement(style, {\n        width: this.props.sqSize,\n        height: this.props.sqSize,\n        strokeColor: this.props.strokeColor,\n        viewBox: viewBox\n      }, /*#__PURE__*/react.createElement(\"circle\", {\n        className: \"circle-background\",\n        cx: this.props.sqSize / 2,\n        cy: this.props.sqSize / 2,\n        r: radius,\n        strokeWidth: \"\".concat(this.props.strokeWidth, \"px\")\n      }), /*#__PURE__*/react.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: this.props.sqSize / 2,\n        cy: this.props.sqSize / 2,\n        r: radius,\n        strokeWidth: \"\".concat(this.props.strokeWidth, \"px\") // Start progress marker at 12 O'Clock\n        ,\n        transform: \"rotate(-90 \".concat(this.props.sqSize / 2, \" \").concat(this.props.sqSize / 2, \")\"),\n        style: {\n          strokeDasharray: dashArray,\n          strokeDashoffset: dashOffset\n        }\n      }), /*#__PURE__*/react.createElement(\"text\", {\n        className: \"circle-text\",\n        x: \"50%\",\n        y: \"50%\",\n        dy: \".3em\",\n        textAnchor: \"middle\"\n      }, \"\".concat(this.props.percentage, \"%\")));\n    }\n  }]);\n\n  return CircularProgressBar;\n}(react.Component);\n\nCircularProgressBar.defaultProps = {\n  sqSize: 100,\n  percentage: 25,\n  strokeWidth: 5\n};\n/* harmony default export */ const CircularProgressBar_CircularProgressBar = ((/* unused pure expression or super */ null && (CircularProgressBar)));\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/index.js\n\n// EXTERNAL MODULE: ./src/utils/common.js\nvar common = __webpack_require__(2667);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules\nvar slicedToArray = __webpack_require__(885);\n// EXTERNAL MODULE: ./node_modules/react-csv/index.js\nvar react_csv = __webpack_require__(3461);\n// EXTERNAL MODULE: ./node_modules/moment/moment.js\nvar moment = __webpack_require__(381);\nvar moment_default = /*#__PURE__*/__webpack_require__.n(moment);\n// EXTERNAL MODULE: ./src/lib/Chart/Chart.min.js\nvar Chart_min = __webpack_require__(4213);\n// EXTERNAL MODULE: ./src/utils/api.js\nvar api = __webpack_require__(2456);\n;// CONCATENATED MODULE: ./src/Components/Dashboard/PtmVendor/style.js\n\n\nvar style_templateObject;\n\n\nvar UpiCollectionsStyle = styled_components_browser_esm/* default.div */.ZP.div(style_templateObject || (style_templateObject = (0,taggedTemplateLiteral/* default */.Z)([\"\\n  \\n  .filter-table {\\n    gap: 16px;\\n  }\\n  .upi-n-qr-collection {\\n    padding: 24px;\\n  }\\n  .collection-info-wrapper {\\n    background-color: rgb(171, 185, 232, .1);\\n    padding: 0 20px;\\n    border: 1px dashed rgb(171, 185, 232);\\n    border-radius: 10px;\\n  }\\n  .collection-info {\\n    padding: 20px 0;\\n    display: flex;\\n    & + .collection-info {\\n      border-top: 1px dashed rgb(171, 185, 232);\\n    }\\n    .info-left {\\n      flex: 1;\\n      strong {\\n        font-size: 32px;\\n        font-weight: 400;\\n      }\\n      .text {\\n        display: flex;\\n        align-items: center;\\n        &:before {\\n          content: \\\"\\\";\\n          width: 16px;\\n          height: 16px;\\n          border-radius: 3px;\\n          margin-right: 8px;\\n        }\\n        &.first {\\n          &:before {\\n            background-color: #3ac47d;\\n          }\\n        }\\n        &.second {\\n          &:before {\\n            background-color: rgb(41, 156, 219);\\n          }\\n        }\\n        &.third {\\n          &:before {\\n            background-color: rgb(247, 184, 75);\\n          }\\n        }\\n        &.fourth {\\n          &:before {\\n            background-color: #d92550;\\n          }\\n        }\\n      }\\n    }\\n    .info-right {\\n      flex: 0 0 80px;\\n      text-align: center;\\n      color: #3C80E8;\\n      border-radius: 4px;\\n      &.first {\\n        background-color: #d1f1e1;\\n      }\\n      &.second {\\n        background-color: rgb(41, 156, 219, 0.18);\\n      }\\n      &.third {\\n        background-color: rgb(247, 184, 75, 0.18);\\n      }\\n      &.fourth {\\n        background-color: #f9dde3;\\n      }\\n    }\\n  }\\n  .container-pie-chart {\\n    margin: 0 auto;\\n    max-width: 400px;\\n    canvas {\\n      max-height: 383px;\\n    }\\n  }\\n  .csv-link {\\n    width: 39px;\\n    height: 39px;\\n    border-radius: 50%;\\n    background-color: #EAEEF2;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    color: #aaa;\\n    font-size: 20px;\\n    transition: all 500ms ease-in-out;\\n    &:hover {\\n      background-color: rgb(41,156,219, .4);\\n      color: rgb(41,156,219, .8);\\n    }\\n  }\\n\"])));\n;// CONCATENATED MODULE: ./src/Components/Dashboard/PtmVendor/UpiCollections.js\n\n\n\nfunction UpiCollections_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction UpiCollections_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { UpiCollections_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { UpiCollections_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\nvar chartConfig = __webpack_require__(1635);\n\n\n\n\nvar initFilters = {\n  toDate: moment_default()(new Date()).format('YYYY-MM-DD'),\n  fromDate: moment_default()(new Date()).format('YYYY-MM-DD'),\n  \"pagination\": {\n    \"pageNo\": 1,\n    \"pageSize\": 100\n  },\n  \"status\": null,\n  \"txnRefId\": null,\n  \"txnType\": null,\n  \"userId\": null,\n  \"utrNumber\": null,\n  \"vendorCode\": null\n};\nvar fontCss = {\n  fontSize: \"20px\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  color: \"#53505f\"\n};\nfunction UpiCollections() {\n  var _useState = (0,react.useState)(UpiCollections_objectSpread({}, initFilters)),\n      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n      filters = _useState2[0],\n      setFilters = _useState2[1];\n\n  var _useState3 = (0,react.useState)([]),\n      _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n      vendorList = _useState4[0],\n      setVendorList = _useState4[1];\n\n  var _useState5 = (0,react.useState)(null),\n      _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n      userTxnDetails = _useState6[0],\n      setUserTxnDetails = _useState6[1];\n\n  var _useState7 = (0,react.useState)([]),\n      _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n      downloadData = _useState8[0],\n      setDownloadData = _useState8[1];\n\n  var userData = (0,es/* useSelector */.v9)(function (state) {\n    var _state$login;\n\n    return (state === null || state === void 0 ? void 0 : (_state$login = state.login) === null || _state$login === void 0 ? void 0 : _state$login.userData) || {};\n  });\n  var isVendor = false;\n\n  if ((userData === null || userData === void 0 ? void 0 : userData.role) === \"PTM_VENDOR\") {\n    isVendor = true;\n  }\n\n  var changeHandler = function changeHandler(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n\n    var _filters = JSON.parse(JSON.stringify(filters));\n\n    _filters[name] = value;\n    setFilters(_filters);\n  };\n\n  var renderPieChart = function renderPieChart(val1, val2, val3, val4) {\n    if (document.getElementById(\"container-pie-chart\")) {\n      var ctx = document.getElementById(\"container-pie-chart\").getContext(\"2d\");\n      var myChart = new Chart(ctx, {\n        type: \"pie\",\n        data: {\n          labels: [\"Total Transactions\", \"Total Amount\", \"Total Synced\", \"Credited\"],\n          datasets: [{\n            backgroundColor: [\"#3ac47d\", \"rgb(41,156,219)\", \"rgb(247,184,75)\", \"#d92550\"],\n            data: [val1, val2, val3, val4]\n          }]\n        }\n      });\n    }\n  };\n\n  (0,react.useEffect)(function () {\n    (0,api/* getUserByVendorRole */.h6)().then(function (res) {\n      var _res$data;\n\n      if (res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.data) {\n        var _res$data2;\n\n        setVendorList(res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.data);\n      }\n    });\n  }, []);\n  (0,react.useEffect)(function () {\n    if ((userData === null || userData === void 0 ? void 0 : userData.role) === \"PTM_VENDOR\") {\n      setFilters(UpiCollections_objectSpread(UpiCollections_objectSpread({}, filters), {}, {\n        userId: userData.uuid\n      }));\n    }\n  }, [userData]);\n  (0,react.useEffect)(function () {\n    if (userTxnDetails) {\n      var data = [];\n      data.push(userTxnDetails);\n      setDownloadData(data);\n      setTimeout(function () {\n        renderPieChart(userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalCount, userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalTransactionSum, userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalSyncedCount, userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalCreditedCount);\n      }, 1000);\n    }\n  }, [userTxnDetails, userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalCount]);\n  (0,react.useEffect)(function () {\n    (0,api/* getDashboardUserTxnRequest */.vi)(filters).then(function (res) {\n      var _res$data3;\n\n      if (res !== null && res !== void 0 && (_res$data3 = res.data) !== null && _res$data3 !== void 0 && _res$data3.data) {\n        var _res$data4;\n\n        setUserTxnDetails((res === null || res === void 0 ? void 0 : (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.data) || null);\n      }\n    });\n  }, [filters]);\n  return /*#__PURE__*/react.createElement(UpiCollectionsStyle, {\n    className: \"card-wrapper flex-column mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-header flex item-center space-between dir-col-in-mobile\"\n  }, /*#__PURE__*/react.createElement(\"h4\", {\n    className: \"card-title\"\n  }, \"UPI & QR Collections\"), /*#__PURE__*/react.createElement(\"form\", {\n    className: \"filter-table flex item-center\"\n  }, !isVendor && /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"select\", {\n    name: \"userId\",\n    className: \"form-control\",\n    id: \"exampleFormControlSelect1\",\n    onChange: changeHandler\n  }, /*#__PURE__*/react.createElement(\"option\", {\n    value: \"\"\n  }, \"Select Merchant\"), vendorList.map(function (vendor) {\n    return /*#__PURE__*/react.createElement(\"option\", {\n      key: vendor === null || vendor === void 0 ? void 0 : vendor.uuid,\n      value: vendor === null || vendor === void 0 ? void 0 : vendor.uuid\n    }, \"\".concat(vendor.firstName || '-', \" \").concat(vendor.lastName || ''));\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"input\", {\n    name: \"fromDate\",\n    type: \"date\",\n    className: \"form-control\",\n    placeholder: \"Enter From Date\",\n    onChange: changeHandler,\n    value: filters === null || filters === void 0 ? void 0 : filters.fromDate\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"input\", {\n    name: \"toDate\",\n    type: \"date\",\n    className: \"form-control\",\n    placeholder: \"Enter To Date\",\n    onChange: changeHandler,\n    value: filters === null || filters === void 0 ? void 0 : filters.toDate\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(react_csv.CSVLink, {\n    title: \"Download CSV\",\n    className: \"csv-link\",\n    data: downloadData\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    \"class\": \"fa fa-download \",\n    \"aria-hidden\": \"true\"\n  }))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"upi-n-qr-collection row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-7\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-pie-chart\"\n  }, /*#__PURE__*/react.createElement(\"canvas\", {\n    id: \"container-pie-chart\",\n    className: \"height_box\"\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-5\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info-wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, userTxnDetails && (userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalCount) || 0), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text first\"\n  }, \"Total Transactions\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right first\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, userTxnDetails && (0,common/* numberToCurrency */.fe)(userTxnDetails.totalTransactionSum)), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text second\"\n  }, \"Total Amount\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right second\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalSyncedCount), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text third\"\n  }, \"Total Synced\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right third\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, userTxnDetails === null || userTxnDetails === void 0 ? void 0 : userTxnDetails.totalCreditedCount), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text fourth\"\n  }, \"Credited\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right fourth\"\n  })))))));\n}\n;// CONCATENATED MODULE: ./src/Pages/DashBoard/TopInfo.js\n\n\n\nfunction TopInfo(_ref) {\n  var _ref$transactionRepor = _ref.transactionReport,\n      transactionReport = _ref$transactionRepor === void 0 ? {} : _ref$transactionRepor;\n\n  var renderPieChart = function renderPieChart(val1, val2, val3, val4) {\n    if (document.getElementById(\"container-pie-chart-payout\")) {\n      var ctx = document.getElementById(\"container-pie-chart-payout\").getContext(\"2d\");\n      var myChart = new Chart(ctx, {\n        type: \"pie\",\n        data: {\n          labels: [\"Total Transactions\", \"Total Amount\", \"Total Synced\", \"Credited\"],\n          datasets: [{\n            backgroundColor: [\"#3ac47d\", \"rgb(41,156,219)\", \"rgb(247,184,75)\", \"#d92550\"],\n            data: [val1, val2, val3, val4]\n          }]\n        }\n      });\n    }\n  };\n\n  (0,react.useEffect)(function () {\n    // if (transactionReport) {\n    setTimeout(function () {\n      renderPieChart((transactionReport === null || transactionReport === void 0 ? void 0 : transactionReport.totalTransaction) || 0, (transactionReport === null || transactionReport === void 0 ? void 0 : transactionReport.totalAmount) || 0, (transactionReport === null || transactionReport === void 0 ? void 0 : transactionReport.refunded) || 0, (transactionReport === null || transactionReport === void 0 ? void 0 : transactionReport.cancelled) || 0);\n    }, 1000); // }\n  }, [transactionReport]);\n  console.log(\"transactionReport = \", transactionReport);\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(UpiCollectionsStyle, {\n    className: \"card-wrapper flex-column mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-header flex item-center space-between dir-col-in-mobile\"\n  }, /*#__PURE__*/react.createElement(\"h4\", {\n    className: \"card-title\"\n  }, \"Payout\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"upi-n-qr-collection row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-7\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-pie-chart\"\n  }, /*#__PURE__*/react.createElement(\"canvas\", {\n    id: \"container-pie-chart-payout\",\n    className: \"height_box\"\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-5\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info-wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, transactionReport && transactionReport.count || 0), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text first\"\n  }, \"Total Transactions\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right first\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, transactionReport && transactionReport.totalTransaction || 0), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text second\"\n  }, \"Total Amount\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right second\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, 0), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text third\"\n  }, \"Refunded Transactions\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right third\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"collection-info\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-left\"\n  }, /*#__PURE__*/react.createElement(\"strong\", {\n    className: \"amount\"\n  }, transactionReport && transactionReport.count || 0), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"text fourth\"\n  }, \"Cancelled Transactions\")), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"info-right fourth\"\n  }))))))));\n}\n;// CONCATENATED MODULE: ./src/Pages/DashBoard/style.js\n\n\nvar DashBoard_style_templateObject;\n\n\nvar DashboardWrapper = styled_components_browser_esm/* default.div */.ZP.div(DashBoard_style_templateObject || (DashBoard_style_templateObject = (0,taggedTemplateLiteral/* default */.Z)([\"\\n    &.analysis-and-statistics {\\n        .transaction-analysis {\\n            margin-right: 24px;\\n            flex: 0 0 70%;\\n            max-width: 70%;\\n        }\\n        .overall-statistics {\\n            flex: 1;\\n            .card-body {\\n                padding: 10px;\\n            }\\n            .overall-chart {\\n                width: 180px;\\n                margin: 0 auto;\\n                padding-top: 16px;\\n                strong {\\n                    margin-left: 24px;\\n                }\\n            }\\n        }\\n    }\\n\"])));\n;// CONCATENATED MODULE: ./src/Pages/DashBoard/DashBoard.js\n\n\nfunction DashBoard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DashBoard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DashBoard_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DashBoard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar DashBoard = function DashBoard(props) {\n  var payout = props.payout;\n  var statusReport = payout && payout.statusReport && payout.statusReport.data || \"\";\n  var monthlyReport = payout && payout.monthlyReport || \"\";\n  var transactionReport = \"\";\n\n  if (payout && payout.statusTranscReport && payout.statusTranscReport.data && Array.isArray(payout.statusTranscReport.data)) {\n    transactionReport = payout.statusTranscReport.data.filter(function (item) {\n      return item.status.toLowerCase() == \"done\";\n    });\n    transactionReport = transactionReport[0];\n  }\n\n  var totalTransaction = statusReport ? parseInt(statusReport.DONE) + parseInt(statusReport.FAIL) + parseInt(statusReport.REJECTED) : \"\";\n  var chartXData = monthlyReport && monthlyReport.data && monthlyReport.data.map(function (item) {\n    return \"\".concat(item.month, \" \").concat(item.year);\n  });\n  var chartYData = monthlyReport && monthlyReport.data && monthlyReport.data.map(function (item) {\n    return Math.abs(item.totalRevenue);\n  });\n  var chartObj = dynamicDataWithXY(chartXData, chartYData, \"Revenue Chart\", \"Month of the year\", \"Revenue in Rs\");\n\n  if (monthlyReport && document.getElementById(\"myChart3-light\")) {\n    var ctx = document.getElementById(\"myChart3-light\").getContext(\"2d\");\n    var myChart = new Chart(ctx, chartObj);\n  }\n\n  var fontCss = {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n    fontWeight: \"bold\"\n  };\n  (0,react.useEffect)(function () {\n    var dispatch = props.dispatch,\n        payout = props.payout;\n    dispatch((0,actions_payout/* fetchMonthlyReports */.yl)());\n  }, []);\n  var login = props.login;\n  var userPermissions = (0,common/* getUserPermissions */.$h)(login);\n  console.log(\"dashboard\", statusReport, totalTransaction);\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(BreadCrumb/* default */.Z, {\n    heading: \"Dashboard\"\n  }), userPermissions && userPermissions.includes(\"PTM_VENDOR_TRANSACTION_REPORT\") && /*#__PURE__*/react.createElement(UpiCollections, null), /*#__PURE__*/react.createElement(TopInfo, {\n    transactionReport: transactionReport\n  }),  false && /*#__PURE__*/0);\n};\n\nfunction mapStateToProps(state) {\n  return DashBoard_objectSpread({}, state);\n}\n\n/* harmony default export */ const DashBoard_DashBoard = ((0,es/* connect */.$j)(mapStateToProps)(DashBoard));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1724\n");

/***/ }),

/***/ 4213:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1002);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n/*!\r\n * Chart.js\r\n * http://chartjs.org/\r\n * Version: 2.4.0\r\n *\r\n * Copyright 2016 Nick Downie\r\n * Released under the MIT license\r\n * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md\r\n */\n!function (t) {\n  if (\"object\" == (typeof exports === \"undefined\" ? \"undefined\" : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(exports)) && \"undefined\" != \"object\") module.exports = t();else if (\"function\" == typeof define && __webpack_require__.amdO) define([], t);else {\n    var e;\n    e = \"undefined\" != typeof window ? window : \"undefined\" != typeof __webpack_require__.g ? __webpack_require__.g : \"undefined\" != typeof self ? self : this, e.Chart = t();\n  }\n}(function () {\n  return function t(e, a, i) {\n    function n(r, l) {\n      if (!a[r]) {\n        if (!e[r]) {\n          var s = undefined;\n          if (!l && s) return require(r, !0);\n          if (o) return o(r, !0);\n          var d = new Error(\"Cannot find module '\" + r + \"'\");\n          throw d.code = \"MODULE_NOT_FOUND\", d;\n        }\n\n        var u = a[r] = {\n          exports: {}\n        };\n        e[r][0].call(u.exports, function (t) {\n          var a = e[r][1][t];\n          return n(a ? a : t);\n        }, u, u.exports, t, e, a, i);\n      }\n\n      return a[r].exports;\n    }\n\n    for (var o = undefined, r = 0; r < i.length; r++) {\n      n(i[r]);\n    }\n\n    return n;\n  }({\n    1: [function (t, e, a) {}, {}],\n    2: [function (t, e, a) {\n      function i(t) {\n        if (t) {\n          var e = /^#([a-fA-F0-9]{3})$/,\n              a = /^#([a-fA-F0-9]{6})$/,\n              i = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\n              n = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\n              o = /(\\w+)/,\n              r = [0, 0, 0],\n              l = 1,\n              s = t.match(e);\n\n          if (s) {\n            s = s[1];\n\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s[d] + s[d], 16);\n            }\n          } else if (s = t.match(a)) {\n            s = s[1];\n\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s.slice(2 * d, 2 * d + 2), 16);\n            }\n          } else if (s = t.match(i)) {\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s[d + 1]);\n            }\n\n            l = parseFloat(s[4]);\n          } else if (s = t.match(n)) {\n            for (var d = 0; d < r.length; d++) {\n              r[d] = Math.round(2.55 * parseFloat(s[d + 1]));\n            }\n\n            l = parseFloat(s[4]);\n          } else if (s = t.match(o)) {\n            if (\"transparent\" == s[1]) return [0, 0, 0, 0];\n            if (r = y[s[1]], !r) return;\n          }\n\n          for (var d = 0; d < r.length; d++) {\n            r[d] = v(r[d], 0, 255);\n          }\n\n          return l = l || 0 == l ? v(l, 0, 1) : 1, r[3] = l, r;\n        }\n      }\n\n      function n(t) {\n        if (t) {\n          var e = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/,\n              a = t.match(e);\n\n          if (a) {\n            var i = parseFloat(a[4]),\n                n = v(parseInt(a[1]), 0, 360),\n                o = v(parseFloat(a[2]), 0, 100),\n                r = v(parseFloat(a[3]), 0, 100),\n                l = v(isNaN(i) ? 1 : i, 0, 1);\n            return [n, o, r, l];\n          }\n        }\n      }\n\n      function o(t) {\n        if (t) {\n          var e = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/,\n              a = t.match(e);\n\n          if (a) {\n            var i = parseFloat(a[4]),\n                n = v(parseInt(a[1]), 0, 360),\n                o = v(parseFloat(a[2]), 0, 100),\n                r = v(parseFloat(a[3]), 0, 100),\n                l = v(isNaN(i) ? 1 : i, 0, 1);\n            return [n, o, r, l];\n          }\n        }\n      }\n\n      function r(t) {\n        var e = i(t);\n        return e && e.slice(0, 3);\n      }\n\n      function l(t) {\n        var e = n(t);\n        return e && e.slice(0, 3);\n      }\n\n      function s(t) {\n        var e = i(t);\n        return e ? e[3] : (e = n(t)) ? e[3] : (e = o(t)) ? e[3] : void 0;\n      }\n\n      function d(t) {\n        return \"#\" + x(t[0]) + x(t[1]) + x(t[2]);\n      }\n\n      function u(t, e) {\n        return 1 > e || t[3] && t[3] < 1 ? c(t, e) : \"rgb(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \")\";\n      }\n\n      function c(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"rgba(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \", \" + e + \")\";\n      }\n\n      function h(t, e) {\n        if (1 > e || t[3] && t[3] < 1) return f(t, e);\n        var a = Math.round(t[0] / 255 * 100),\n            i = Math.round(t[1] / 255 * 100),\n            n = Math.round(t[2] / 255 * 100);\n        return \"rgb(\" + a + \"%, \" + i + \"%, \" + n + \"%)\";\n      }\n\n      function f(t, e) {\n        var a = Math.round(t[0] / 255 * 100),\n            i = Math.round(t[1] / 255 * 100),\n            n = Math.round(t[2] / 255 * 100);\n        return \"rgba(\" + a + \"%, \" + i + \"%, \" + n + \"%, \" + (e || t[3] || 1) + \")\";\n      }\n\n      function g(t, e) {\n        return 1 > e || t[3] && t[3] < 1 ? p(t, e) : \"hsl(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%)\";\n      }\n\n      function p(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hsla(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%, \" + e + \")\";\n      }\n\n      function m(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hwb(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%\" + (void 0 !== e && 1 !== e ? \", \" + e : \"\") + \")\";\n      }\n\n      function b(t) {\n        return k[t.slice(0, 3)];\n      }\n\n      function v(t, e, a) {\n        return Math.min(Math.max(e, t), a);\n      }\n\n      function x(t) {\n        var e = t.toString(16).toUpperCase();\n        return e.length < 2 ? \"0\" + e : e;\n      }\n\n      var y = t(6);\n      e.exports = {\n        getRgba: i,\n        getHsla: n,\n        getRgb: r,\n        getHsl: l,\n        getHwb: o,\n        getAlpha: s,\n        hexString: d,\n        rgbString: u,\n        rgbaString: c,\n        percentString: h,\n        percentaString: f,\n        hslString: g,\n        hslaString: p,\n        hwbString: m,\n        keyword: b\n      };\n      var k = {};\n\n      for (var S in y) {\n        k[y[S]] = S;\n      }\n    }, {\n      6: 6\n    }],\n    3: [function (t, e, a) {\n      var i = t(5),\n          n = t(2),\n          o = function o(t) {\n        if (t instanceof o) return t;\n        if (!(this instanceof o)) return new o(t);\n        this.values = {\n          rgb: [0, 0, 0],\n          hsl: [0, 0, 0],\n          hsv: [0, 0, 0],\n          hwb: [0, 0, 0],\n          cmyk: [0, 0, 0, 0],\n          alpha: 1\n        };\n        var e;\n        if (\"string\" == typeof t) {\n          if (e = n.getRgba(t)) this.setValues(\"rgb\", e);else if (e = n.getHsla(t)) this.setValues(\"hsl\", e);else {\n            if (!(e = n.getHwb(t))) throw new Error('Unable to parse color from string \"' + t + '\"');\n            this.setValues(\"hwb\", e);\n          }\n        } else if (\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t)) if (e = t, void 0 !== e.r || void 0 !== e.red) this.setValues(\"rgb\", e);else if (void 0 !== e.l || void 0 !== e.lightness) this.setValues(\"hsl\", e);else if (void 0 !== e.v || void 0 !== e.value) this.setValues(\"hsv\", e);else if (void 0 !== e.w || void 0 !== e.whiteness) this.setValues(\"hwb\", e);else {\n          if (void 0 === e.c && void 0 === e.cyan) throw new Error(\"Unable to parse color from object \" + JSON.stringify(t));\n          this.setValues(\"cmyk\", e);\n        }\n      };\n\n      o.prototype = {\n        rgb: function rgb() {\n          return this.setSpace(\"rgb\", arguments);\n        },\n        hsl: function hsl() {\n          return this.setSpace(\"hsl\", arguments);\n        },\n        hsv: function hsv() {\n          return this.setSpace(\"hsv\", arguments);\n        },\n        hwb: function hwb() {\n          return this.setSpace(\"hwb\", arguments);\n        },\n        cmyk: function cmyk() {\n          return this.setSpace(\"cmyk\", arguments);\n        },\n        rgbArray: function rgbArray() {\n          return this.values.rgb;\n        },\n        hslArray: function hslArray() {\n          return this.values.hsl;\n        },\n        hsvArray: function hsvArray() {\n          return this.values.hsv;\n        },\n        hwbArray: function hwbArray() {\n          var t = this.values;\n          return 1 !== t.alpha ? t.hwb.concat([t.alpha]) : t.hwb;\n        },\n        cmykArray: function cmykArray() {\n          return this.values.cmyk;\n        },\n        rgbaArray: function rgbaArray() {\n          var t = this.values;\n          return t.rgb.concat([t.alpha]);\n        },\n        hslaArray: function hslaArray() {\n          var t = this.values;\n          return t.hsl.concat([t.alpha]);\n        },\n        alpha: function alpha(t) {\n          return void 0 === t ? this.values.alpha : (this.setValues(\"alpha\", t), this);\n        },\n        red: function red(t) {\n          return this.setChannel(\"rgb\", 0, t);\n        },\n        green: function green(t) {\n          return this.setChannel(\"rgb\", 1, t);\n        },\n        blue: function blue(t) {\n          return this.setChannel(\"rgb\", 2, t);\n        },\n        hue: function hue(t) {\n          return t && (t %= 360, t = 0 > t ? 360 + t : t), this.setChannel(\"hsl\", 0, t);\n        },\n        saturation: function saturation(t) {\n          return this.setChannel(\"hsl\", 1, t);\n        },\n        lightness: function lightness(t) {\n          return this.setChannel(\"hsl\", 2, t);\n        },\n        saturationv: function saturationv(t) {\n          return this.setChannel(\"hsv\", 1, t);\n        },\n        whiteness: function whiteness(t) {\n          return this.setChannel(\"hwb\", 1, t);\n        },\n        blackness: function blackness(t) {\n          return this.setChannel(\"hwb\", 2, t);\n        },\n        value: function value(t) {\n          return this.setChannel(\"hsv\", 2, t);\n        },\n        cyan: function cyan(t) {\n          return this.setChannel(\"cmyk\", 0, t);\n        },\n        magenta: function magenta(t) {\n          return this.setChannel(\"cmyk\", 1, t);\n        },\n        yellow: function yellow(t) {\n          return this.setChannel(\"cmyk\", 2, t);\n        },\n        black: function black(t) {\n          return this.setChannel(\"cmyk\", 3, t);\n        },\n        hexString: function hexString() {\n          return n.hexString(this.values.rgb);\n        },\n        rgbString: function rgbString() {\n          return n.rgbString(this.values.rgb, this.values.alpha);\n        },\n        rgbaString: function rgbaString() {\n          return n.rgbaString(this.values.rgb, this.values.alpha);\n        },\n        percentString: function percentString() {\n          return n.percentString(this.values.rgb, this.values.alpha);\n        },\n        hslString: function hslString() {\n          return n.hslString(this.values.hsl, this.values.alpha);\n        },\n        hslaString: function hslaString() {\n          return n.hslaString(this.values.hsl, this.values.alpha);\n        },\n        hwbString: function hwbString() {\n          return n.hwbString(this.values.hwb, this.values.alpha);\n        },\n        keyword: function keyword() {\n          return n.keyword(this.values.rgb, this.values.alpha);\n        },\n        rgbNumber: function rgbNumber() {\n          var t = this.values.rgb;\n          return t[0] << 16 | t[1] << 8 | t[2];\n        },\n        luminosity: function luminosity() {\n          for (var t = this.values.rgb, e = [], a = 0; a < t.length; a++) {\n            var i = t[a] / 255;\n            e[a] = 0.03928 >= i ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4);\n          }\n\n          return 0.2126 * e[0] + 0.7152 * e[1] + 0.0722 * e[2];\n        },\n        contrast: function contrast(t) {\n          var e = this.luminosity(),\n              a = t.luminosity();\n          return e > a ? (e + 0.05) / (a + 0.05) : (a + 0.05) / (e + 0.05);\n        },\n        level: function level(t) {\n          var e = this.contrast(t);\n          return e >= 7.1 ? \"AAA\" : e >= 4.5 ? \"AA\" : \"\";\n        },\n        dark: function dark() {\n          var t = this.values.rgb,\n              e = (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3;\n          return 128 > e;\n        },\n        light: function light() {\n          return !this.dark();\n        },\n        negate: function negate() {\n          for (var t = [], e = 0; 3 > e; e++) {\n            t[e] = 255 - this.values.rgb[e];\n          }\n\n          return this.setValues(\"rgb\", t), this;\n        },\n        lighten: function lighten(t) {\n          var e = this.values.hsl;\n          return e[2] += e[2] * t, this.setValues(\"hsl\", e), this;\n        },\n        darken: function darken(t) {\n          var e = this.values.hsl;\n          return e[2] -= e[2] * t, this.setValues(\"hsl\", e), this;\n        },\n        saturate: function saturate(t) {\n          var e = this.values.hsl;\n          return e[1] += e[1] * t, this.setValues(\"hsl\", e), this;\n        },\n        desaturate: function desaturate(t) {\n          var e = this.values.hsl;\n          return e[1] -= e[1] * t, this.setValues(\"hsl\", e), this;\n        },\n        whiten: function whiten(t) {\n          var e = this.values.hwb;\n          return e[1] += e[1] * t, this.setValues(\"hwb\", e), this;\n        },\n        blacken: function blacken(t) {\n          var e = this.values.hwb;\n          return e[2] += e[2] * t, this.setValues(\"hwb\", e), this;\n        },\n        greyscale: function greyscale() {\n          var t = this.values.rgb,\n              e = 0.3 * t[0] + 0.59 * t[1] + 0.11 * t[2];\n          return this.setValues(\"rgb\", [e, e, e]), this;\n        },\n        clearer: function clearer(t) {\n          var e = this.values.alpha;\n          return this.setValues(\"alpha\", e - e * t), this;\n        },\n        opaquer: function opaquer(t) {\n          var e = this.values.alpha;\n          return this.setValues(\"alpha\", e + e * t), this;\n        },\n        rotate: function rotate(t) {\n          var e = this.values.hsl,\n              a = (e[0] + t) % 360;\n          return e[0] = 0 > a ? 360 + a : a, this.setValues(\"hsl\", e), this;\n        },\n        mix: function mix(t, e) {\n          var a = this,\n              i = t,\n              n = void 0 === e ? 0.5 : e,\n              o = 2 * n - 1,\n              r = a.alpha() - i.alpha(),\n              l = ((o * r === -1 ? o : (o + r) / (1 + o * r)) + 1) / 2,\n              s = 1 - l;\n          return this.rgb(l * a.red() + s * i.red(), l * a.green() + s * i.green(), l * a.blue() + s * i.blue()).alpha(a.alpha() * n + i.alpha() * (1 - n));\n        },\n        toJSON: function toJSON() {\n          return this.rgb();\n        },\n        clone: function clone() {\n          var t,\n              e,\n              a = new o(),\n              i = this.values,\n              n = a.values;\n\n          for (var r in i) {\n            i.hasOwnProperty(r) && (t = i[r], e = {}.toString.call(t), \"[object Array]\" === e ? n[r] = t.slice(0) : \"[object Number]\" === e ? n[r] = t : console.error(\"unexpected color value:\", t));\n          }\n\n          return a;\n        }\n      }, o.prototype.spaces = {\n        rgb: [\"red\", \"green\", \"blue\"],\n        hsl: [\"hue\", \"saturation\", \"lightness\"],\n        hsv: [\"hue\", \"saturation\", \"value\"],\n        hwb: [\"hue\", \"whiteness\", \"blackness\"],\n        cmyk: [\"cyan\", \"magenta\", \"yellow\", \"black\"]\n      }, o.prototype.maxes = {\n        rgb: [255, 255, 255],\n        hsl: [360, 100, 100],\n        hsv: [360, 100, 100],\n        hwb: [360, 100, 100],\n        cmyk: [100, 100, 100, 100]\n      }, o.prototype.getValues = function (t) {\n        for (var e = this.values, a = {}, i = 0; i < t.length; i++) {\n          a[t.charAt(i)] = e[t][i];\n        }\n\n        return 1 !== e.alpha && (a.a = e.alpha), a;\n      }, o.prototype.setValues = function (t, e) {\n        var a,\n            n = this.values,\n            o = this.spaces,\n            r = this.maxes,\n            l = 1;\n        if (\"alpha\" === t) l = e;else if (e.length) n[t] = e.slice(0, t.length), l = e[t.length];else if (void 0 !== e[t.charAt(0)]) {\n          for (a = 0; a < t.length; a++) {\n            n[t][a] = e[t.charAt(a)];\n          }\n\n          l = e.a;\n        } else if (void 0 !== e[o[t][0]]) {\n          var s = o[t];\n\n          for (a = 0; a < t.length; a++) {\n            n[t][a] = e[s[a]];\n          }\n\n          l = e.alpha;\n        }\n        if (n.alpha = Math.max(0, Math.min(1, void 0 === l ? n.alpha : l)), \"alpha\" === t) return !1;\n        var d;\n\n        for (a = 0; a < t.length; a++) {\n          d = Math.max(0, Math.min(r[t][a], n[t][a])), n[t][a] = Math.round(d);\n        }\n\n        for (var u in o) {\n          u !== t && (n[u] = i[t][u](n[t]));\n        }\n\n        return !0;\n      }, o.prototype.setSpace = function (t, e) {\n        var a = e[0];\n        return void 0 === a ? this.getValues(t) : (\"number\" == typeof a && (a = Array.prototype.slice.call(e)), this.setValues(t, a), this);\n      }, o.prototype.setChannel = function (t, e, a) {\n        var i = this.values[t];\n        return void 0 === a ? i[e] : a === i[e] ? this : (i[e] = a, this.setValues(t, i), this);\n      }, \"undefined\" != typeof window && (window.Color = o), e.exports = o;\n    }, {\n      2: 2,\n      5: 5\n    }],\n    4: [function (t, e, a) {\n      function i(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 255,\n            o = t[1] / 255,\n            r = t[2] / 255,\n            l = Math.min(n, o, r),\n            s = Math.max(n, o, r),\n            d = s - l;\n        return s == l ? e = 0 : n == s ? e = (o - r) / d : o == s ? e = 2 + (r - n) / d : r == s && (e = 4 + (n - o) / d), e = Math.min(60 * e, 360), 0 > e && (e += 360), i = (l + s) / 2, a = s == l ? 0 : 0.5 >= i ? d / (s + l) : d / (2 - s - l), [e, 100 * a, 100 * i];\n      }\n\n      function n(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2],\n            l = Math.min(n, o, r),\n            s = Math.max(n, o, r),\n            d = s - l;\n        return a = 0 == s ? 0 : d / s * 1e3 / 10, s == l ? e = 0 : n == s ? e = (o - r) / d : o == s ? e = 2 + (r - n) / d : r == s && (e = 4 + (n - o) / d), e = Math.min(60 * e, 360), 0 > e && (e += 360), i = s / 255 * 1e3 / 10, [e, a, i];\n      }\n\n      function o(t) {\n        var e = t[0],\n            a = t[1],\n            n = t[2],\n            o = i(t)[0],\n            r = 1 / 255 * Math.min(e, Math.min(a, n)),\n            n = 1 - 1 / 255 * Math.max(e, Math.max(a, n));\n        return [o, 100 * r, 100 * n];\n      }\n\n      function l(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0] / 255,\n            r = t[1] / 255,\n            l = t[2] / 255;\n        return n = Math.min(1 - o, 1 - r, 1 - l), e = (1 - o - n) / (1 - n) || 0, a = (1 - r - n) / (1 - n) || 0, i = (1 - l - n) / (1 - n) || 0, [100 * e, 100 * a, 100 * i, 100 * n];\n      }\n\n      function s(t) {\n        return G[JSON.stringify(t)];\n      }\n\n      function d(t) {\n        var e = t[0] / 255,\n            a = t[1] / 255,\n            i = t[2] / 255;\n        e = e > 0.04045 ? Math.pow((e + 0.055) / 1.055, 2.4) : e / 12.92, a = a > 0.04045 ? Math.pow((a + 0.055) / 1.055, 2.4) : a / 12.92, i = i > 0.04045 ? Math.pow((i + 0.055) / 1.055, 2.4) : i / 12.92;\n        var n = 0.4124 * e + 0.3576 * a + 0.1805 * i,\n            o = 0.2126 * e + 0.7152 * a + 0.0722 * i,\n            r = 0.0193 * e + 0.1192 * a + 0.9505 * i;\n        return [100 * n, 100 * o, 100 * r];\n      }\n\n      function u(t) {\n        var e,\n            a,\n            i,\n            n = d(t),\n            o = n[0],\n            r = n[1],\n            l = n[2];\n        return o /= 95.047, r /= 100, l /= 108.883, o = o > 0.008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, l = l > 0.008856 ? Math.pow(l, 1 / 3) : 7.787 * l + 16 / 116, e = 116 * r - 16, a = 500 * (o - r), i = 200 * (r - l), [e, a, i];\n      }\n\n      function c(t) {\n        return W(u(t));\n      }\n\n      function h(t) {\n        var e,\n            a,\n            i,\n            n,\n            o,\n            r = t[0] / 360,\n            l = t[1] / 100,\n            s = t[2] / 100;\n        if (0 == l) return o = 255 * s, [o, o, o];\n        a = 0.5 > s ? s * (1 + l) : s + l - s * l, e = 2 * s - a, n = [0, 0, 0];\n\n        for (var d = 0; 3 > d; d++) {\n          i = r + 1 / 3 * -(d - 1), 0 > i && i++, i > 1 && i--, o = 1 > 6 * i ? e + 6 * (a - e) * i : 1 > 2 * i ? a : 2 > 3 * i ? e + (a - e) * (2 / 3 - i) * 6 : e, n[d] = 255 * o;\n        }\n\n        return n;\n      }\n\n      function f(t) {\n        var e,\n            a,\n            i = t[0],\n            n = t[1] / 100,\n            o = t[2] / 100;\n        return 0 === o ? [0, 0, 0] : (o *= 2, n *= 1 >= o ? o : 2 - o, a = (o + n) / 2, e = 2 * n / (o + n), [i, 100 * e, 100 * a]);\n      }\n\n      function p(t) {\n        return o(h(t));\n      }\n\n      function m(t) {\n        return l(h(t));\n      }\n\n      function v(t) {\n        return s(h(t));\n      }\n\n      function x(t) {\n        var e = t[0] / 60,\n            a = t[1] / 100,\n            i = t[2] / 100,\n            n = Math.floor(e) % 6,\n            o = e - Math.floor(e),\n            r = 255 * i * (1 - a),\n            l = 255 * i * (1 - a * o),\n            s = 255 * i * (1 - a * (1 - o)),\n            i = 255 * i;\n\n        switch (n) {\n          case 0:\n            return [i, s, r];\n\n          case 1:\n            return [l, i, r];\n\n          case 2:\n            return [r, i, s];\n\n          case 3:\n            return [r, l, i];\n\n          case 4:\n            return [s, r, i];\n\n          case 5:\n            return [i, r, l];\n        }\n      }\n\n      function y(t) {\n        var e,\n            a,\n            i = t[0],\n            n = t[1] / 100,\n            o = t[2] / 100;\n        return a = (2 - n) * o, e = n * o, e /= 1 >= a ? a : 2 - a, e = e || 0, a /= 2, [i, 100 * e, 100 * a];\n      }\n\n      function k(t) {\n        return o(x(t));\n      }\n\n      function S(t) {\n        return l(x(t));\n      }\n\n      function w(t) {\n        return s(x(t));\n      }\n\n      function M(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0] / 360,\n            l = t[1] / 100,\n            s = t[2] / 100,\n            d = l + s;\n\n        switch (d > 1 && (l /= d, s /= d), e = Math.floor(6 * o), a = 1 - s, i = 6 * o - e, 0 != (1 & e) && (i = 1 - i), n = l + i * (a - l), e) {\n          default:\n          case 6:\n          case 0:\n            r = a, g = n, b = l;\n            break;\n\n          case 1:\n            r = n, g = a, b = l;\n            break;\n\n          case 2:\n            r = l, g = a, b = n;\n            break;\n\n          case 3:\n            r = l, g = n, b = a;\n            break;\n\n          case 4:\n            r = n, g = l, b = a;\n            break;\n\n          case 5:\n            r = a, g = l, b = n;\n        }\n\n        return [255 * r, 255 * g, 255 * b];\n      }\n\n      function C(t) {\n        return i(M(t));\n      }\n\n      function D(t) {\n        return n(M(t));\n      }\n\n      function I(t) {\n        return l(M(t));\n      }\n\n      function A(t) {\n        return s(M(t));\n      }\n\n      function T(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 100,\n            o = t[1] / 100,\n            r = t[2] / 100,\n            l = t[3] / 100;\n        return e = 1 - Math.min(1, n * (1 - l) + l), a = 1 - Math.min(1, o * (1 - l) + l), i = 1 - Math.min(1, r * (1 - l) + l), [255 * e, 255 * a, 255 * i];\n      }\n\n      function P(t) {\n        return i(T(t));\n      }\n\n      function F(t) {\n        return n(T(t));\n      }\n\n      function _(t) {\n        return o(T(t));\n      }\n\n      function R(t) {\n        return s(T(t));\n      }\n\n      function V(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 100,\n            o = t[1] / 100,\n            r = t[2] / 100;\n        return e = 3.2406 * n + -1.5372 * o + r * -0.4986, a = n * -0.9689 + 1.8758 * o + 0.0415 * r, i = 0.0557 * n + o * -0.204 + 1.057 * r, e = e > 0.0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - 0.055 : e = 12.92 * e, a = a > 0.0031308 ? 1.055 * Math.pow(a, 1 / 2.4) - 0.055 : a = 12.92 * a, i = i > 0.0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - 0.055 : i = 12.92 * i, e = Math.min(Math.max(0, e), 1), a = Math.min(Math.max(0, a), 1), i = Math.min(Math.max(0, i), 1), [255 * e, 255 * a, 255 * i];\n      }\n\n      function L(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return n /= 95.047, o /= 100, r /= 108.883, n = n > 0.008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, o = o > 0.008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, e = 116 * o - 16, a = 500 * (n - o), i = 200 * (o - r), [e, a, i];\n      }\n\n      function O(t) {\n        return W(L(t));\n      }\n\n      function B(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0],\n            r = t[1],\n            l = t[2];\n        return 8 >= o ? (a = 100 * o / 903.3, n = 7.787 * (a / 100) + 16 / 116) : (a = 100 * Math.pow((o + 16) / 116, 3), n = Math.pow(a / 100, 1 / 3)), e = 0.008856 >= e / 95.047 ? e = 95.047 * (r / 500 + n - 16 / 116) / 7.787 : 95.047 * Math.pow(r / 500 + n, 3), i = 0.008859 >= i / 108.883 ? i = 108.883 * (n - l / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(n - l / 200, 3), [e, a, i];\n      }\n\n      function W(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return e = Math.atan2(r, o), a = 360 * e / 2 / Math.PI, 0 > a && (a += 360), i = Math.sqrt(o * o + r * r), [n, i, a];\n      }\n\n      function z(t) {\n        return V(B(t));\n      }\n\n      function N(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return i = r / 360 * 2 * Math.PI, e = o * Math.cos(i), a = o * Math.sin(i), [n, e, a];\n      }\n\n      function E(t) {\n        return B(N(t));\n      }\n\n      function H(t) {\n        return z(N(t));\n      }\n\n      function U(t) {\n        return Z[t];\n      }\n\n      function j(t) {\n        return i(U(t));\n      }\n\n      function q(t) {\n        return n(U(t));\n      }\n\n      function Y(t) {\n        return o(U(t));\n      }\n\n      function X(t) {\n        return l(U(t));\n      }\n\n      function K(t) {\n        return u(U(t));\n      }\n\n      function J(t) {\n        return d(U(t));\n      }\n\n      e.exports = {\n        rgb2hsl: i,\n        rgb2hsv: n,\n        rgb2hwb: o,\n        rgb2cmyk: l,\n        rgb2keyword: s,\n        rgb2xyz: d,\n        rgb2lab: u,\n        rgb2lch: c,\n        hsl2rgb: h,\n        hsl2hsv: f,\n        hsl2hwb: p,\n        hsl2cmyk: m,\n        hsl2keyword: v,\n        hsv2rgb: x,\n        hsv2hsl: y,\n        hsv2hwb: k,\n        hsv2cmyk: S,\n        hsv2keyword: w,\n        hwb2rgb: M,\n        hwb2hsl: C,\n        hwb2hsv: D,\n        hwb2cmyk: I,\n        hwb2keyword: A,\n        cmyk2rgb: T,\n        cmyk2hsl: P,\n        cmyk2hsv: F,\n        cmyk2hwb: _,\n        cmyk2keyword: R,\n        keyword2rgb: U,\n        keyword2hsl: j,\n        keyword2hsv: q,\n        keyword2hwb: Y,\n        keyword2cmyk: X,\n        keyword2lab: K,\n        keyword2xyz: J,\n        xyz2rgb: V,\n        xyz2lab: L,\n        xyz2lch: O,\n        lab2xyz: B,\n        lab2rgb: z,\n        lab2lch: W,\n        lch2lab: N,\n        lch2xyz: E,\n        lch2rgb: H\n      };\n      var Z = {\n        aliceblue: [240, 248, 255],\n        antiquewhite: [250, 235, 215],\n        aqua: [0, 255, 255],\n        aquamarine: [127, 255, 212],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        bisque: [255, 228, 196],\n        black: [0, 0, 0],\n        blanchedalmond: [255, 235, 205],\n        blue: [0, 0, 255],\n        blueviolet: [138, 43, 226],\n        brown: [165, 42, 42],\n        burlywood: [222, 184, 135],\n        cadetblue: [95, 158, 160],\n        chartreuse: [127, 255, 0],\n        chocolate: [210, 105, 30],\n        coral: [255, 127, 80],\n        cornflowerblue: [100, 149, 237],\n        cornsilk: [255, 248, 220],\n        crimson: [220, 20, 60],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgoldenrod: [184, 134, 11],\n        darkgray: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkgrey: [169, 169, 169],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkseagreen: [143, 188, 143],\n        darkslateblue: [72, 61, 139],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        darkturquoise: [0, 206, 209],\n        darkviolet: [148, 0, 211],\n        deeppink: [255, 20, 147],\n        deepskyblue: [0, 191, 255],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        dodgerblue: [30, 144, 255],\n        firebrick: [178, 34, 34],\n        floralwhite: [255, 250, 240],\n        forestgreen: [34, 139, 34],\n        fuchsia: [255, 0, 255],\n        gainsboro: [220, 220, 220],\n        ghostwhite: [248, 248, 255],\n        gold: [255, 215, 0],\n        goldenrod: [218, 165, 32],\n        gray: [128, 128, 128],\n        green: [0, 128, 0],\n        greenyellow: [173, 255, 47],\n        grey: [128, 128, 128],\n        honeydew: [240, 255, 240],\n        hotpink: [255, 105, 180],\n        indianred: [205, 92, 92],\n        indigo: [75, 0, 130],\n        ivory: [255, 255, 240],\n        khaki: [240, 230, 140],\n        lavender: [230, 230, 250],\n        lavenderblush: [255, 240, 245],\n        lawngreen: [124, 252, 0],\n        lemonchiffon: [255, 250, 205],\n        lightblue: [173, 216, 230],\n        lightcoral: [240, 128, 128],\n        lightcyan: [224, 255, 255],\n        lightgoldenrodyellow: [250, 250, 210],\n        lightgray: [211, 211, 211],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightsalmon: [255, 160, 122],\n        lightseagreen: [32, 178, 170],\n        lightskyblue: [135, 206, 250],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        lightsteelblue: [176, 196, 222],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        limegreen: [50, 205, 50],\n        linen: [250, 240, 230],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        mediumaquamarine: [102, 205, 170],\n        mediumblue: [0, 0, 205],\n        mediumorchid: [186, 85, 211],\n        mediumpurple: [147, 112, 219],\n        mediumseagreen: [60, 179, 113],\n        mediumslateblue: [123, 104, 238],\n        mediumspringgreen: [0, 250, 154],\n        mediumturquoise: [72, 209, 204],\n        mediumvioletred: [199, 21, 133],\n        midnightblue: [25, 25, 112],\n        mintcream: [245, 255, 250],\n        mistyrose: [255, 228, 225],\n        moccasin: [255, 228, 181],\n        navajowhite: [255, 222, 173],\n        navy: [0, 0, 128],\n        oldlace: [253, 245, 230],\n        olive: [128, 128, 0],\n        olivedrab: [107, 142, 35],\n        orange: [255, 165, 0],\n        orangered: [255, 69, 0],\n        orchid: [218, 112, 214],\n        palegoldenrod: [238, 232, 170],\n        palegreen: [152, 251, 152],\n        paleturquoise: [175, 238, 238],\n        palevioletred: [219, 112, 147],\n        papayawhip: [255, 239, 213],\n        peachpuff: [255, 218, 185],\n        peru: [205, 133, 63],\n        pink: [255, 192, 203],\n        plum: [221, 160, 221],\n        powderblue: [176, 224, 230],\n        purple: [128, 0, 128],\n        rebeccapurple: [102, 51, 153],\n        red: [255, 0, 0],\n        rosybrown: [188, 143, 143],\n        royalblue: [65, 105, 225],\n        saddlebrown: [139, 69, 19],\n        salmon: [250, 128, 114],\n        sandybrown: [244, 164, 96],\n        seagreen: [46, 139, 87],\n        seashell: [255, 245, 238],\n        sienna: [160, 82, 45],\n        silver: [192, 192, 192],\n        skyblue: [135, 206, 235],\n        slateblue: [106, 90, 205],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        snow: [255, 250, 250],\n        springgreen: [0, 255, 127],\n        steelblue: [70, 130, 180],\n        tan: [210, 180, 140],\n        teal: [0, 128, 128],\n        thistle: [216, 191, 216],\n        tomato: [255, 99, 71],\n        turquoise: [64, 224, 208],\n        violet: [238, 130, 238],\n        wheat: [245, 222, 179],\n        white: [255, 255, 255],\n        whitesmoke: [245, 245, 245],\n        yellow: [255, 255, 0],\n        yellowgreen: [154, 205, 50]\n      },\n          G = {};\n\n      for (var Q in Z) {\n        G[JSON.stringify(Z[Q])] = Q;\n      }\n    }, {}],\n    5: [function (t, e, a) {\n      var i = t(4),\n          n = function n() {\n        return new d();\n      };\n\n      for (var o in i) {\n        n[o + \"Raw\"] = function (t) {\n          return function (e) {\n            return \"number\" == typeof e && (e = Array.prototype.slice.call(arguments)), i[t](e);\n          };\n        }(o);\n\n        var r = /(\\w+)2(\\w+)/.exec(o),\n            l = r[1],\n            s = r[2];\n        n[l] = n[l] || {}, n[l][s] = n[o] = function (t) {\n          return function (e) {\n            \"number\" == typeof e && (e = Array.prototype.slice.call(arguments));\n            var a = i[t](e);\n            if (\"string\" == typeof a || void 0 === a) return a;\n\n            for (var n = 0; n < a.length; n++) {\n              a[n] = Math.round(a[n]);\n            }\n\n            return a;\n          };\n        }(o);\n      }\n\n      var d = function d() {\n        this.convs = {};\n      };\n\n      d.prototype.routeSpace = function (t, e) {\n        var a = e[0];\n        return void 0 === a ? this.getValues(t) : (\"number\" == typeof a && (a = Array.prototype.slice.call(e)), this.setValues(t, a));\n      }, d.prototype.setValues = function (t, e) {\n        return this.space = t, this.convs = {}, this.convs[t] = e, this;\n      }, d.prototype.getValues = function (t) {\n        var e = this.convs[t];\n\n        if (!e) {\n          var a = this.space,\n              i = this.convs[a];\n          e = n[a][t](i), this.convs[t] = e;\n        }\n\n        return e;\n      }, [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (t) {\n        d.prototype[t] = function (e) {\n          return this.routeSpace(t, arguments);\n        };\n      }), e.exports = n;\n    }, {\n      4: 4\n    }],\n    6: [function (t, e, a) {\n      e.exports = {\n        aliceblue: [240, 248, 255],\n        antiquewhite: [250, 235, 215],\n        aqua: [0, 255, 255],\n        aquamarine: [127, 255, 212],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        bisque: [255, 228, 196],\n        black: [0, 0, 0],\n        blanchedalmond: [255, 235, 205],\n        blue: [0, 0, 255],\n        blueviolet: [138, 43, 226],\n        brown: [165, 42, 42],\n        burlywood: [222, 184, 135],\n        cadetblue: [95, 158, 160],\n        chartreuse: [127, 255, 0],\n        chocolate: [210, 105, 30],\n        coral: [255, 127, 80],\n        cornflowerblue: [100, 149, 237],\n        cornsilk: [255, 248, 220],\n        crimson: [220, 20, 60],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgoldenrod: [184, 134, 11],\n        darkgray: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkgrey: [169, 169, 169],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkseagreen: [143, 188, 143],\n        darkslateblue: [72, 61, 139],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        darkturquoise: [0, 206, 209],\n        darkviolet: [148, 0, 211],\n        deeppink: [255, 20, 147],\n        deepskyblue: [0, 191, 255],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        dodgerblue: [30, 144, 255],\n        firebrick: [178, 34, 34],\n        floralwhite: [255, 250, 240],\n        forestgreen: [34, 139, 34],\n        fuchsia: [255, 0, 255],\n        gainsboro: [220, 220, 220],\n        ghostwhite: [248, 248, 255],\n        gold: [255, 215, 0],\n        goldenrod: [218, 165, 32],\n        gray: [128, 128, 128],\n        green: [0, 128, 0],\n        greenyellow: [173, 255, 47],\n        grey: [128, 128, 128],\n        honeydew: [240, 255, 240],\n        hotpink: [255, 105, 180],\n        indianred: [205, 92, 92],\n        indigo: [75, 0, 130],\n        ivory: [255, 255, 240],\n        khaki: [240, 230, 140],\n        lavender: [230, 230, 250],\n        lavenderblush: [255, 240, 245],\n        lawngreen: [124, 252, 0],\n        lemonchiffon: [255, 250, 205],\n        lightblue: [173, 216, 230],\n        lightcoral: [240, 128, 128],\n        lightcyan: [224, 255, 255],\n        lightgoldenrodyellow: [250, 250, 210],\n        lightgray: [211, 211, 211],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightsalmon: [255, 160, 122],\n        lightseagreen: [32, 178, 170],\n        lightskyblue: [135, 206, 250],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        lightsteelblue: [176, 196, 222],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        limegreen: [50, 205, 50],\n        linen: [250, 240, 230],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        mediumaquamarine: [102, 205, 170],\n        mediumblue: [0, 0, 205],\n        mediumorchid: [186, 85, 211],\n        mediumpurple: [147, 112, 219],\n        mediumseagreen: [60, 179, 113],\n        mediumslateblue: [123, 104, 238],\n        mediumspringgreen: [0, 250, 154],\n        mediumturquoise: [72, 209, 204],\n        mediumvioletred: [199, 21, 133],\n        midnightblue: [25, 25, 112],\n        mintcream: [245, 255, 250],\n        mistyrose: [255, 228, 225],\n        moccasin: [255, 228, 181],\n        navajowhite: [255, 222, 173],\n        navy: [0, 0, 128],\n        oldlace: [253, 245, 230],\n        olive: [128, 128, 0],\n        olivedrab: [107, 142, 35],\n        orange: [255, 165, 0],\n        orangered: [255, 69, 0],\n        orchid: [218, 112, 214],\n        palegoldenrod: [238, 232, 170],\n        palegreen: [152, 251, 152],\n        paleturquoise: [175, 238, 238],\n        palevioletred: [219, 112, 147],\n        papayawhip: [255, 239, 213],\n        peachpuff: [255, 218, 185],\n        peru: [205, 133, 63],\n        pink: [255, 192, 203],\n        plum: [221, 160, 221],\n        powderblue: [176, 224, 230],\n        purple: [128, 0, 128],\n        rebeccapurple: [102, 51, 153],\n        red: [255, 0, 0],\n        rosybrown: [188, 143, 143],\n        royalblue: [65, 105, 225],\n        saddlebrown: [139, 69, 19],\n        salmon: [250, 128, 114],\n        sandybrown: [244, 164, 96],\n        seagreen: [46, 139, 87],\n        seashell: [255, 245, 238],\n        sienna: [160, 82, 45],\n        silver: [192, 192, 192],\n        skyblue: [135, 206, 235],\n        slateblue: [106, 90, 205],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        snow: [255, 250, 250],\n        springgreen: [0, 255, 127],\n        steelblue: [70, 130, 180],\n        tan: [210, 180, 140],\n        teal: [0, 128, 128],\n        thistle: [216, 191, 216],\n        tomato: [255, 99, 71],\n        turquoise: [64, 224, 208],\n        violet: [238, 130, 238],\n        wheat: [245, 222, 179],\n        white: [255, 255, 255],\n        whitesmoke: [245, 245, 245],\n        yellow: [255, 255, 0],\n        yellowgreen: [154, 205, 50]\n      };\n    }, {}],\n    7: [function (t, e, a) {\n      var i = t(28)();\n      t(26)(i), t(22)(i), t(25)(i), t(21)(i), t(23)(i), t(24)(i), t(29)(i), t(33)(i), t(31)(i), t(34)(i), t(32)(i), t(35)(i), t(30)(i), t(27)(i), t(36)(i), t(37)(i), t(38)(i), t(39)(i), t(40)(i), t(43)(i), t(41)(i), t(42)(i), t(44)(i), t(45)(i), t(46)(i), t(15)(i), t(16)(i), t(17)(i), t(18)(i), t(19)(i), t(20)(i), t(8)(i), t(9)(i), t(10)(i), t(11)(i), t(12)(i), t(13)(i), t(14)(i), window.Chart = e.exports = i;\n    }, {\n      10: 10,\n      11: 11,\n      12: 12,\n      13: 13,\n      14: 14,\n      15: 15,\n      16: 16,\n      17: 17,\n      18: 18,\n      19: 19,\n      20: 20,\n      21: 21,\n      22: 22,\n      23: 23,\n      24: 24,\n      25: 25,\n      26: 26,\n      27: 27,\n      28: 28,\n      29: 29,\n      30: 30,\n      31: 31,\n      32: 32,\n      33: 33,\n      34: 34,\n      35: 35,\n      36: 36,\n      37: 37,\n      38: 38,\n      39: 39,\n      40: 40,\n      41: 41,\n      42: 42,\n      43: 43,\n      44: 44,\n      45: 45,\n      46: 46,\n      8: 8,\n      9: 9\n    }],\n    8: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Bar = function (e, a) {\n          return a.type = \"bar\", new t(e, a);\n        };\n      };\n    }, {}],\n    9: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Bubble = function (e, a) {\n          return a.type = \"bubble\", new t(e, a);\n        };\n      };\n    }, {}],\n    10: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Doughnut = function (e, a) {\n          return a.type = \"doughnut\", new t(e, a);\n        };\n      };\n    }, {}],\n    11: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Line = function (e, a) {\n          return a.type = \"line\", new t(e, a);\n        };\n      };\n    }, {}],\n    12: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.PolarArea = function (e, a) {\n          return a.type = \"polarArea\", new t(e, a);\n        };\n      };\n    }, {}],\n    13: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Radar = function (e, a) {\n          return a.type = \"radar\", new t(e, a);\n        };\n      };\n    }, {}],\n    14: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = {\n          hover: {\n            mode: \"single\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\",\n              id: \"x-axis-1\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              position: \"left\",\n              id: \"y-axis-1\"\n            }]\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t) {\n                return \"(\" + t.xLabel + \", \" + t.yLabel + \")\";\n              }\n            }\n          }\n        };\n        t.defaults.scatter = e, t.controllers.scatter = t.controllers.line, t.Scatter = function (e, a) {\n          return a.type = \"scatter\", new t(e, a);\n        };\n      };\n    }, {}],\n    15: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.bar = {\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"category\",\n              categoryPercentage: 0.8,\n              barPercentage: 0.9,\n              gridLines: {\n                offsetGridLines: !0\n              }\n            }],\n            yAxes: [{\n              type: \"linear\"\n            }]\n          }\n        }, t.controllers.bar = t.DatasetController.extend({\n          dataElementType: t.elements.Rectangle,\n          initialize: function initialize(e, a) {\n            t.DatasetController.prototype.initialize.call(this, e, a), this.getMeta().bar = !0;\n          },\n          getBarCount: function getBarCount() {\n            var t = this,\n                a = 0;\n            return e.each(t.chart.data.datasets, function (e, i) {\n              var n = t.chart.getDatasetMeta(i);\n              n.bar && t.chart.isDatasetVisible(i) && ++a;\n            }, t), a;\n          },\n          update: function update(t) {\n            var a = this;\n            e.each(a.getMeta().data, function (e, i) {\n              a.updateElement(e, i, t);\n            }, a);\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.getMeta(),\n                r = n.getScaleForId(o.xAxisID),\n                l = n.getScaleForId(o.yAxisID),\n                s = l.getBasePixel(),\n                d = n.chart.options.elements.rectangle,\n                u = t.custom || {},\n                c = n.getDataset();\n            t._xScale = r, t._yScale = l, t._datasetIndex = n.index, t._index = a;\n            var h = n.getRuler(a);\n            t._model = {\n              x: n.calculateBarX(a, n.index, h),\n              y: i ? s : n.calculateBarY(a, n.index),\n              label: n.chart.data.labels[a],\n              datasetLabel: c.label,\n              base: i ? s : n.calculateBarBase(n.index, a),\n              width: n.calculateBarWidth(h),\n              backgroundColor: u.backgroundColor ? u.backgroundColor : e.getValueAtIndexOrDefault(c.backgroundColor, a, d.backgroundColor),\n              borderSkipped: u.borderSkipped ? u.borderSkipped : d.borderSkipped,\n              borderColor: u.borderColor ? u.borderColor : e.getValueAtIndexOrDefault(c.borderColor, a, d.borderColor),\n              borderWidth: u.borderWidth ? u.borderWidth : e.getValueAtIndexOrDefault(c.borderWidth, a, d.borderWidth)\n            }, t.pivot();\n          },\n          calculateBarBase: function calculateBarBase(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = 0;\n\n            if (n.options.stacked) {\n              for (var r = a.chart, l = r.data.datasets, s = Number(l[t].data[e]), d = 0; t > d; d++) {\n                var u = l[d],\n                    c = r.getDatasetMeta(d);\n\n                if (c.bar && c.yAxisID === n.id && r.isDatasetVisible(d)) {\n                  var h = Number(u.data[e]);\n                  o += 0 > s ? Math.min(h, 0) : Math.max(h, 0);\n                }\n              }\n\n              return n.getPixelForValue(o);\n            }\n\n            return n.getBasePixel();\n          },\n          getRuler: function getRuler(t) {\n            var e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = a.getBarCount();\n            e = \"category\" === n.options.type ? n.getPixelForTick(t + 1) - n.getPixelForTick(t) : n.width / n.ticks.length;\n            var r = e * n.options.categoryPercentage,\n                l = (e - e * n.options.categoryPercentage) / 2,\n                s = r / o;\n\n            if (n.ticks.length !== a.chart.data.labels.length) {\n              var d = n.ticks.length / a.chart.data.labels.length;\n              s *= d;\n            }\n\n            var u = s * n.options.barPercentage,\n                c = s - s * n.options.barPercentage;\n            return {\n              datasetCount: o,\n              tickWidth: e,\n              categoryWidth: r,\n              categorySpacing: l,\n              fullBarWidth: s,\n              barWidth: u,\n              barSpacing: c\n            };\n          },\n          calculateBarWidth: function calculateBarWidth(t) {\n            var e = this.getScaleForId(this.getMeta().xAxisID);\n            return e.options.barThickness ? e.options.barThickness : e.options.stacked ? t.categoryWidth : t.barWidth;\n          },\n          getBarIndex: function getBarIndex(t) {\n            var e,\n                a,\n                i = 0;\n\n            for (a = 0; t > a; ++a) {\n              e = this.chart.getDatasetMeta(a), e.bar && this.chart.isDatasetVisible(a) && ++i;\n            }\n\n            return i;\n          },\n          calculateBarX: function calculateBarX(t, e, a) {\n            var i = this,\n                n = i.getMeta(),\n                o = i.getScaleForId(n.xAxisID),\n                r = i.getBarIndex(e),\n                l = o.getPixelForValue(null, t, e, i.chart.isCombo);\n            return l -= i.chart.isCombo ? a.tickWidth / 2 : 0, o.options.stacked ? l + a.categoryWidth / 2 + a.categorySpacing : l + a.barWidth / 2 + a.categorySpacing + a.barWidth * r + a.barSpacing / 2 + a.barSpacing * r;\n          },\n          calculateBarY: function calculateBarY(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = Number(a.getDataset().data[t]);\n\n            if (n.options.stacked) {\n              for (var r = 0, l = 0, s = 0; e > s; s++) {\n                var d = a.chart.data.datasets[s],\n                    u = a.chart.getDatasetMeta(s);\n\n                if (u.bar && u.yAxisID === n.id && a.chart.isDatasetVisible(s)) {\n                  var c = Number(d.data[t]);\n                  0 > c ? l += c || 0 : r += c || 0;\n                }\n              }\n\n              return 0 > o ? n.getPixelForValue(l + o) : n.getPixelForValue(r + o);\n            }\n\n            return n.getPixelForValue(o);\n          },\n          draw: function draw(t) {\n            var e,\n                a,\n                i = this,\n                n = t || 1,\n                o = i.getMeta().data,\n                r = i.getDataset();\n\n            for (e = 0, a = o.length; a > e; ++e) {\n              var l = r.data[e];\n              null === l || void 0 === l || isNaN(l) || o[e].transition(n).draw();\n            }\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model;\n            o.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : e.getValueAtIndexOrDefault(a.hoverBackgroundColor, i, e.getHoverColor(o.backgroundColor)), o.borderColor = n.hoverBorderColor ? n.hoverBorderColor : e.getValueAtIndexOrDefault(a.hoverBorderColor, i, e.getHoverColor(o.borderColor)), o.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : e.getValueAtIndexOrDefault(a.hoverBorderWidth, i, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model,\n                r = this.chart.options.elements.rectangle;\n            o.backgroundColor = n.backgroundColor ? n.backgroundColor : e.getValueAtIndexOrDefault(a.backgroundColor, i, r.backgroundColor), o.borderColor = n.borderColor ? n.borderColor : e.getValueAtIndexOrDefault(a.borderColor, i, r.borderColor), o.borderWidth = n.borderWidth ? n.borderWidth : e.getValueAtIndexOrDefault(a.borderWidth, i, r.borderWidth);\n          }\n        }), t.defaults.horizontalBar = {\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\"\n            }],\n            yAxes: [{\n              position: \"left\",\n              type: \"category\",\n              categoryPercentage: 0.8,\n              barPercentage: 0.9,\n              gridLines: {\n                offsetGridLines: !0\n              }\n            }]\n          },\n          elements: {\n            rectangle: {\n              borderSkipped: \"left\"\n            }\n          },\n          tooltips: {\n            callbacks: {\n              title: function title(t, e) {\n                var a = \"\";\n                return t.length > 0 && (t[0].yLabel ? a = t[0].yLabel : e.labels.length > 0 && t[0].index < e.labels.length && (a = e.labels[t[0].index])), a;\n              },\n              label: function label(t, e) {\n                var a = e.datasets[t.datasetIndex].label || \"\";\n                return a + \": \" + t.xLabel;\n              }\n            }\n          }\n        }, t.controllers.horizontalBar = t.controllers.bar.extend({\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.getMeta(),\n                r = n.getScaleForId(o.xAxisID),\n                l = n.getScaleForId(o.yAxisID),\n                s = r.getBasePixel(),\n                d = t.custom || {},\n                u = n.getDataset(),\n                c = n.chart.options.elements.rectangle;\n            t._xScale = r, t._yScale = l, t._datasetIndex = n.index, t._index = a;\n            var h = n.getRuler(a);\n            t._model = {\n              x: i ? s : n.calculateBarX(a, n.index),\n              y: n.calculateBarY(a, n.index, h),\n              label: n.chart.data.labels[a],\n              datasetLabel: u.label,\n              base: i ? s : n.calculateBarBase(n.index, a),\n              height: n.calculateBarHeight(h),\n              backgroundColor: d.backgroundColor ? d.backgroundColor : e.getValueAtIndexOrDefault(u.backgroundColor, a, c.backgroundColor),\n              borderSkipped: d.borderSkipped ? d.borderSkipped : c.borderSkipped,\n              borderColor: d.borderColor ? d.borderColor : e.getValueAtIndexOrDefault(u.borderColor, a, c.borderColor),\n              borderWidth: d.borderWidth ? d.borderWidth : e.getValueAtIndexOrDefault(u.borderWidth, a, c.borderWidth)\n            }, t.draw = function () {\n              function t(t) {\n                return s[(u + t) % 4];\n              }\n\n              var e = this._chart.ctx,\n                  a = this._view,\n                  i = a.height / 2,\n                  n = a.y - i,\n                  o = a.y + i,\n                  r = a.base - (a.base - a.x),\n                  l = a.borderWidth / 2;\n              a.borderWidth && (n += l, o -= l, r += l), e.beginPath(), e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth;\n              var s = [[a.base, o], [a.base, n], [r, n], [r, o]],\n                  d = [\"bottom\", \"left\", \"top\", \"right\"],\n                  u = d.indexOf(a.borderSkipped, 0);\n              -1 === u && (u = 0), e.moveTo.apply(e, t(0));\n\n              for (var c = 1; 4 > c; c++) {\n                e.lineTo.apply(e, t(c));\n              }\n\n              e.fill(), a.borderWidth && e.stroke();\n            }, t.pivot();\n          },\n          calculateBarBase: function calculateBarBase(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = 0;\n\n            if (n.options.stacked) {\n              for (var r = a.chart, l = r.data.datasets, s = Number(l[t].data[e]), d = 0; t > d; d++) {\n                var u = l[d],\n                    c = r.getDatasetMeta(d);\n\n                if (c.bar && c.xAxisID === n.id && r.isDatasetVisible(d)) {\n                  var h = Number(u.data[e]);\n                  o += 0 > s ? Math.min(h, 0) : Math.max(h, 0);\n                }\n              }\n\n              return n.getPixelForValue(o);\n            }\n\n            return n.getBasePixel();\n          },\n          getRuler: function getRuler(t) {\n            var e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = a.getBarCount();\n            e = \"category\" === n.options.type ? n.getPixelForTick(t + 1) - n.getPixelForTick(t) : n.width / n.ticks.length;\n            var r = e * n.options.categoryPercentage,\n                l = (e - e * n.options.categoryPercentage) / 2,\n                s = r / o;\n\n            if (n.ticks.length !== a.chart.data.labels.length) {\n              var d = n.ticks.length / a.chart.data.labels.length;\n              s *= d;\n            }\n\n            var u = s * n.options.barPercentage,\n                c = s - s * n.options.barPercentage;\n            return {\n              datasetCount: o,\n              tickHeight: e,\n              categoryHeight: r,\n              categorySpacing: l,\n              fullBarHeight: s,\n              barHeight: u,\n              barSpacing: c\n            };\n          },\n          calculateBarHeight: function calculateBarHeight(t) {\n            var e = this,\n                a = e.getScaleForId(e.getMeta().yAxisID);\n            return a.options.barThickness ? a.options.barThickness : a.options.stacked ? t.categoryHeight : t.barHeight;\n          },\n          calculateBarX: function calculateBarX(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = Number(a.getDataset().data[t]);\n\n            if (n.options.stacked) {\n              for (var r = 0, l = 0, s = 0; e > s; s++) {\n                var d = a.chart.data.datasets[s],\n                    u = a.chart.getDatasetMeta(s);\n\n                if (u.bar && u.xAxisID === n.id && a.chart.isDatasetVisible(s)) {\n                  var c = Number(d.data[t]);\n                  0 > c ? l += c || 0 : r += c || 0;\n                }\n              }\n\n              return 0 > o ? n.getPixelForValue(l + o) : n.getPixelForValue(r + o);\n            }\n\n            return n.getPixelForValue(o);\n          },\n          calculateBarY: function calculateBarY(t, e, a) {\n            var i = this,\n                n = i.getMeta(),\n                o = i.getScaleForId(n.yAxisID),\n                r = i.getBarIndex(e),\n                l = o.getPixelForValue(null, t, e, i.chart.isCombo);\n            return l -= i.chart.isCombo ? a.tickHeight / 2 : 0, o.options.stacked ? l + a.categoryHeight / 2 + a.categorySpacing : l + a.barHeight / 2 + a.categorySpacing + a.barHeight * r + a.barSpacing / 2 + a.barSpacing * r;\n          }\n        });\n      };\n    }, {}],\n    16: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.bubble = {\n          hover: {\n            mode: \"single\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\",\n              id: \"x-axis-0\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              position: \"left\",\n              id: \"y-axis-0\"\n            }]\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, e) {\n                var a = e.datasets[t.datasetIndex].label || \"\",\n                    i = e.datasets[t.datasetIndex].data[t.index];\n                return a + \": (\" + t.xLabel + \", \" + t.yLabel + \", \" + i.r + \")\";\n              }\n            }\n          }\n        }, t.controllers.bubble = t.DatasetController.extend({\n          dataElementType: t.elements.Point,\n          update: function update(t) {\n            var a = this,\n                i = a.getMeta(),\n                n = i.data;\n            e.each(n, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(a, i, n) {\n            var o = this,\n                r = o.getMeta(),\n                l = o.getScaleForId(r.xAxisID),\n                s = o.getScaleForId(r.yAxisID),\n                d = a.custom || {},\n                u = o.getDataset(),\n                c = u.data[i],\n                h = o.chart.options.elements.point,\n                f = o.index;\n            e.extend(a, {\n              _xScale: l,\n              _yScale: s,\n              _datasetIndex: f,\n              _index: i,\n              _model: {\n                x: n ? l.getPixelForDecimal(0.5) : l.getPixelForValue(\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(c) ? c : NaN, i, f, o.chart.isCombo),\n                y: n ? s.getBasePixel() : s.getPixelForValue(c, i, f),\n                radius: n ? 0 : d.radius ? d.radius : o.getRadius(c),\n                hitRadius: d.hitRadius ? d.hitRadius : e.getValueAtIndexOrDefault(u.hitRadius, i, h.hitRadius)\n              }\n            }), t.DatasetController.prototype.removeHoverStyle.call(o, a, h);\n            var g = a._model;\n            g.skip = d.skip ? d.skip : isNaN(g.x) || isNaN(g.y), a.pivot();\n          },\n          getRadius: function getRadius(t) {\n            return t.r || this.chart.options.elements.point.radius;\n          },\n          setHoverStyle: function setHoverStyle(a) {\n            var i = this;\n            t.DatasetController.prototype.setHoverStyle.call(i, a);\n            var n = i.chart.data.datasets[a._datasetIndex],\n                o = a._index,\n                r = a.custom || {},\n                l = a._model;\n            l.radius = r.hoverRadius ? r.hoverRadius : e.getValueAtIndexOrDefault(n.hoverRadius, o, i.chart.options.elements.point.hoverRadius) + i.getRadius(n.data[o]);\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            var a = this;\n            t.DatasetController.prototype.removeHoverStyle.call(a, e, a.chart.options.elements.point);\n            var i = a.chart.data.datasets[e._datasetIndex].data[e._index],\n                n = e.custom || {},\n                o = e._model;\n            o.radius = n.radius ? n.radius : a.getRadius(i);\n          }\n        });\n      };\n    }, {}],\n    17: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults;\n        a.doughnut = {\n          animation: {\n            animateRotate: !0,\n            animateScale: !1\n          },\n          aspectRatio: 1,\n          hover: {\n            mode: \"single\"\n          },\n          legendCallback: function legendCallback(t) {\n            var e = [];\n            e.push('<ul className=\"' + t.id + '-legend\">');\n            var a = t.data,\n                i = a.datasets,\n                n = a.labels;\n            if (i.length) for (var o = 0; o < i[0].data.length; ++o) {\n              e.push('<li><span style=\"background-color:' + i[0].backgroundColor[o] + '\"></span>'), n[o] && e.push(n[o]), e.push(\"</li>\");\n            }\n            return e.push(\"</ul>\"), e.join(\"\");\n          },\n          legend: {\n            labels: {\n              generateLabels: function generateLabels(t) {\n                var a = t.data;\n                return a.labels.length && a.datasets.length ? a.labels.map(function (i, n) {\n                  var o = t.getDatasetMeta(0),\n                      r = a.datasets[0],\n                      l = o.data[n],\n                      s = l && l.custom || {},\n                      d = e.getValueAtIndexOrDefault,\n                      u = t.options.elements.arc,\n                      c = s.backgroundColor ? s.backgroundColor : d(r.backgroundColor, n, u.backgroundColor),\n                      h = s.borderColor ? s.borderColor : d(r.borderColor, n, u.borderColor),\n                      f = s.borderWidth ? s.borderWidth : d(r.borderWidth, n, u.borderWidth);\n                  return {\n                    text: i,\n                    fillStyle: c,\n                    strokeStyle: h,\n                    lineWidth: f,\n                    hidden: isNaN(r.data[n]) || o.data[n].hidden,\n                    index: n\n                  };\n                }) : [];\n              }\n            },\n            onClick: function onClick(t, e) {\n              var a,\n                  i,\n                  n,\n                  o = e.index,\n                  r = this.chart;\n\n              for (a = 0, i = (r.data.datasets || []).length; i > a; ++a) {\n                n = r.getDatasetMeta(a), n.data[o] && (n.data[o].hidden = !n.data[o].hidden);\n              }\n\n              r.update();\n            }\n          },\n          cutoutPercentage: 50,\n          rotation: Math.PI * -0.5,\n          circumference: 2 * Math.PI,\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, a) {\n                var i = a.labels[t.index],\n                    n = \": \" + a.datasets[t.datasetIndex].data[t.index];\n                return e.isArray(i) ? (i = i.slice(), i[0] += n) : i += n, i;\n              }\n            }\n          }\n        }, a.pie = e.clone(a.doughnut), e.extend(a.pie, {\n          cutoutPercentage: 0\n        }), t.controllers.doughnut = t.controllers.pie = t.DatasetController.extend({\n          dataElementType: t.elements.Arc,\n          linkScales: e.noop,\n          getRingIndex: function getRingIndex(t) {\n            for (var e = 0, a = 0; t > a; ++a) {\n              this.chart.isDatasetVisible(a) && ++e;\n            }\n\n            return e;\n          },\n          update: function update(t) {\n            var a = this,\n                i = a.chart,\n                n = i.chartArea,\n                o = i.options,\n                r = o.elements.arc,\n                l = n.right - n.left - r.borderWidth,\n                s = n.bottom - n.top - r.borderWidth,\n                d = Math.min(l, s),\n                u = {\n              x: 0,\n              y: 0\n            },\n                c = a.getMeta(),\n                h = o.cutoutPercentage,\n                f = o.circumference;\n\n            if (f < 2 * Math.PI) {\n              var g = o.rotation % (2 * Math.PI);\n              g += 2 * Math.PI * (g >= Math.PI ? -1 : g < -Math.PI ? 1 : 0);\n              var p = g + f,\n                  m = {\n                x: Math.cos(g),\n                y: Math.sin(g)\n              },\n                  b = {\n                x: Math.cos(p),\n                y: Math.sin(p)\n              },\n                  v = 0 >= g && p >= 0 || g <= 2 * Math.PI && 2 * Math.PI <= p,\n                  x = g <= 0.5 * Math.PI && 0.5 * Math.PI <= p || g <= 2.5 * Math.PI && 2.5 * Math.PI <= p,\n                  y = g <= -Math.PI && -Math.PI <= p || g <= Math.PI && Math.PI <= p,\n                  k = g <= 0.5 * -Math.PI && 0.5 * -Math.PI <= p || g <= 1.5 * Math.PI && 1.5 * Math.PI <= p,\n                  S = h / 100,\n                  w = {\n                x: y ? -1 : Math.min(m.x * (m.x < 0 ? 1 : S), b.x * (b.x < 0 ? 1 : S)),\n                y: k ? -1 : Math.min(m.y * (m.y < 0 ? 1 : S), b.y * (b.y < 0 ? 1 : S))\n              },\n                  M = {\n                x: v ? 1 : Math.max(m.x * (m.x > 0 ? 1 : S), b.x * (b.x > 0 ? 1 : S)),\n                y: x ? 1 : Math.max(m.y * (m.y > 0 ? 1 : S), b.y * (b.y > 0 ? 1 : S))\n              },\n                  C = {\n                width: 0.5 * (M.x - w.x),\n                height: 0.5 * (M.y - w.y)\n              };\n              d = Math.min(l / C.width, s / C.height), u = {\n                x: (M.x + w.x) * -0.5,\n                y: (M.y + w.y) * -0.5\n              };\n            }\n\n            i.borderWidth = a.getMaxBorderWidth(c.data), i.outerRadius = Math.max((d - i.borderWidth) / 2, 0), i.innerRadius = Math.max(h ? i.outerRadius / 100 * h : 1, 0), i.radiusLength = (i.outerRadius - i.innerRadius) / i.getVisibleDatasetCount(), i.offsetX = u.x * i.outerRadius, i.offsetY = u.y * i.outerRadius, c.total = a.calculateTotal(), a.outerRadius = i.outerRadius - i.radiusLength * a.getRingIndex(a.index), a.innerRadius = a.outerRadius - i.radiusLength, e.each(c.data, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.chart,\n                r = o.chartArea,\n                l = o.options,\n                s = l.animation,\n                d = (r.left + r.right) / 2,\n                u = (r.top + r.bottom) / 2,\n                c = l.rotation,\n                h = l.rotation,\n                f = n.getDataset(),\n                g = i && s.animateRotate ? 0 : t.hidden ? 0 : n.calculateCircumference(f.data[a]) * (l.circumference / (2 * Math.PI)),\n                p = i && s.animateScale ? 0 : n.innerRadius,\n                m = i && s.animateScale ? 0 : n.outerRadius,\n                b = e.getValueAtIndexOrDefault;\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _model: {\n                x: d + o.offsetX,\n                y: u + o.offsetY,\n                startAngle: c,\n                endAngle: h,\n                circumference: g,\n                outerRadius: m,\n                innerRadius: p,\n                label: b(f.label, a, o.data.labels[a])\n              }\n            });\n            var v = t._model;\n            this.removeHoverStyle(t), i && s.animateRotate || (0 === a ? v.startAngle = l.rotation : v.startAngle = n.getMeta().data[a - 1]._model.endAngle, v.endAngle = v.startAngle + v.circumference), t.pivot();\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);\n          },\n          calculateTotal: function calculateTotal() {\n            var t,\n                a = this.getDataset(),\n                i = this.getMeta(),\n                n = 0;\n            return e.each(i.data, function (e, i) {\n              t = a.data[i], isNaN(t) || e.hidden || (n += Math.abs(t));\n            }), n;\n          },\n          calculateCircumference: function calculateCircumference(t) {\n            var e = this.getMeta().total;\n            return e > 0 && !isNaN(t) ? 2 * Math.PI * (t / e) : 0;\n          },\n          getMaxBorderWidth: function getMaxBorderWidth(t) {\n            for (var e, a, i = 0, n = this.index, o = t.length, r = 0; o > r; r++) {\n              e = t[r]._model ? t[r]._model.borderWidth : 0, a = t[r]._chart ? t[r]._chart.config.data.datasets[n].hoverBorderWidth : 0, i = e > i ? e : i, i = a > i ? a : i;\n            }\n\n            return i;\n          }\n        });\n      };\n    }, {}],\n    18: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return a.getValueOrDefault(t.showLine, e.showLines);\n        }\n\n        var a = t.helpers;\n        t.defaults.line = {\n          showLines: !0,\n          spanGaps: !1,\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"category\",\n              id: \"x-axis-0\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              id: \"y-axis-0\"\n            }]\n          }\n        }, t.controllers.line = t.DatasetController.extend({\n          datasetElementType: t.elements.Line,\n          dataElementType: t.elements.Point,\n          update: function update(t) {\n            var i,\n                n,\n                o,\n                r = this,\n                l = r.getMeta(),\n                s = l.dataset,\n                d = l.data || [],\n                u = r.chart.options,\n                c = u.elements.line,\n                h = r.getScaleForId(l.yAxisID),\n                f = r.getDataset(),\n                g = e(f, u);\n\n            for (g && (o = s.custom || {}, void 0 !== f.tension && void 0 === f.lineTension && (f.lineTension = f.tension), s._scale = h, s._datasetIndex = r.index, s._children = d, s._model = {\n              spanGaps: f.spanGaps ? f.spanGaps : u.spanGaps,\n              tension: o.tension ? o.tension : a.getValueOrDefault(f.lineTension, c.tension),\n              backgroundColor: o.backgroundColor ? o.backgroundColor : f.backgroundColor || c.backgroundColor,\n              borderWidth: o.borderWidth ? o.borderWidth : f.borderWidth || c.borderWidth,\n              borderColor: o.borderColor ? o.borderColor : f.borderColor || c.borderColor,\n              borderCapStyle: o.borderCapStyle ? o.borderCapStyle : f.borderCapStyle || c.borderCapStyle,\n              borderDash: o.borderDash ? o.borderDash : f.borderDash || c.borderDash,\n              borderDashOffset: o.borderDashOffset ? o.borderDashOffset : f.borderDashOffset || c.borderDashOffset,\n              borderJoinStyle: o.borderJoinStyle ? o.borderJoinStyle : f.borderJoinStyle || c.borderJoinStyle,\n              fill: o.fill ? o.fill : void 0 !== f.fill ? f.fill : c.fill,\n              steppedLine: o.steppedLine ? o.steppedLine : a.getValueOrDefault(f.steppedLine, c.stepped),\n              cubicInterpolationMode: o.cubicInterpolationMode ? o.cubicInterpolationMode : a.getValueOrDefault(f.cubicInterpolationMode, c.cubicInterpolationMode),\n              scaleTop: h.top,\n              scaleBottom: h.bottom,\n              scaleZero: h.getBasePixel()\n            }, s.pivot()), i = 0, n = d.length; n > i; ++i) {\n              r.updateElement(d[i], i, t);\n            }\n\n            for (g && 0 !== s._model.tension && r.updateBezierControlPoints(), i = 0, n = d.length; n > i; ++i) {\n              d[i].pivot();\n            }\n          },\n          getPointBackgroundColor: function getPointBackgroundColor(t, e) {\n            var i = this.chart.options.elements.point.backgroundColor,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.backgroundColor ? i = o.backgroundColor : n.pointBackgroundColor ? i = a.getValueAtIndexOrDefault(n.pointBackgroundColor, e, i) : n.backgroundColor && (i = n.backgroundColor), i;\n          },\n          getPointBorderColor: function getPointBorderColor(t, e) {\n            var i = this.chart.options.elements.point.borderColor,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.borderColor ? i = o.borderColor : n.pointBorderColor ? i = a.getValueAtIndexOrDefault(n.pointBorderColor, e, i) : n.borderColor && (i = n.borderColor), i;\n          },\n          getPointBorderWidth: function getPointBorderWidth(t, e) {\n            var i = this.chart.options.elements.point.borderWidth,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.borderWidth ? i = o.borderWidth : n.pointBorderWidth ? i = a.getValueAtIndexOrDefault(n.pointBorderWidth, e, i) : n.borderWidth && (i = n.borderWidth), i;\n          },\n          updateElement: function updateElement(t, e, i) {\n            var n,\n                o,\n                r = this,\n                l = r.getMeta(),\n                s = t.custom || {},\n                d = r.getDataset(),\n                u = r.index,\n                c = d.data[e],\n                h = r.getScaleForId(l.yAxisID),\n                f = r.getScaleForId(l.xAxisID),\n                g = r.chart.options.elements.point,\n                p = r.chart.data.labels || [],\n                m = 1 === p.length || 1 === d.data.length || r.chart.isCombo;\n            void 0 !== d.radius && void 0 === d.pointRadius && (d.pointRadius = d.radius), void 0 !== d.hitRadius && void 0 === d.pointHitRadius && (d.pointHitRadius = d.hitRadius), n = f.getPixelForValue(\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(c) ? c : NaN, e, u, m), o = i ? h.getBasePixel() : r.calculatePointY(c, e, u), t._xScale = f, t._yScale = h, t._datasetIndex = u, t._index = e, t._model = {\n              x: n,\n              y: o,\n              skip: s.skip || isNaN(n) || isNaN(o),\n              radius: s.radius || a.getValueAtIndexOrDefault(d.pointRadius, e, g.radius),\n              pointStyle: s.pointStyle || a.getValueAtIndexOrDefault(d.pointStyle, e, g.pointStyle),\n              backgroundColor: r.getPointBackgroundColor(t, e),\n              borderColor: r.getPointBorderColor(t, e),\n              borderWidth: r.getPointBorderWidth(t, e),\n              tension: l.dataset._model ? l.dataset._model.tension : 0,\n              steppedLine: l.dataset._model ? l.dataset._model.steppedLine : !1,\n              hitRadius: s.hitRadius || a.getValueAtIndexOrDefault(d.pointHitRadius, e, g.hitRadius)\n            };\n          },\n          calculatePointY: function calculatePointY(t, e, a) {\n            var i,\n                n,\n                o,\n                r = this,\n                l = r.chart,\n                s = r.getMeta(),\n                d = r.getScaleForId(s.yAxisID),\n                u = 0,\n                c = 0;\n\n            if (d.options.stacked) {\n              for (i = 0; a > i; i++) {\n                if (n = l.data.datasets[i], o = l.getDatasetMeta(i), \"line\" === o.type && o.yAxisID === d.id && l.isDatasetVisible(i)) {\n                  var h = Number(d.getRightValue(n.data[e]));\n                  0 > h ? c += h || 0 : u += h || 0;\n                }\n              }\n\n              var f = Number(d.getRightValue(t));\n              return 0 > f ? d.getPixelForValue(c + f) : d.getPixelForValue(u + f);\n            }\n\n            return d.getPixelForValue(t);\n          },\n          updateBezierControlPoints: function updateBezierControlPoints() {\n            function t(t, e, a) {\n              return Math.max(Math.min(t, a), e);\n            }\n\n            var e,\n                i,\n                n,\n                o,\n                r,\n                l = this,\n                s = l.getMeta(),\n                d = l.chart.chartArea,\n                u = s.data || [];\n            if (s.dataset._model.spanGaps && (u = u.filter(function (t) {\n              return !t._model.skip;\n            })), \"monotone\" === s.dataset._model.cubicInterpolationMode) a.splineCurveMonotone(u);else for (e = 0, i = u.length; i > e; ++e) {\n              n = u[e], o = n._model, r = a.splineCurve(a.previousItem(u, e)._model, o, a.nextItem(u, e)._model, s.dataset._model.tension), o.controlPointPreviousX = r.previous.x, o.controlPointPreviousY = r.previous.y, o.controlPointNextX = r.next.x, o.controlPointNextY = r.next.y;\n            }\n            if (l.chart.options.elements.line.capBezierPoints) for (e = 0, i = u.length; i > e; ++e) {\n              o = u[e]._model, o.controlPointPreviousX = t(o.controlPointPreviousX, d.left, d.right), o.controlPointPreviousY = t(o.controlPointPreviousY, d.top, d.bottom), o.controlPointNextX = t(o.controlPointNextX, d.left, d.right), o.controlPointNextY = t(o.controlPointNextY, d.top, d.bottom);\n            }\n          },\n          draw: function draw(t) {\n            var a,\n                i,\n                n = this,\n                o = n.getMeta(),\n                r = o.data || [],\n                l = t || 1;\n\n            for (a = 0, i = r.length; i > a; ++a) {\n              r[a].transition(l);\n            }\n\n            for (e(n.getDataset(), n.chart.options) && o.dataset.transition(l).draw(), a = 0, i = r.length; i > a; ++a) {\n              r[a].draw();\n            }\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var e = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model;\n            o.radius = n.hoverRadius || a.getValueAtIndexOrDefault(e.pointHoverRadius, i, this.chart.options.elements.point.hoverRadius), o.backgroundColor = n.hoverBackgroundColor || a.getValueAtIndexOrDefault(e.pointHoverBackgroundColor, i, a.getHoverColor(o.backgroundColor)), o.borderColor = n.hoverBorderColor || a.getValueAtIndexOrDefault(e.pointHoverBorderColor, i, a.getHoverColor(o.borderColor)), o.borderWidth = n.hoverBorderWidth || a.getValueAtIndexOrDefault(e.pointHoverBorderWidth, i, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var e = this,\n                i = e.chart.data.datasets[t._datasetIndex],\n                n = t._index,\n                o = t.custom || {},\n                r = t._model;\n            void 0 !== i.radius && void 0 === i.pointRadius && (i.pointRadius = i.radius), r.radius = o.radius || a.getValueAtIndexOrDefault(i.pointRadius, n, e.chart.options.elements.point.radius), r.backgroundColor = e.getPointBackgroundColor(t, n), r.borderColor = e.getPointBorderColor(t, n), r.borderWidth = e.getPointBorderWidth(t, n);\n          }\n        });\n      };\n    }, {}],\n    19: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.polarArea = {\n          scale: {\n            type: \"radialLinear\",\n            lineArc: !0,\n            ticks: {\n              beginAtZero: !0\n            }\n          },\n          animation: {\n            animateRotate: !0,\n            animateScale: !0\n          },\n          startAngle: -0.5 * Math.PI,\n          aspectRatio: 1,\n          legendCallback: function legendCallback(t) {\n            var e = [];\n            e.push('<ul className=\"' + t.id + '-legend\">');\n            var a = t.data,\n                i = a.datasets,\n                n = a.labels;\n            if (i.length) for (var o = 0; o < i[0].data.length; ++o) {\n              e.push('<li><span style=\"background-color:' + i[0].backgroundColor[o] + '\"></span>'), n[o] && e.push(n[o]), e.push(\"</li>\");\n            }\n            return e.push(\"</ul>\"), e.join(\"\");\n          },\n          legend: {\n            labels: {\n              generateLabels: function generateLabels(t) {\n                var a = t.data;\n                return a.labels.length && a.datasets.length ? a.labels.map(function (i, n) {\n                  var o = t.getDatasetMeta(0),\n                      r = a.datasets[0],\n                      l = o.data[n],\n                      s = l.custom || {},\n                      d = e.getValueAtIndexOrDefault,\n                      u = t.options.elements.arc,\n                      c = s.backgroundColor ? s.backgroundColor : d(r.backgroundColor, n, u.backgroundColor),\n                      h = s.borderColor ? s.borderColor : d(r.borderColor, n, u.borderColor),\n                      f = s.borderWidth ? s.borderWidth : d(r.borderWidth, n, u.borderWidth);\n                  return {\n                    text: i,\n                    fillStyle: c,\n                    strokeStyle: h,\n                    lineWidth: f,\n                    hidden: isNaN(r.data[n]) || o.data[n].hidden,\n                    index: n\n                  };\n                }) : [];\n              }\n            },\n            onClick: function onClick(t, e) {\n              var a,\n                  i,\n                  n,\n                  o = e.index,\n                  r = this.chart;\n\n              for (a = 0, i = (r.data.datasets || []).length; i > a; ++a) {\n                n = r.getDatasetMeta(a), n.data[o].hidden = !n.data[o].hidden;\n              }\n\n              r.update();\n            }\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, e) {\n                return e.labels[t.index] + \": \" + t.yLabel;\n              }\n            }\n          }\n        }, t.controllers.polarArea = t.DatasetController.extend({\n          dataElementType: t.elements.Arc,\n          linkScales: e.noop,\n          update: function update(t) {\n            var a = this,\n                i = a.chart,\n                n = i.chartArea,\n                o = a.getMeta(),\n                r = i.options,\n                l = r.elements.arc,\n                s = Math.min(n.right - n.left, n.bottom - n.top);\n            i.outerRadius = Math.max((s - l.borderWidth / 2) / 2, 0), i.innerRadius = Math.max(r.cutoutPercentage ? i.outerRadius / 100 * r.cutoutPercentage : 1, 0), i.radiusLength = (i.outerRadius - i.innerRadius) / i.getVisibleDatasetCount(), a.outerRadius = i.outerRadius - i.radiusLength * a.index, a.innerRadius = a.outerRadius - i.radiusLength, o.count = a.countVisibleElements(), e.each(o.data, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(t, a, i) {\n            for (var n = this, o = n.chart, r = n.getDataset(), l = o.options, s = l.animation, d = o.scale, u = e.getValueAtIndexOrDefault, c = o.data.labels, h = n.calculateCircumference(r.data[a]), f = d.xCenter, g = d.yCenter, p = 0, m = n.getMeta(), b = 0; a > b; ++b) {\n              isNaN(r.data[b]) || m.data[b].hidden || ++p;\n            }\n\n            var v = l.startAngle,\n                x = t.hidden ? 0 : d.getDistanceFromCenterForValue(r.data[a]),\n                y = v + h * p,\n                k = y + (t.hidden ? 0 : h),\n                S = s.animateScale ? 0 : d.getDistanceFromCenterForValue(r.data[a]);\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _scale: d,\n              _model: {\n                x: f,\n                y: g,\n                innerRadius: 0,\n                outerRadius: i ? S : x,\n                startAngle: i && s.animateRotate ? v : y,\n                endAngle: i && s.animateRotate ? v : k,\n                label: u(c, a, c[a])\n              }\n            }), n.removeHoverStyle(t), t.pivot();\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);\n          },\n          countVisibleElements: function countVisibleElements() {\n            var t = this.getDataset(),\n                a = this.getMeta(),\n                i = 0;\n            return e.each(a.data, function (e, a) {\n              isNaN(t.data[a]) || e.hidden || i++;\n            }), i;\n          },\n          calculateCircumference: function calculateCircumference(t) {\n            var e = this.getMeta().count;\n            return e > 0 && !isNaN(t) ? 2 * Math.PI / e : 0;\n          }\n        });\n      };\n    }, {}],\n    20: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.radar = {\n          aspectRatio: 1,\n          scale: {\n            type: \"radialLinear\"\n          },\n          elements: {\n            line: {\n              tension: 0\n            }\n          }\n        }, t.controllers.radar = t.DatasetController.extend({\n          datasetElementType: t.elements.Line,\n          dataElementType: t.elements.Point,\n          linkScales: e.noop,\n          update: function update(t) {\n            var a = this,\n                i = a.getMeta(),\n                n = i.dataset,\n                o = i.data,\n                r = n.custom || {},\n                l = a.getDataset(),\n                s = a.chart.options.elements.line,\n                d = a.chart.scale;\n            void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), e.extend(i.dataset, {\n              _datasetIndex: a.index,\n              _children: o,\n              _loop: !0,\n              _model: {\n                tension: r.tension ? r.tension : e.getValueOrDefault(l.lineTension, s.tension),\n                backgroundColor: r.backgroundColor ? r.backgroundColor : l.backgroundColor || s.backgroundColor,\n                borderWidth: r.borderWidth ? r.borderWidth : l.borderWidth || s.borderWidth,\n                borderColor: r.borderColor ? r.borderColor : l.borderColor || s.borderColor,\n                fill: r.fill ? r.fill : void 0 !== l.fill ? l.fill : s.fill,\n                borderCapStyle: r.borderCapStyle ? r.borderCapStyle : l.borderCapStyle || s.borderCapStyle,\n                borderDash: r.borderDash ? r.borderDash : l.borderDash || s.borderDash,\n                borderDashOffset: r.borderDashOffset ? r.borderDashOffset : l.borderDashOffset || s.borderDashOffset,\n                borderJoinStyle: r.borderJoinStyle ? r.borderJoinStyle : l.borderJoinStyle || s.borderJoinStyle,\n                scaleTop: d.top,\n                scaleBottom: d.bottom,\n                scaleZero: d.getBasePosition()\n              }\n            }), i.dataset.pivot(), e.each(o, function (e, i) {\n              a.updateElement(e, i, t);\n            }, a), a.updateBezierControlPoints();\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = t.custom || {},\n                r = n.getDataset(),\n                l = n.chart.scale,\n                s = n.chart.options.elements.point,\n                d = l.getPointPositionForValue(a, r.data[a]);\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _scale: l,\n              _model: {\n                x: i ? l.xCenter : d.x,\n                y: i ? l.yCenter : d.y,\n                tension: o.tension ? o.tension : e.getValueOrDefault(r.tension, n.chart.options.elements.line.tension),\n                radius: o.radius ? o.radius : e.getValueAtIndexOrDefault(r.pointRadius, a, s.radius),\n                backgroundColor: o.backgroundColor ? o.backgroundColor : e.getValueAtIndexOrDefault(r.pointBackgroundColor, a, s.backgroundColor),\n                borderColor: o.borderColor ? o.borderColor : e.getValueAtIndexOrDefault(r.pointBorderColor, a, s.borderColor),\n                borderWidth: o.borderWidth ? o.borderWidth : e.getValueAtIndexOrDefault(r.pointBorderWidth, a, s.borderWidth),\n                pointStyle: o.pointStyle ? o.pointStyle : e.getValueAtIndexOrDefault(r.pointStyle, a, s.pointStyle),\n                hitRadius: o.hitRadius ? o.hitRadius : e.getValueAtIndexOrDefault(r.hitRadius, a, s.hitRadius)\n              }\n            }), t._model.skip = o.skip ? o.skip : isNaN(t._model.x) || isNaN(t._model.y);\n          },\n          updateBezierControlPoints: function updateBezierControlPoints() {\n            var t = this.chart.chartArea,\n                a = this.getMeta();\n            e.each(a.data, function (i, n) {\n              var o = i._model,\n                  r = e.splineCurve(e.previousItem(a.data, n, !0)._model, o, e.nextItem(a.data, n, !0)._model, o.tension);\n              o.controlPointPreviousX = Math.max(Math.min(r.previous.x, t.right), t.left), o.controlPointPreviousY = Math.max(Math.min(r.previous.y, t.bottom), t.top), o.controlPointNextX = Math.max(Math.min(r.next.x, t.right), t.left), o.controlPointNextY = Math.max(Math.min(r.next.y, t.bottom), t.top), i.pivot();\n            });\n          },\n          draw: function draw(t) {\n            var a = this.getMeta(),\n                i = t || 1;\n            e.each(a.data, function (t) {\n              t.transition(i);\n            }), a.dataset.transition(i).draw(), e.each(a.data, function (t) {\n              t.draw();\n            });\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t.custom || {},\n                n = t._index,\n                o = t._model;\n            o.radius = i.hoverRadius ? i.hoverRadius : e.getValueAtIndexOrDefault(a.pointHoverRadius, n, this.chart.options.elements.point.hoverRadius), o.backgroundColor = i.hoverBackgroundColor ? i.hoverBackgroundColor : e.getValueAtIndexOrDefault(a.pointHoverBackgroundColor, n, e.getHoverColor(o.backgroundColor)), o.borderColor = i.hoverBorderColor ? i.hoverBorderColor : e.getValueAtIndexOrDefault(a.pointHoverBorderColor, n, e.getHoverColor(o.borderColor)), o.borderWidth = i.hoverBorderWidth ? i.hoverBorderWidth : e.getValueAtIndexOrDefault(a.pointHoverBorderWidth, n, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t.custom || {},\n                n = t._index,\n                o = t._model,\n                r = this.chart.options.elements.point;\n            o.radius = i.radius ? i.radius : e.getValueAtIndexOrDefault(a.radius, n, r.radius), o.backgroundColor = i.backgroundColor ? i.backgroundColor : e.getValueAtIndexOrDefault(a.pointBackgroundColor, n, r.backgroundColor), o.borderColor = i.borderColor ? i.borderColor : e.getValueAtIndexOrDefault(a.pointBorderColor, n, r.borderColor), o.borderWidth = i.borderWidth ? i.borderWidth : e.getValueAtIndexOrDefault(a.pointBorderWidth, n, r.borderWidth);\n          }\n        });\n      };\n    }, {}],\n    21: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.global.animation = {\n          duration: 1e3,\n          easing: \"easeOutQuart\",\n          onProgress: e.noop,\n          onComplete: e.noop\n        }, t.Animation = t.Element.extend({\n          currentStep: null,\n          numSteps: 60,\n          easing: \"\",\n          render: null,\n          onAnimationProgress: null,\n          onAnimationComplete: null\n        }), t.animationService = {\n          frameDuration: 17,\n          animations: [],\n          dropFrames: 0,\n          request: null,\n          addAnimation: function addAnimation(t, e, a, i) {\n            var n = this;\n            i || (t.animating = !0);\n\n            for (var o = 0; o < n.animations.length; ++o) {\n              if (n.animations[o].chartInstance === t) return void (n.animations[o].animationObject = e);\n            }\n\n            n.animations.push({\n              chartInstance: t,\n              animationObject: e\n            }), 1 === n.animations.length && n.requestAnimationFrame();\n          },\n          cancelAnimation: function cancelAnimation(t) {\n            var a = e.findIndex(this.animations, function (e) {\n              return e.chartInstance === t;\n            });\n            -1 !== a && (this.animations.splice(a, 1), t.animating = !1);\n          },\n          requestAnimationFrame: function requestAnimationFrame() {\n            var t = this;\n            null === t.request && (t.request = e.requestAnimFrame.call(window, function () {\n              t.request = null, t.startDigest();\n            }));\n          },\n          startDigest: function startDigest() {\n            var t = this,\n                e = Date.now(),\n                a = 0;\n            t.dropFrames > 1 && (a = Math.floor(t.dropFrames), t.dropFrames = t.dropFrames % 1);\n\n            for (var i = 0; i < t.animations.length;) {\n              null === t.animations[i].animationObject.currentStep && (t.animations[i].animationObject.currentStep = 0), t.animations[i].animationObject.currentStep += 1 + a, t.animations[i].animationObject.currentStep > t.animations[i].animationObject.numSteps && (t.animations[i].animationObject.currentStep = t.animations[i].animationObject.numSteps), t.animations[i].animationObject.render(t.animations[i].chartInstance, t.animations[i].animationObject), t.animations[i].animationObject.onAnimationProgress && t.animations[i].animationObject.onAnimationProgress.call && t.animations[i].animationObject.onAnimationProgress.call(t.animations[i].chartInstance, t.animations[i]), t.animations[i].animationObject.currentStep === t.animations[i].animationObject.numSteps ? (t.animations[i].animationObject.onAnimationComplete && t.animations[i].animationObject.onAnimationComplete.call && t.animations[i].animationObject.onAnimationComplete.call(t.animations[i].chartInstance, t.animations[i]), t.animations[i].chartInstance.animating = !1, t.animations.splice(i, 1)) : ++i;\n            }\n\n            var n = Date.now(),\n                o = (n - e) / t.frameDuration;\n            t.dropFrames += o, t.animations.length > 0 && t.requestAnimationFrame();\n          }\n        };\n      };\n    }, {}],\n    22: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.canvasHelpers = {};\n\n        e.drawPoint = function (t, e, a, i, n) {\n          var o, r, l, s, d, u;\n          if (\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e) && (o = e.toString(), \"[object HTMLImageElement]\" === o || \"[object HTMLCanvasElement]\" === o)) return void t.drawImage(e, i - e.width / 2, n - e.height / 2);\n\n          if (!(isNaN(a) || 0 >= a)) {\n            switch (e) {\n              default:\n                t.beginPath(), t.arc(i, n, a, 0, 2 * Math.PI), t.closePath(), t.fill();\n                break;\n\n              case \"triangle\":\n                t.beginPath(), r = 3 * a / Math.sqrt(3), d = r * Math.sqrt(3) / 2, t.moveTo(i - r / 2, n + d / 3), t.lineTo(i + r / 2, n + d / 3), t.lineTo(i, n - 2 * d / 3), t.closePath(), t.fill();\n                break;\n\n              case \"rect\":\n                u = 1 / Math.SQRT2 * a, t.beginPath(), t.fillRect(i - u, n - u, 2 * u, 2 * u), t.strokeRect(i - u, n - u, 2 * u, 2 * u);\n                break;\n\n              case \"rectRot\":\n                u = 1 / Math.SQRT2 * a, t.beginPath(), t.moveTo(i - u, n), t.lineTo(i, n + u), t.lineTo(i + u, n), t.lineTo(i, n - u), t.closePath(), t.fill();\n                break;\n\n              case \"cross\":\n                t.beginPath(), t.moveTo(i, n + a), t.lineTo(i, n - a), t.moveTo(i - a, n), t.lineTo(i + a, n), t.closePath();\n                break;\n\n              case \"crossRot\":\n                t.beginPath(), l = Math.cos(Math.PI / 4) * a, s = Math.sin(Math.PI / 4) * a, t.moveTo(i - l, n - s), t.lineTo(i + l, n + s), t.moveTo(i - l, n + s), t.lineTo(i + l, n - s), t.closePath();\n                break;\n\n              case \"star\":\n                t.beginPath(), t.moveTo(i, n + a), t.lineTo(i, n - a), t.moveTo(i - a, n), t.lineTo(i + a, n), l = Math.cos(Math.PI / 4) * a, s = Math.sin(Math.PI / 4) * a, t.moveTo(i - l, n - s), t.lineTo(i + l, n + s), t.moveTo(i - l, n + s), t.lineTo(i + l, n - s), t.closePath();\n                break;\n\n              case \"line\":\n                t.beginPath(), t.moveTo(i - a, n), t.lineTo(i + a, n), t.closePath();\n                break;\n\n              case \"dash\":\n                t.beginPath(), t.moveTo(i, n), t.lineTo(i + a, n), t.closePath();\n            }\n\n            t.stroke();\n          }\n        };\n      };\n    }, {}],\n    23: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a = r.getStyle(t, e),\n              i = a && a.match(/(\\d+)px/);\n          return i ? Number(i[1]) : void 0;\n        }\n\n        function a(t, a) {\n          var i = t.style,\n              n = t.getAttribute(\"height\"),\n              o = t.getAttribute(\"width\");\n\n          if (t._chartjs = {\n            initial: {\n              height: n,\n              width: o,\n              style: {\n                display: i.display,\n                height: i.height,\n                width: i.width\n              }\n            }\n          }, i.display = i.display || \"block\", null === o || \"\" === o) {\n            var r = e(t, \"width\");\n            void 0 !== r && (t.width = r);\n          }\n\n          if (null === n || \"\" === n) if (\"\" === t.style.height) t.height = t.width / (a.options.aspectRatio || 2);else {\n            var l = e(t, \"height\");\n            void 0 !== r && (t.height = l);\n          }\n          return t;\n        }\n\n        function i(t) {\n          if (t._chartjs) {\n            var e = t._chartjs.initial;\n            [\"height\", \"width\"].forEach(function (a) {\n              var i = e[a];\n              void 0 === i || null === i ? t.removeAttribute(a) : t.setAttribute(a, i);\n            }), r.each(e.style || {}, function (e, a) {\n              t.style[a] = e;\n            }), t.width = t.width, delete t._chartjs;\n          }\n        }\n\n        function n(t, e) {\n          if (\"string\" == typeof t ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t instanceof HTMLCanvasElement) {\n            var i = t.getContext && t.getContext(\"2d\");\n            if (i instanceof CanvasRenderingContext2D) return a(t, e), i;\n          }\n\n          return null;\n        }\n\n        function o(e) {\n          e = e || {};\n          var a = e.data = e.data || {};\n          return a.datasets = a.datasets || [], a.labels = a.labels || [], e.options = r.configMerge(t.defaults.global, t.defaults[e.type], e.options || {}), e;\n        }\n\n        var r = t.helpers;\n        t.types = {}, t.instances = {}, t.controllers = {}, t.Controller = function (e, a, i) {\n          var l = this;\n          a = o(a);\n          var s = n(e, a),\n              d = s && s.canvas,\n              u = d && d.height,\n              c = d && d.width;\n          return i.ctx = s, i.canvas = d, i.config = a, i.width = c, i.height = u, i.aspectRatio = u ? c / u : null, l.id = r.uid(), l.chart = i, l.config = a, l.options = a.options, l._bufferedRender = !1, t.instances[l.id] = l, Object.defineProperty(l, \"data\", {\n            get: function get() {\n              return l.config.data;\n            }\n          }), s && d ? (r.retinaScale(i), l.options.responsive && (r.addResizeListener(d.parentNode, function () {\n            l.resize();\n          }), l.resize(!0)), l.initialize(), l) : (console.error(\"Failed to create chart: can't acquire context from the given item\"), l);\n        }, r.extend(t.Controller.prototype, {\n          initialize: function initialize() {\n            var e = this;\n            return t.plugins.notify(\"beforeInit\", [e]), e.bindEvents(), e.ensureScalesHaveIDs(), e.buildOrUpdateControllers(), e.buildScales(), e.updateLayout(), e.resetElements(), e.initToolTip(), e.update(), t.plugins.notify(\"afterInit\", [e]), e;\n          },\n          clear: function clear() {\n            return r.clear(this.chart), this;\n          },\n          stop: function stop() {\n            return t.animationService.cancelAnimation(this), this;\n          },\n          resize: function resize(e) {\n            var a = this,\n                i = a.chart,\n                n = a.options,\n                o = i.canvas,\n                l = n.maintainAspectRatio && i.aspectRatio || null,\n                s = Math.floor(r.getMaximumWidth(o)),\n                d = Math.floor(l ? s / l : r.getMaximumHeight(o));\n\n            if (i.width !== s || i.height !== d) {\n              o.width = i.width = s, o.height = i.height = d, o.style.width = s + \"px\", o.style.height = d + \"px\", r.retinaScale(i);\n              var u = {\n                width: s,\n                height: d\n              };\n              t.plugins.notify(\"resize\", [a, u]), a.options.onResize && a.options.onResize(a, u), e || (a.stop(), a.update(a.options.responsiveAnimationDuration));\n            }\n          },\n          ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n            var t = this.options,\n                e = t.scales || {},\n                a = t.scale;\n            r.each(e.xAxes, function (t, e) {\n              t.id = t.id || \"x-axis-\" + e;\n            }), r.each(e.yAxes, function (t, e) {\n              t.id = t.id || \"y-axis-\" + e;\n            }), a && (a.id = a.id || \"scale\");\n          },\n          buildScales: function buildScales() {\n            var e = this,\n                a = e.options,\n                i = e.scales = {},\n                n = [];\n            a.scales && (n = n.concat((a.scales.xAxes || []).map(function (t) {\n              return {\n                options: t,\n                dtype: \"category\"\n              };\n            }), (a.scales.yAxes || []).map(function (t) {\n              return {\n                options: t,\n                dtype: \"linear\"\n              };\n            }))), a.scale && n.push({\n              options: a.scale,\n              dtype: \"radialLinear\",\n              isDefault: !0\n            }), r.each(n, function (a) {\n              var n = a.options,\n                  o = r.getValueOrDefault(n.type, a.dtype),\n                  l = t.scaleService.getScaleConstructor(o);\n\n              if (l) {\n                var s = new l({\n                  id: n.id,\n                  options: n,\n                  ctx: e.chart.ctx,\n                  chart: e\n                });\n                i[s.id] = s, a.isDefault && (e.scale = s);\n              }\n            }), t.scaleService.addScalesToLayout(this);\n          },\n          updateLayout: function updateLayout() {\n            t.layoutService.update(this, this.chart.width, this.chart.height);\n          },\n          buildOrUpdateControllers: function buildOrUpdateControllers() {\n            var e = this,\n                a = [],\n                i = [];\n            if (r.each(e.data.datasets, function (n, o) {\n              var r = e.getDatasetMeta(o);\n              r.type || (r.type = n.type || e.config.type), a.push(r.type), r.controller ? r.controller.updateIndex(o) : (r.controller = new t.controllers[r.type](e, o), i.push(r.controller));\n            }, e), a.length > 1) for (var n = 1; n < a.length; n++) {\n              if (a[n] !== a[n - 1]) {\n                e.isCombo = !0;\n                break;\n              }\n            }\n            return i;\n          },\n          resetElements: function resetElements() {\n            var t = this;\n            r.each(t.data.datasets, function (e, a) {\n              t.getDatasetMeta(a).controller.reset();\n            }, t);\n          },\n          reset: function reset() {\n            this.resetElements(), this.tooltip.initialize();\n          },\n          update: function update(e, a) {\n            var i = this;\n            t.plugins.notify(\"beforeUpdate\", [i]), i.tooltip._data = i.data;\n            var n = i.buildOrUpdateControllers();\n            r.each(i.data.datasets, function (t, e) {\n              i.getDatasetMeta(e).controller.buildOrUpdateElements();\n            }, i), t.layoutService.update(i, i.chart.width, i.chart.height), t.plugins.notify(\"afterScaleUpdate\", [i]), r.each(n, function (t) {\n              t.reset();\n            }), i.updateDatasets(), t.plugins.notify(\"afterUpdate\", [i]), i._bufferedRender ? i._bufferedRequest = {\n              lazy: a,\n              duration: e\n            } : i.render(e, a);\n          },\n          updateDatasets: function updateDatasets() {\n            var e,\n                a,\n                i = this;\n\n            if (t.plugins.notify(\"beforeDatasetsUpdate\", [i])) {\n              for (e = 0, a = i.data.datasets.length; a > e; ++e) {\n                i.getDatasetMeta(e).controller.update();\n              }\n\n              t.plugins.notify(\"afterDatasetsUpdate\", [i]);\n            }\n          },\n          render: function render(e, a) {\n            var i = this;\n            t.plugins.notify(\"beforeRender\", [i]);\n            var n = i.options.animation;\n\n            if (n && (\"undefined\" != typeof e && 0 !== e || \"undefined\" == typeof e && 0 !== n.duration)) {\n              var o = new t.Animation();\n              o.numSteps = (e || n.duration) / 16.66, o.easing = n.easing, o.render = function (t, e) {\n                var a = r.easingEffects[e.easing],\n                    i = e.currentStep / e.numSteps,\n                    n = a(i);\n                t.draw(n, i, e.currentStep);\n              }, o.onAnimationProgress = n.onProgress, o.onAnimationComplete = n.onComplete, t.animationService.addAnimation(i, o, e, a);\n            } else i.draw(), n && n.onComplete && n.onComplete.call && n.onComplete.call(i);\n\n            return i;\n          },\n          draw: function draw(e) {\n            var a = this,\n                i = e || 1;\n            a.clear(), t.plugins.notify(\"beforeDraw\", [a, i]), r.each(a.boxes, function (t) {\n              t.draw(a.chartArea);\n            }, a), a.scale && a.scale.draw(), t.plugins.notify(\"beforeDatasetsDraw\", [a, i]), r.each(a.data.datasets, function (t, i) {\n              a.isDatasetVisible(i) && a.getDatasetMeta(i).controller.draw(e);\n            }, a, !0), t.plugins.notify(\"afterDatasetsDraw\", [a, i]), a.tooltip.transition(i).draw(), t.plugins.notify(\"afterDraw\", [a, i]);\n          },\n          getElementAtEvent: function getElementAtEvent(e) {\n            return t.Interaction.modes.single(this, e);\n          },\n          getElementsAtEvent: function getElementsAtEvent(e) {\n            return t.Interaction.modes.label(this, e, {\n              intersect: !0\n            });\n          },\n          getElementsAtXAxis: function getElementsAtXAxis(e) {\n            return t.Interaction.modes[\"x-axis\"](this, e, {\n              intersect: !0\n            });\n          },\n          getElementsAtEventForMode: function getElementsAtEventForMode(e, a, i) {\n            var n = t.Interaction.modes[a];\n            return \"function\" == typeof n ? n(this, e, i) : [];\n          },\n          getDatasetAtEvent: function getDatasetAtEvent(e) {\n            return t.Interaction.modes.dataset(this, e);\n          },\n          getDatasetMeta: function getDatasetMeta(t) {\n            var e = this,\n                a = e.data.datasets[t];\n            a._meta || (a._meta = {});\n            var i = a._meta[e.id];\n            return i || (i = a._meta[e.id] = {\n              type: null,\n              data: [],\n              dataset: null,\n              controller: null,\n              hidden: null,\n              xAxisID: null,\n              yAxisID: null\n            }), i;\n          },\n          getVisibleDatasetCount: function getVisibleDatasetCount() {\n            for (var t = 0, e = 0, a = this.data.datasets.length; a > e; ++e) {\n              this.isDatasetVisible(e) && t++;\n            }\n\n            return t;\n          },\n          isDatasetVisible: function isDatasetVisible(t) {\n            var e = this.getDatasetMeta(t);\n            return \"boolean\" == typeof e.hidden ? !e.hidden : !this.data.datasets[t].hidden;\n          },\n          generateLegend: function generateLegend() {\n            return this.options.legendCallback(this);\n          },\n          destroy: function destroy() {\n            var e,\n                a,\n                n,\n                o = this,\n                l = o.chart.canvas;\n\n            for (o.stop(), a = 0, n = o.data.datasets.length; n > a; ++a) {\n              e = o.getDatasetMeta(a), e.controller && (e.controller.destroy(), e.controller = null);\n            }\n\n            l && (r.unbindEvents(o, o.events), r.removeResizeListener(l.parentNode), r.clear(o.chart), i(l), o.chart.canvas = null, o.chart.ctx = null), t.plugins.notify(\"destroy\", [o]), delete t.instances[o.id];\n          },\n          toBase64Image: function toBase64Image() {\n            return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n          },\n          initToolTip: function initToolTip() {\n            var e = this;\n            e.tooltip = new t.Tooltip({\n              _chart: e.chart,\n              _chartInstance: e,\n              _data: e.data,\n              _options: e.options.tooltips\n            }, e), e.tooltip.initialize();\n          },\n          bindEvents: function bindEvents() {\n            var t = this;\n            r.bindEvents(t, t.options.events, function (e) {\n              t.eventHandler(e);\n            });\n          },\n          updateHoverStyle: function updateHoverStyle(t, e, a) {\n            var i,\n                n,\n                o,\n                r = a ? \"setHoverStyle\" : \"removeHoverStyle\";\n\n            for (n = 0, o = t.length; o > n; ++n) {\n              i = t[n], i && this.getDatasetMeta(i._datasetIndex).controller[r](i);\n            }\n          },\n          eventHandler: function eventHandler(t) {\n            var e = this,\n                a = e.legend,\n                i = e.tooltip,\n                n = e.options.hover;\n            e._bufferedRender = !0, e._bufferedRequest = null;\n            var o = e.handleEvent(t);\n            o |= a && a.handleEvent(t), o |= i && i.handleEvent(t);\n            var r = e._bufferedRequest;\n            return r ? e.render(r.duration, r.lazy) : o && !e.animating && (e.stop(), e.render(n.animationDuration, !0)), e._bufferedRender = !1, e._bufferedRequest = null, e;\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                a = e.options || {},\n                i = a.hover,\n                n = !1;\n            return e.lastActive = e.lastActive || [], \"mouseout\" === t.type ? e.active = [] : e.active = e.getElementsAtEventForMode(t, i.mode, i), i.onHover && i.onHover.call(e, e.active), (\"mouseup\" === t.type || \"click\" === t.type) && a.onClick && a.onClick.call(e, t, e.active), e.lastActive.length && e.updateHoverStyle(e.lastActive, i.mode, !1), e.active.length && i.mode && e.updateHoverStyle(e.active, i.mode, !0), n = !r.arrayEquals(e.active, e.lastActive), e.lastActive = e.active, n;\n          }\n        });\n      };\n    }, {}],\n    24: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return t._chartjs ? void t._chartjs.listeners.push(e) : (Object.defineProperty(t, \"_chartjs\", {\n            configurable: !0,\n            enumerable: !1,\n            value: {\n              listeners: [e]\n            }\n          }), void n.forEach(function (e) {\n            var a = \"onData\" + e.charAt(0).toUpperCase() + e.slice(1),\n                n = t[e];\n            Object.defineProperty(t, e, {\n              configurable: !0,\n              enumerable: !1,\n              value: function value() {\n                var e = Array.prototype.slice.call(arguments),\n                    o = n.apply(this, e);\n                return i.each(t._chartjs.listeners, function (t) {\n                  \"function\" == typeof t[a] && t[a].apply(t, e);\n                }), o;\n              }\n            });\n          }));\n        }\n\n        function a(t, e) {\n          var a = t._chartjs;\n\n          if (a) {\n            var i = a.listeners,\n                o = i.indexOf(e);\n            -1 !== o && i.splice(o, 1), i.length > 0 || (n.forEach(function (e) {\n              delete t[e];\n            }), delete t._chartjs);\n          }\n        }\n\n        var i = t.helpers,\n            n = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n        t.DatasetController = function (t, e) {\n          this.initialize(t, e);\n        }, i.extend(t.DatasetController.prototype, {\n          datasetElementType: null,\n          dataElementType: null,\n          initialize: function initialize(t, e) {\n            var a = this;\n            a.chart = t, a.index = e, a.linkScales(), a.addElements();\n          },\n          updateIndex: function updateIndex(t) {\n            this.index = t;\n          },\n          linkScales: function linkScales() {\n            var t = this,\n                e = t.getMeta(),\n                a = t.getDataset();\n            null === e.xAxisID && (e.xAxisID = a.xAxisID || t.chart.options.scales.xAxes[0].id), null === e.yAxisID && (e.yAxisID = a.yAxisID || t.chart.options.scales.yAxes[0].id);\n          },\n          getDataset: function getDataset() {\n            return this.chart.data.datasets[this.index];\n          },\n          getMeta: function getMeta() {\n            return this.chart.getDatasetMeta(this.index);\n          },\n          getScaleForId: function getScaleForId(t) {\n            return this.chart.scales[t];\n          },\n          reset: function reset() {\n            this.update(!0);\n          },\n          destroy: function destroy() {\n            this._data && a(this._data, this);\n          },\n          createMetaDataset: function createMetaDataset() {\n            var t = this,\n                e = t.datasetElementType;\n            return e && new e({\n              _chart: t.chart.chart,\n              _datasetIndex: t.index\n            });\n          },\n          createMetaData: function createMetaData(t) {\n            var e = this,\n                a = e.dataElementType;\n            return a && new a({\n              _chart: e.chart.chart,\n              _datasetIndex: e.index,\n              _index: t\n            });\n          },\n          addElements: function addElements() {\n            var t,\n                e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getDataset().data || [],\n                o = i.data;\n\n            for (t = 0, e = n.length; e > t; ++t) {\n              o[t] = o[t] || a.createMetaData(t);\n            }\n\n            i.dataset = i.dataset || a.createMetaDataset();\n          },\n          addElementAndReset: function addElementAndReset(t) {\n            var e = this.createMetaData(t);\n            this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0);\n          },\n          buildOrUpdateElements: function buildOrUpdateElements() {\n            var t = this,\n                i = t.getDataset(),\n                n = i.data || (i.data = []);\n            t._data !== n && (t._data && a(t._data, t), e(n, t), t._data = n), t.resyncElements();\n          },\n          update: i.noop,\n          draw: function draw(t) {\n            var e,\n                a,\n                i = t || 1,\n                n = this.getMeta().data;\n\n            for (e = 0, a = n.length; a > e; ++e) {\n              n[e].transition(i).draw();\n            }\n          },\n          removeHoverStyle: function removeHoverStyle(t, e) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                n = t._index,\n                o = t.custom || {},\n                r = i.getValueAtIndexOrDefault,\n                l = t._model;\n            l.backgroundColor = o.backgroundColor ? o.backgroundColor : r(a.backgroundColor, n, e.backgroundColor), l.borderColor = o.borderColor ? o.borderColor : r(a.borderColor, n, e.borderColor), l.borderWidth = o.borderWidth ? o.borderWidth : r(a.borderWidth, n, e.borderWidth);\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var e = this.chart.data.datasets[t._datasetIndex],\n                a = t._index,\n                n = t.custom || {},\n                o = i.getValueAtIndexOrDefault,\n                r = i.getHoverColor,\n                l = t._model;\n            l.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : o(e.hoverBackgroundColor, a, r(l.backgroundColor)), l.borderColor = n.hoverBorderColor ? n.hoverBorderColor : o(e.hoverBorderColor, a, r(l.borderColor)), l.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : o(e.hoverBorderWidth, a, l.borderWidth);\n          },\n          resyncElements: function resyncElements() {\n            var t = this,\n                e = t.getMeta(),\n                a = t.getDataset().data,\n                i = e.data.length,\n                n = a.length;\n            i > n ? e.data.splice(n, i - n) : n > i && t.insertElements(i, n - i);\n          },\n          insertElements: function insertElements(t, e) {\n            for (var a = 0; e > a; ++a) {\n              this.addElementAndReset(t + a);\n            }\n          },\n          onDataPush: function onDataPush() {\n            this.insertElements(this.getDataset().data.length - 1, arguments.length);\n          },\n          onDataPop: function onDataPop() {\n            this.getMeta().data.pop();\n          },\n          onDataShift: function onDataShift() {\n            this.getMeta().data.shift();\n          },\n          onDataSplice: function onDataSplice(t, e) {\n            this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2);\n          },\n          onDataUnshift: function onDataUnshift() {\n            this.insertElements(0, arguments.length);\n          }\n        }), t.DatasetController.extend = i.inherits;\n      };\n    }, {}],\n    25: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.elements = {}, t.Element = function (t) {\n          e.extend(this, t), this.initialize.apply(this, arguments);\n        }, e.extend(t.Element.prototype, {\n          initialize: function initialize() {\n            this.hidden = !1;\n          },\n          pivot: function pivot() {\n            var t = this;\n            return t._view || (t._view = e.clone(t._model)), t._start = e.clone(t._view), t;\n          },\n          transition: function transition(t) {\n            var a = this;\n            return a._view || (a._view = e.clone(a._model)), 1 === t ? (a._view = a._model, a._start = null, a) : (a._start || a.pivot(), e.each(a._model, function (i, n) {\n              if (\"_\" === n[0]) ;else if (a._view.hasOwnProperty(n)) {\n                if (i === a._view[n]) ;else if (\"string\" == typeof i) try {\n                  var o = e.color(a._model[n]).mix(e.color(a._start[n]), t);\n                  a._view[n] = o.rgbString();\n                } catch (r) {\n                  a._view[n] = i;\n                } else if (\"number\" == typeof i) {\n                  var l = void 0 !== a._start[n] && isNaN(a._start[n]) === !1 ? a._start[n] : 0;\n                  a._view[n] = (a._model[n] - l) * t + l;\n                } else a._view[n] = i;\n              } else \"number\" != typeof i || isNaN(a._view[n]) ? a._view[n] = i : a._view[n] = i * t;\n            }, a), a);\n          },\n          tooltipPosition: function tooltipPosition() {\n            return {\n              x: this._model.x,\n              y: this._model.y\n            };\n          },\n          hasValue: function hasValue() {\n            return e.isNumber(this._model.x) && e.isNumber(this._model.y);\n          }\n        }), t.Element.extend = e.inherits;\n      };\n    }, {}],\n    26: [function (t, e, a) {\n      \"use strict\";\n\n      var i = t(3);\n\n      e.exports = function (t) {\n        function e(t, e, a) {\n          var i;\n          return \"string\" == typeof t ? (i = parseInt(t, 10), -1 !== t.indexOf(\"%\") && (i = i / 100 * e.parentNode[a])) : i = t, i;\n        }\n\n        function a(t) {\n          return void 0 !== t && null !== t && \"none\" !== t;\n        }\n\n        function n(t, i, n) {\n          var o = document.defaultView,\n              r = t.parentNode,\n              l = o.getComputedStyle(t)[i],\n              s = o.getComputedStyle(r)[i],\n              d = a(l),\n              u = a(s),\n              c = Number.POSITIVE_INFINITY;\n          return d || u ? Math.min(d ? e(l, t, n) : c, u ? e(s, r, n) : c) : \"none\";\n        }\n\n        var o = t.helpers = {};\n        o.each = function (t, e, a, i) {\n          var n, r;\n          if (o.isArray(t)) {\n            if (r = t.length, i) for (n = r - 1; n >= 0; n--) {\n              e.call(a, t[n], n);\n            } else for (n = 0; r > n; n++) {\n              e.call(a, t[n], n);\n            }\n          } else if (\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t)) {\n            var l = Object.keys(t);\n\n            for (r = l.length, n = 0; r > n; n++) {\n              e.call(a, t[l[n]], l[n]);\n            }\n          }\n        }, o.clone = function (t) {\n          var e = {};\n          return o.each(t, function (t, a) {\n            o.isArray(t) ? e[a] = t.slice(0) : \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t) && null !== t ? e[a] = o.clone(t) : e[a] = t;\n          }), e;\n        }, o.extend = function (t) {\n          for (var e = function e(_e, a) {\n            t[a] = _e;\n          }, a = 1, i = arguments.length; i > a; a++) {\n            o.each(arguments[a], e);\n          }\n\n          return t;\n        }, o.configMerge = function (e) {\n          var a = o.clone(e);\n          return o.each(Array.prototype.slice.call(arguments, 1), function (e) {\n            o.each(e, function (e, i) {\n              var n = a.hasOwnProperty(i),\n                  r = n ? a[i] : {};\n              \"scales\" === i ? a[i] = o.scaleMerge(r, e) : \"scale\" === i ? a[i] = o.configMerge(r, t.scaleService.getScaleDefaults(e.type), e) : !n || \"object\" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(r) || o.isArray(r) || null === r || \"object\" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e) || o.isArray(e) ? a[i] = e : a[i] = o.configMerge(r, e);\n            });\n          }), a;\n        }, o.scaleMerge = function (e, a) {\n          var i = o.clone(e);\n          return o.each(a, function (e, a) {\n            \"xAxes\" === a || \"yAxes\" === a ? i.hasOwnProperty(a) ? o.each(e, function (e, n) {\n              var r = o.getValueOrDefault(e.type, \"xAxes\" === a ? \"category\" : \"linear\"),\n                  l = t.scaleService.getScaleDefaults(r);\n              n >= i[a].length || !i[a][n].type ? i[a].push(o.configMerge(l, e)) : e.type && e.type !== i[a][n].type ? i[a][n] = o.configMerge(i[a][n], l, e) : i[a][n] = o.configMerge(i[a][n], e);\n            }) : (i[a] = [], o.each(e, function (e) {\n              var n = o.getValueOrDefault(e.type, \"xAxes\" === a ? \"category\" : \"linear\");\n              i[a].push(o.configMerge(t.scaleService.getScaleDefaults(n), e));\n            })) : i.hasOwnProperty(a) && \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(i[a]) && null !== i[a] && \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e) ? i[a] = o.configMerge(i[a], e) : i[a] = e;\n          }), i;\n        }, o.getValueAtIndexOrDefault = function (t, e, a) {\n          return void 0 === t || null === t ? a : o.isArray(t) ? e < t.length ? t[e] : a : t;\n        }, o.getValueOrDefault = function (t, e) {\n          return void 0 === t ? e : t;\n        }, o.indexOf = Array.prototype.indexOf ? function (t, e) {\n          return t.indexOf(e);\n        } : function (t, e) {\n          for (var a = 0, i = t.length; i > a; ++a) {\n            if (t[a] === e) return a;\n          }\n\n          return -1;\n        }, o.where = function (t, e) {\n          if (o.isArray(t) && Array.prototype.filter) return t.filter(e);\n          var a = [];\n          return o.each(t, function (t) {\n            e(t) && a.push(t);\n          }), a;\n        }, o.findIndex = Array.prototype.findIndex ? function (t, e, a) {\n          return t.findIndex(e, a);\n        } : function (t, e, a) {\n          a = void 0 === a ? t : a;\n\n          for (var i = 0, n = t.length; n > i; ++i) {\n            if (e.call(a, t[i], i, t)) return i;\n          }\n\n          return -1;\n        }, o.findNextWhere = function (t, e, a) {\n          (void 0 === a || null === a) && (a = -1);\n\n          for (var i = a + 1; i < t.length; i++) {\n            var n = t[i];\n            if (e(n)) return n;\n          }\n        }, o.findPreviousWhere = function (t, e, a) {\n          (void 0 === a || null === a) && (a = t.length);\n\n          for (var i = a - 1; i >= 0; i--) {\n            var n = t[i];\n            if (e(n)) return n;\n          }\n        }, o.inherits = function (t) {\n          var e = this,\n              a = t && t.hasOwnProperty(\"constructor\") ? t.constructor : function () {\n            return e.apply(this, arguments);\n          },\n              i = function i() {\n            this.constructor = a;\n          };\n\n          return i.prototype = e.prototype, a.prototype = new i(), a.extend = o.inherits, t && o.extend(a.prototype, t), a.__super__ = e.prototype, a;\n        }, o.noop = function () {}, o.uid = function () {\n          var t = 0;\n          return function () {\n            return t++;\n          };\n        }(), o.isNumber = function (t) {\n          return !isNaN(parseFloat(t)) && isFinite(t);\n        }, o.almostEquals = function (t, e, a) {\n          return Math.abs(t - e) < a;\n        }, o.max = function (t) {\n          return t.reduce(function (t, e) {\n            return isNaN(e) ? t : Math.max(t, e);\n          }, Number.NEGATIVE_INFINITY);\n        }, o.min = function (t) {\n          return t.reduce(function (t, e) {\n            return isNaN(e) ? t : Math.min(t, e);\n          }, Number.POSITIVE_INFINITY);\n        }, o.sign = Math.sign ? function (t) {\n          return Math.sign(t);\n        } : function (t) {\n          return t = +t, 0 === t || isNaN(t) ? t : t > 0 ? 1 : -1;\n        }, o.log10 = Math.log10 ? function (t) {\n          return Math.log10(t);\n        } : function (t) {\n          return Math.log(t) / Math.LN10;\n        }, o.toRadians = function (t) {\n          return t * (Math.PI / 180);\n        }, o.toDegrees = function (t) {\n          return t * (180 / Math.PI);\n        }, o.getAngleFromPoint = function (t, e) {\n          var a = e.x - t.x,\n              i = e.y - t.y,\n              n = Math.sqrt(a * a + i * i),\n              o = Math.atan2(i, a);\n          return o < -0.5 * Math.PI && (o += 2 * Math.PI), {\n            angle: o,\n            distance: n\n          };\n        }, o.distanceBetweenPoints = function (t, e) {\n          return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));\n        }, o.aliasPixel = function (t) {\n          return t % 2 === 0 ? 0 : 0.5;\n        }, o.splineCurve = function (t, e, a, i) {\n          var n = t.skip ? e : t,\n              o = e,\n              r = a.skip ? e : a,\n              l = Math.sqrt(Math.pow(o.x - n.x, 2) + Math.pow(o.y - n.y, 2)),\n              s = Math.sqrt(Math.pow(r.x - o.x, 2) + Math.pow(r.y - o.y, 2)),\n              d = l / (l + s),\n              u = s / (l + s);\n          d = isNaN(d) ? 0 : d, u = isNaN(u) ? 0 : u;\n          var c = i * d,\n              h = i * u;\n          return {\n            previous: {\n              x: o.x - c * (r.x - n.x),\n              y: o.y - c * (r.y - n.y)\n            },\n            next: {\n              x: o.x + h * (r.x - n.x),\n              y: o.y + h * (r.y - n.y)\n            }\n          };\n        }, o.EPSILON = Number.EPSILON || 1e-14, o.splineCurveMonotone = function (t) {\n          var e,\n              a,\n              i,\n              n,\n              r = (t || []).map(function (t) {\n            return {\n              model: t._model,\n              deltaK: 0,\n              mK: 0\n            };\n          }),\n              l = r.length;\n\n          for (e = 0; l > e; ++e) {\n            i = r[e], i.model.skip || (a = e > 0 ? r[e - 1] : null, n = l - 1 > e ? r[e + 1] : null, n && !n.model.skip && (i.deltaK = (n.model.y - i.model.y) / (n.model.x - i.model.x)), !a || a.model.skip ? i.mK = i.deltaK : !n || n.model.skip ? i.mK = a.deltaK : this.sign(a.deltaK) !== this.sign(i.deltaK) ? i.mK = 0 : i.mK = (a.deltaK + i.deltaK) / 2);\n          }\n\n          var s, d, u, c;\n\n          for (e = 0; l - 1 > e; ++e) {\n            i = r[e], n = r[e + 1], i.model.skip || n.model.skip || (o.almostEquals(i.deltaK, 0, this.EPSILON) ? i.mK = n.mK = 0 : (s = i.mK / i.deltaK, d = n.mK / i.deltaK, c = Math.pow(s, 2) + Math.pow(d, 2), 9 >= c || (u = 3 / Math.sqrt(c), i.mK = s * u * i.deltaK, n.mK = d * u * i.deltaK)));\n          }\n\n          var h;\n\n          for (e = 0; l > e; ++e) {\n            i = r[e], i.model.skip || (a = e > 0 ? r[e - 1] : null, n = l - 1 > e ? r[e + 1] : null, a && !a.model.skip && (h = (i.model.x - a.model.x) / 3, i.model.controlPointPreviousX = i.model.x - h, i.model.controlPointPreviousY = i.model.y - h * i.mK), n && !n.model.skip && (h = (n.model.x - i.model.x) / 3, i.model.controlPointNextX = i.model.x + h, i.model.controlPointNextY = i.model.y + h * i.mK));\n          }\n        }, o.nextItem = function (t, e, a) {\n          return a ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1];\n        }, o.previousItem = function (t, e, a) {\n          return a ? 0 >= e ? t[t.length - 1] : t[e - 1] : 0 >= e ? t[0] : t[e - 1];\n        }, o.niceNum = function (t, e) {\n          var a,\n              i = Math.floor(o.log10(t)),\n              n = t / Math.pow(10, i);\n          return a = e ? 1.5 > n ? 1 : 3 > n ? 2 : 7 > n ? 5 : 10 : 1 >= n ? 1 : 2 >= n ? 2 : 5 >= n ? 5 : 10, a * Math.pow(10, i);\n        };\n        var r = o.easingEffects = {\n          linear: function linear(t) {\n            return t;\n          },\n          easeInQuad: function easeInQuad(t) {\n            return t * t;\n          },\n          easeOutQuad: function easeOutQuad(t) {\n            return -1 * t * (t - 2);\n          },\n          easeInOutQuad: function easeInOutQuad(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);\n          },\n          easeInCubic: function easeInCubic(t) {\n            return t * t * t;\n          },\n          easeOutCubic: function easeOutCubic(t) {\n            return 1 * ((t = t / 1 - 1) * t * t + 1);\n          },\n          easeInOutCubic: function easeInOutCubic(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2);\n          },\n          easeInQuart: function easeInQuart(t) {\n            return t * t * t * t;\n          },\n          easeOutQuart: function easeOutQuart(t) {\n            return -1 * ((t = t / 1 - 1) * t * t * t - 1);\n          },\n          easeInOutQuart: function easeInOutQuart(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2);\n          },\n          easeInQuint: function easeInQuint(t) {\n            return 1 * (t /= 1) * t * t * t * t;\n          },\n          easeOutQuint: function easeOutQuint(t) {\n            return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n          },\n          easeInOutQuint: function easeInOutQuint(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2);\n          },\n          easeInSine: function easeInSine(t) {\n            return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n          },\n          easeOutSine: function easeOutSine(t) {\n            return 1 * Math.sin(t / 1 * (Math.PI / 2));\n          },\n          easeInOutSine: function easeInOutSine(t) {\n            return -0.5 * (Math.cos(Math.PI * t / 1) - 1);\n          },\n          easeInExpo: function easeInExpo(t) {\n            return 0 === t ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n          },\n          easeOutExpo: function easeOutExpo(t) {\n            return 1 === t ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n          },\n          easeInOutExpo: function easeInOutExpo(t) {\n            return 0 === t ? 0 : 1 === t ? 1 : (t /= 0.5) < 1 ? 0.5 * Math.pow(2, 10 * (t - 1)) : 0.5 * (-Math.pow(2, -10 * --t) + 2);\n          },\n          easeInCirc: function easeInCirc(t) {\n            return t >= 1 ? t : -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n          },\n          easeOutCirc: function easeOutCirc(t) {\n            return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n          },\n          easeInOutCirc: function easeInOutCirc(t) {\n            return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n          },\n          easeInElastic: function easeInElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 1 === (t /= 1) ? 1 : (a || (a = 0.3), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), -(i * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a)));\n          },\n          easeOutElastic: function easeOutElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 1 === (t /= 1) ? 1 : (a || (a = 0.3), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), i * Math.pow(2, -10 * t) * Math.sin((1 * t - e) * (2 * Math.PI) / a) + 1);\n          },\n          easeInOutElastic: function easeInOutElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 2 === (t /= 0.5) ? 1 : (a || (a = 1 * (0.3 * 1.5)), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), 1 > t ? -0.5 * (i * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a)) : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a) * 0.5 + 1);\n          },\n          easeInBack: function easeInBack(t) {\n            var e = 1.70158;\n            return 1 * (t /= 1) * t * ((e + 1) * t - e);\n          },\n          easeOutBack: function easeOutBack(t) {\n            var e = 1.70158;\n            return 1 * ((t = t / 1 - 1) * t * ((e + 1) * t + e) + 1);\n          },\n          easeInOutBack: function easeInOutBack(t) {\n            var e = 1.70158;\n            return (t /= 0.5) < 1 ? 0.5 * (t * t * (((e *= 1.525) + 1) * t - e)) : 0.5 * ((t -= 2) * t * (((e *= 1.525) + 1) * t + e) + 2);\n          },\n          easeInBounce: function easeInBounce(t) {\n            return 1 - r.easeOutBounce(1 - t);\n          },\n          easeOutBounce: function easeOutBounce(t) {\n            return (t /= 1) < 1 / 2.75 ? 1 * (7.5625 * t * t) : 2 / 2.75 > t ? 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) : 2.5 / 2.75 > t ? 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) : 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);\n          },\n          easeInOutBounce: function easeInOutBounce(t) {\n            return 0.5 > t ? 0.5 * r.easeInBounce(2 * t) : 0.5 * r.easeOutBounce(2 * t - 1) + 0.5;\n          }\n        };\n        o.requestAnimFrame = function () {\n          return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n            return window.setTimeout(t, 1e3 / 60);\n          };\n        }(), o.cancelAnimFrame = function () {\n          return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (t) {\n            return window.clearTimeout(t, 1e3 / 60);\n          };\n        }(), o.getRelativePosition = function (t, e) {\n          var a,\n              i,\n              n = t.originalEvent || t,\n              r = t.currentTarget || t.srcElement,\n              l = r.getBoundingClientRect(),\n              s = n.touches;\n          s && s.length > 0 ? (a = s[0].clientX, i = s[0].clientY) : (a = n.clientX, i = n.clientY);\n          var d = parseFloat(o.getStyle(r, \"padding-left\")),\n              u = parseFloat(o.getStyle(r, \"padding-top\")),\n              c = parseFloat(o.getStyle(r, \"padding-right\")),\n              h = parseFloat(o.getStyle(r, \"padding-bottom\")),\n              f = l.right - l.left - d - c,\n              g = l.bottom - l.top - u - h;\n          return a = Math.round((a - l.left - d) / f * r.width / e.currentDevicePixelRatio), i = Math.round((i - l.top - u) / g * r.height / e.currentDevicePixelRatio), {\n            x: a,\n            y: i\n          };\n        }, o.addEvent = function (t, e, a) {\n          t.addEventListener ? t.addEventListener(e, a) : t.attachEvent ? t.attachEvent(\"on\" + e, a) : t[\"on\" + e] = a;\n        }, o.removeEvent = function (t, e, a) {\n          t.removeEventListener ? t.removeEventListener(e, a, !1) : t.detachEvent ? t.detachEvent(\"on\" + e, a) : t[\"on\" + e] = o.noop;\n        }, o.bindEvents = function (t, e, a) {\n          var i = t.events = t.events || {};\n          o.each(e, function (e) {\n            i[e] = function () {\n              a.apply(t, arguments);\n            }, o.addEvent(t.chart.canvas, e, i[e]);\n          });\n        }, o.unbindEvents = function (t, e) {\n          var a = t.chart.canvas;\n          o.each(e, function (t, e) {\n            o.removeEvent(a, e, t);\n          });\n        }, o.getConstraintWidth = function (t) {\n          return n(t, \"max-width\", \"clientWidth\");\n        }, o.getConstraintHeight = function (t) {\n          return n(t, \"maxHeight\", \"clientHeight\");\n        }, o.getMaximumWidth = function (t) {\n          var e = t.parentNode,\n              a = parseInt(o.getStyle(e, \"padding-left\"), 10),\n              i = parseInt(o.getStyle(e, \"padding-right\"), 10),\n              n = e.clientWidth - a - i,\n              r = o.getConstraintWidth(t);\n          return isNaN(r) ? n : Math.min(n, r);\n        }, o.getMaximumHeight = function (t) {\n          var e = t.parentNode,\n              a = parseInt(o.getStyle(e, \"padding-top\"), 10),\n              i = parseInt(o.getStyle(e, \"padding-bottom\"), 10),\n              n = e.clientHeight - a - i,\n              r = o.getConstraintHeight(t);\n          return isNaN(r) ? n : Math.min(n, r);\n        }, o.getStyle = function (t, e) {\n          return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e);\n        }, o.retinaScale = function (t) {\n          var e = t.currentDevicePixelRatio = window.devicePixelRatio || 1;\n\n          if (1 !== e) {\n            var a = t.canvas,\n                i = t.height,\n                n = t.width;\n            a.height = i * e, a.width = n * e, t.ctx.scale(e, e), a.style.height = i + \"px\", a.style.width = n + \"px\";\n          }\n        }, o.clear = function (t) {\n          t.ctx.clearRect(0, 0, t.width, t.height);\n        }, o.fontString = function (t, e, a) {\n          return e + \" \" + t + \"px \" + a;\n        }, o.longestText = function (t, e, a, i) {\n          i = i || {};\n          var n = i.data = i.data || {},\n              r = i.garbageCollect = i.garbageCollect || [];\n          i.font !== e && (n = i.data = {}, r = i.garbageCollect = [], i.font = e), t.font = e;\n          var l = 0;\n          o.each(a, function (e) {\n            void 0 !== e && null !== e && o.isArray(e) !== !0 ? l = o.measureText(t, n, r, l, e) : o.isArray(e) && o.each(e, function (e) {\n              void 0 === e || null === e || o.isArray(e) || (l = o.measureText(t, n, r, l, e));\n            });\n          });\n          var s = r.length / 2;\n\n          if (s > a.length) {\n            for (var d = 0; s > d; d++) {\n              delete n[r[d]];\n            }\n\n            r.splice(0, s);\n          }\n\n          return l;\n        }, o.measureText = function (t, e, a, i, n) {\n          var o = e[n];\n          return o || (o = e[n] = t.measureText(n).width, a.push(n)), o > i && (i = o), i;\n        }, o.numberOfLabelLines = function (t) {\n          var e = 1;\n          return o.each(t, function (t) {\n            o.isArray(t) && t.length > e && (e = t.length);\n          }), e;\n        }, o.drawRoundedRectangle = function (t, e, a, i, n, o) {\n          t.beginPath(), t.moveTo(e + o, a), t.lineTo(e + i - o, a), t.quadraticCurveTo(e + i, a, e + i, a + o), t.lineTo(e + i, a + n - o), t.quadraticCurveTo(e + i, a + n, e + i - o, a + n), t.lineTo(e + o, a + n), t.quadraticCurveTo(e, a + n, e, a + n - o), t.lineTo(e, a + o), t.quadraticCurveTo(e, a, e + o, a), t.closePath();\n        }, o.color = function (e) {\n          return i ? i(e instanceof CanvasGradient ? t.defaults.global.defaultColor : e) : (console.error(\"Color.js not found!\"), e);\n        }, o.addResizeListener = function (t, e) {\n          var a = document.createElement(\"iframe\");\n          a.className = \"chartjs-hidden-iframe\", a.style.cssText = \"display:block;overflow:hidden;border:0;margin:0;top:0;left:0;bottom:0;right:0;height:100%;width:100%;position:absolute;pointer-events:none;z-index:-1;\", a.tabIndex = -1;\n\n          var i = t._chartjs = {\n            resizer: a,\n            ticking: !1\n          },\n              n = function n() {\n            i.ticking || (i.ticking = !0, o.requestAnimFrame.call(window, function () {\n              return i.resizer ? (i.ticking = !1, e()) : void 0;\n            }));\n          };\n\n          o.addEvent(a, \"load\", function () {\n            o.addEvent(a.contentWindow || a, \"resize\", n), n();\n          }), t.insertBefore(a, t.firstChild);\n        }, o.removeResizeListener = function (t) {\n          if (t && t._chartjs) {\n            var e = t._chartjs.resizer;\n            e && (e.parentNode.removeChild(e), t._chartjs.resizer = null), delete t._chartjs;\n          }\n        }, o.isArray = Array.isArray ? function (t) {\n          return Array.isArray(t);\n        } : function (t) {\n          return \"[object Array]\" === Object.prototype.toString.call(t);\n        }, o.arrayEquals = function (t, e) {\n          var a, i, n, r;\n          if (!t || !e || t.length !== e.length) return !1;\n\n          for (a = 0, i = t.length; i > a; ++a) {\n            if (n = t[a], r = e[a], n instanceof Array && r instanceof Array) {\n              if (!o.arrayEquals(n, r)) return !1;\n            } else if (n !== r) return !1;\n          }\n\n          return !0;\n        }, o.callCallback = function (t, e, a) {\n          t && \"function\" == typeof t.call && t.apply(a, e);\n        }, o.getHoverColor = function (t) {\n          return t instanceof CanvasPattern ? t : o.color(t).saturate(0.5).darken(0.1).rgbString();\n        };\n      };\n    }, {\n      3: 3\n    }],\n    27: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a,\n              i,\n              n,\n              o,\n              r,\n              l = t.data.datasets;\n\n          for (i = 0, o = l.length; o > i; ++i) {\n            if (t.isDatasetVisible(i)) for (a = t.getDatasetMeta(i), n = 0, r = a.data.length; r > n; ++n) {\n              var s = a.data[n];\n              s._view.skip || e(s);\n            }\n          }\n        }\n\n        function a(t, a) {\n          var i = [];\n          return e(t, function (t) {\n            t.inRange(a.x, a.y) && i.push(t);\n          }), i;\n        }\n\n        function i(t, a, i, n) {\n          var r = Number.POSITIVE_INFINITY,\n              l = [];\n          return n || (n = o.distanceBetweenPoints), e(t, function (t) {\n            if (!i || t.inRange(a.x, a.y)) {\n              var e = t.getCenterPoint(),\n                  o = n(a, e);\n              r > o ? (l = [t], r = o) : o === r && l.push(t);\n            }\n          }), l;\n        }\n\n        function n(t, e, n) {\n          var r = o.getRelativePosition(e, t.chart),\n              l = function l(t, e) {\n            return Math.abs(t.x - e.x);\n          },\n              s = n.intersect ? a(t, r) : i(t, r, !1, l),\n              d = [];\n\n          return s.length ? (t.data.datasets.forEach(function (e, a) {\n            if (t.isDatasetVisible(a)) {\n              var i = t.getDatasetMeta(a),\n                  n = i.data[s[0]._index];\n              n && !n._view.skip && d.push(n);\n            }\n          }), d) : [];\n        }\n\n        var o = t.helpers;\n        t.Interaction = {\n          modes: {\n            single: function single(t, a) {\n              var i = o.getRelativePosition(a, t.chart),\n                  n = [];\n              return e(t, function (t) {\n                return t.inRange(i.x, i.y) ? (n.push(t), n) : void 0;\n              }), n.slice(0, 1);\n            },\n            label: n,\n            index: n,\n            dataset: function dataset(t, e, n) {\n              var r = o.getRelativePosition(e, t.chart),\n                  l = n.intersect ? a(t, r) : i(t, r, !1);\n              return l.length > 0 && (l = t.getDatasetMeta(l[0]._datasetIndex).data), l;\n            },\n            \"x-axis\": function xAxis(t, e) {\n              return n(t, e, !0);\n            },\n            point: function point(t, e) {\n              var i = o.getRelativePosition(e, t.chart);\n              return a(t, i);\n            },\n            nearest: function nearest(t, e, a) {\n              var n = o.getRelativePosition(e, t.chart),\n                  r = i(t, n, a.intersect);\n              return r.length > 1 && r.sort(function (t, e) {\n                var a = t.getArea(),\n                    i = e.getArea(),\n                    n = a - i;\n                return 0 === n && (n = t._datasetIndex - e._datasetIndex), n;\n              }), r.slice(0, 1);\n            },\n            x: function x(t, a, i) {\n              var n = o.getRelativePosition(a, t.chart),\n                  r = [],\n                  l = !1;\n              return e(t, function (t) {\n                t.inXRange(n.x) && r.push(t), t.inRange(n.x, n.y) && (l = !0);\n              }), i.intersect && !l && (r = []), r;\n            },\n            y: function y(t, a, i) {\n              var n = o.getRelativePosition(a, t.chart),\n                  r = [],\n                  l = !1;\n              return e(t, function (t) {\n                t.inYRange(n.y) && r.push(t), t.inRange(n.x, n.y) && (l = !0);\n              }), i.intersect && !l && (r = []), r;\n            }\n          }\n        };\n      };\n    }, {}],\n    28: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function () {\n        var t = function t(e, a) {\n          return this.controller = new t.Controller(e, a, this), this.controller;\n        };\n\n        return t.defaults = {\n          global: {\n            responsive: !0,\n            responsiveAnimationDuration: 0,\n            maintainAspectRatio: !0,\n            events: [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"],\n            hover: {\n              onHover: null,\n              mode: \"nearest\",\n              intersect: !0,\n              animationDuration: 400\n            },\n            onClick: null,\n            defaultColor: \"rgba(0,0,0,0.1)\",\n            defaultFontColor: \"#666\",\n            defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            defaultFontSize: 12,\n            defaultFontStyle: \"normal\",\n            showLines: !0,\n            elements: {},\n            legendCallback: function legendCallback(t) {\n              var e = [];\n              e.push('<ul className=\"' + t.id + '-legend\">');\n\n              for (var a = 0; a < t.data.datasets.length; a++) {\n                e.push('<li><span style=\"background-color:' + t.data.datasets[a].backgroundColor + '\"></span>'), t.data.datasets[a].label && e.push(t.data.datasets[a].label), e.push(\"</li>\");\n              }\n\n              return e.push(\"</ul>\"), e.join(\"\");\n            }\n          }\n        }, t.Chart = t, t;\n      };\n    }, {}],\n    29: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.layoutService = {\n          defaults: {},\n          addBox: function addBox(t, e) {\n            t.boxes || (t.boxes = []), t.boxes.push(e);\n          },\n          removeBox: function removeBox(t, e) {\n            t.boxes && t.boxes.splice(t.boxes.indexOf(e), 1);\n          },\n          update: function update(t, a, i) {\n            function n(t) {\n              var e,\n                  a = t.isHorizontal();\n              a ? (e = t.update(t.options.fullWidth ? x : C, M), D -= e.height) : (e = t.update(w, S), C -= e.width), I.push({\n                horizontal: a,\n                minSize: e,\n                box: t\n              });\n            }\n\n            function o(t) {\n              var a = e.findNextWhere(I, function (e) {\n                return e.box === t;\n              });\n              if (a) if (t.isHorizontal()) {\n                var i = {\n                  left: A,\n                  right: T,\n                  top: 0,\n                  bottom: 0\n                };\n                t.update(t.options.fullWidth ? x : C, y / 2, i);\n              } else t.update(a.minSize.width, D);\n            }\n\n            function r(t) {\n              var a = e.findNextWhere(I, function (e) {\n                return e.box === t;\n              }),\n                  i = {\n                left: 0,\n                right: 0,\n                top: P,\n                bottom: F\n              };\n              a && t.update(a.minSize.width, D, i);\n            }\n\n            function l(t) {\n              t.isHorizontal() ? (t.left = t.options.fullWidth ? u : A, t.right = t.options.fullWidth ? a - c : A + C, t.top = L, t.bottom = L + t.height, L = t.bottom) : (t.left = V, t.right = V + t.width, t.top = P, t.bottom = P + D, V = t.right);\n            }\n\n            if (t) {\n              var s = t.options.layout,\n                  d = s ? s.padding : null,\n                  u = 0,\n                  c = 0,\n                  h = 0,\n                  f = 0;\n              isNaN(d) ? (u = d.left || 0, c = d.right || 0, h = d.top || 0, f = d.bottom || 0) : (u = d, c = d, h = d, f = d);\n              var g = e.where(t.boxes, function (t) {\n                return \"left\" === t.options.position;\n              }),\n                  p = e.where(t.boxes, function (t) {\n                return \"right\" === t.options.position;\n              }),\n                  m = e.where(t.boxes, function (t) {\n                return \"top\" === t.options.position;\n              }),\n                  b = e.where(t.boxes, function (t) {\n                return \"bottom\" === t.options.position;\n              }),\n                  v = e.where(t.boxes, function (t) {\n                return \"chartArea\" === t.options.position;\n              });\n              m.sort(function (t, e) {\n                return (e.options.fullWidth ? 1 : 0) - (t.options.fullWidth ? 1 : 0);\n              }), b.sort(function (t, e) {\n                return (t.options.fullWidth ? 1 : 0) - (e.options.fullWidth ? 1 : 0);\n              });\n              var x = a - u - c,\n                  y = i - h - f,\n                  k = x / 2,\n                  S = y / 2,\n                  w = (a - k) / (g.length + p.length),\n                  M = (i - S) / (m.length + b.length),\n                  C = x,\n                  D = y,\n                  I = [];\n              e.each(g.concat(p, m, b), n);\n              var A = u,\n                  T = c,\n                  P = h,\n                  F = f;\n              e.each(g.concat(p), o), e.each(g, function (t) {\n                A += t.width;\n              }), e.each(p, function (t) {\n                T += t.width;\n              }), e.each(m.concat(b), o), e.each(m, function (t) {\n                P += t.height;\n              }), e.each(b, function (t) {\n                F += t.height;\n              }), e.each(g.concat(p), r), A = u, T = c, P = h, F = f, e.each(g, function (t) {\n                A += t.width;\n              }), e.each(p, function (t) {\n                T += t.width;\n              }), e.each(m, function (t) {\n                P += t.height;\n              }), e.each(b, function (t) {\n                F += t.height;\n              });\n\n              var _ = i - P - F,\n                  R = a - A - T;\n\n              (R !== C || _ !== D) && (e.each(g, function (t) {\n                t.height = _;\n              }), e.each(p, function (t) {\n                t.height = _;\n              }), e.each(m, function (t) {\n                t.options.fullWidth || (t.width = R);\n              }), e.each(b, function (t) {\n                t.options.fullWidth || (t.width = R);\n              }), D = _, C = R);\n              var V = u,\n                  L = h;\n              e.each(g.concat(m), l), V += C, L += D, e.each(p, l), e.each(b, l), t.chartArea = {\n                left: A,\n                top: P,\n                right: A + C,\n                bottom: P + D\n              }, e.each(v, function (e) {\n                e.left = t.chartArea.left, e.top = t.chartArea.top, e.right = t.chartArea.right, e.bottom = t.chartArea.bottom, e.update(C, D);\n              });\n            }\n          }\n        };\n      };\n    }, {}],\n    30: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return t.usePointStyle ? e * Math.SQRT2 : t.boxWidth;\n        }\n\n        var a = t.helpers,\n            i = a.noop;\n        t.defaults.global.legend = {\n          display: !0,\n          position: \"top\",\n          fullWidth: !0,\n          reverse: !1,\n          onClick: function onClick(t, e) {\n            var a = e.datasetIndex,\n                i = this.chart,\n                n = i.getDatasetMeta(a);\n            n.hidden = null === n.hidden ? !i.data.datasets[a].hidden : null, i.update();\n          },\n          onHover: null,\n          labels: {\n            boxWidth: 40,\n            padding: 10,\n            generateLabels: function generateLabels(t) {\n              var e = t.data;\n              return a.isArray(e.datasets) ? e.datasets.map(function (e, i) {\n                return {\n                  text: e.label,\n                  fillStyle: a.isArray(e.backgroundColor) ? e.backgroundColor[0] : e.backgroundColor,\n                  hidden: !t.isDatasetVisible(i),\n                  lineCap: e.borderCapStyle,\n                  lineDash: e.borderDash,\n                  lineDashOffset: e.borderDashOffset,\n                  lineJoin: e.borderJoinStyle,\n                  lineWidth: e.borderWidth,\n                  strokeStyle: e.borderColor,\n                  pointStyle: e.pointStyle,\n                  datasetIndex: i\n                };\n              }, this) : [];\n            }\n          }\n        }, t.Legend = t.Element.extend({\n          initialize: function initialize(t) {\n            a.extend(this, t), this.legendHitBoxes = [], this.doughnutMode = !1;\n          },\n          beforeUpdate: i,\n          update: function update(t, e, a) {\n            var i = this;\n            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = a, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n          },\n          afterUpdate: i,\n          beforeSetDimensions: i,\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n              width: 0,\n              height: 0\n            };\n          },\n          afterSetDimensions: i,\n          beforeBuildLabels: i,\n          buildLabels: function buildLabels() {\n            var t = this;\n            t.legendItems = t.options.labels.generateLabels.call(t, t.chart), t.options.reverse && t.legendItems.reverse();\n          },\n          afterBuildLabels: i,\n          beforeFit: i,\n          fit: function fit() {\n            var i = this,\n                n = i.options,\n                o = n.labels,\n                r = n.display,\n                l = i.ctx,\n                s = t.defaults.global,\n                d = a.getValueOrDefault,\n                u = d(o.fontSize, s.defaultFontSize),\n                c = d(o.fontStyle, s.defaultFontStyle),\n                h = d(o.fontFamily, s.defaultFontFamily),\n                f = a.fontString(u, c, h),\n                g = i.legendHitBoxes = [],\n                p = i.minSize,\n                m = i.isHorizontal();\n            if (m ? (p.width = i.maxWidth, p.height = r ? 10 : 0) : (p.width = r ? 10 : 0, p.height = i.maxHeight), r) if (l.font = f, m) {\n              var b = i.lineWidths = [0],\n                  v = i.legendItems.length ? u + o.padding : 0;\n              l.textAlign = \"left\", l.textBaseline = \"top\", a.each(i.legendItems, function (t, a) {\n                var n = e(o, u),\n                    r = n + u / 2 + l.measureText(t.text).width;\n                b[b.length - 1] + r + o.padding >= i.width && (v += u + o.padding, b[b.length] = i.left), g[a] = {\n                  left: 0,\n                  top: 0,\n                  width: r,\n                  height: u\n                }, b[b.length - 1] += r + o.padding;\n              }), p.height += v;\n            } else {\n              var x = o.padding,\n                  y = i.columnWidths = [],\n                  k = o.padding,\n                  S = 0,\n                  w = 0,\n                  M = u + x;\n              a.each(i.legendItems, function (t, a) {\n                var i = e(o, u),\n                    n = i + u / 2 + l.measureText(t.text).width;\n                w + M > p.height && (k += S + o.padding, y.push(S), S = 0, w = 0), S = Math.max(S, n), w += M, g[a] = {\n                  left: 0,\n                  top: 0,\n                  width: n,\n                  height: u\n                };\n              }), k += S, y.push(S), p.width += k;\n            }\n            i.width = p.width, i.height = p.height;\n          },\n          afterFit: i,\n          isHorizontal: function isHorizontal() {\n            return \"top\" === this.options.position || \"bottom\" === this.options.position;\n          },\n          draw: function draw() {\n            var i = this,\n                n = i.options,\n                o = n.labels,\n                r = t.defaults.global,\n                l = r.elements.line,\n                s = i.width,\n                d = i.lineWidths;\n\n            if (n.display) {\n              var u,\n                  c = i.ctx,\n                  h = a.getValueOrDefault,\n                  f = h(o.fontColor, r.defaultFontColor),\n                  g = h(o.fontSize, r.defaultFontSize),\n                  p = h(o.fontStyle, r.defaultFontStyle),\n                  m = h(o.fontFamily, r.defaultFontFamily),\n                  b = a.fontString(g, p, m);\n              c.textAlign = \"left\", c.textBaseline = \"top\", c.lineWidth = 0.5, c.strokeStyle = f, c.fillStyle = f, c.font = b;\n\n              var v = e(o, g),\n                  x = i.legendHitBoxes,\n                  y = function y(e, a, i) {\n                if (!(isNaN(v) || 0 >= v)) {\n                  c.save(), c.fillStyle = h(i.fillStyle, r.defaultColor), c.lineCap = h(i.lineCap, l.borderCapStyle), c.lineDashOffset = h(i.lineDashOffset, l.borderDashOffset), c.lineJoin = h(i.lineJoin, l.borderJoinStyle), c.lineWidth = h(i.lineWidth, l.borderWidth), c.strokeStyle = h(i.strokeStyle, r.defaultColor);\n                  var o = 0 === h(i.lineWidth, l.borderWidth);\n\n                  if (c.setLineDash && c.setLineDash(h(i.lineDash, l.borderDash)), n.labels && n.labels.usePointStyle) {\n                    var s = g * Math.SQRT2 / 2,\n                        d = s / Math.SQRT2,\n                        u = e + d,\n                        f = a + d;\n                    t.canvasHelpers.drawPoint(c, i.pointStyle, s, u, f);\n                  } else o || c.strokeRect(e, a, v, g), c.fillRect(e, a, v, g);\n\n                  c.restore();\n                }\n              },\n                  k = function k(t, e, a, i) {\n                c.fillText(a.text, v + g / 2 + t, e), a.hidden && (c.beginPath(), c.lineWidth = 2, c.moveTo(v + g / 2 + t, e + g / 2), c.lineTo(v + g / 2 + t + i, e + g / 2), c.stroke());\n              },\n                  S = i.isHorizontal();\n\n              u = S ? {\n                x: i.left + (s - d[0]) / 2,\n                y: i.top + o.padding,\n                line: 0\n              } : {\n                x: i.left + o.padding,\n                y: i.top + o.padding,\n                line: 0\n              };\n              var w = g + o.padding;\n              a.each(i.legendItems, function (t, e) {\n                var a = c.measureText(t.text).width,\n                    n = v + g / 2 + a,\n                    r = u.x,\n                    l = u.y;\n                S ? r + n >= s && (l = u.y += w, u.line++, r = u.x = i.left + (s - d[u.line]) / 2) : l + w > i.bottom && (r = u.x = r + i.columnWidths[u.line] + o.padding, l = u.y = i.top, u.line++), y(r, l, t), x[e].left = r, x[e].top = l, k(r, l, t, a), S ? u.x += n + o.padding : u.y += w;\n              });\n            }\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                i = e.options,\n                n = \"mouseup\" === t.type ? \"click\" : t.type,\n                o = !1;\n\n            if (\"mousemove\" === n) {\n              if (!i.onHover) return;\n            } else {\n              if (\"click\" !== n) return;\n              if (!i.onClick) return;\n            }\n\n            var r = a.getRelativePosition(t, e.chart.chart),\n                l = r.x,\n                s = r.y;\n            if (l >= e.left && l <= e.right && s >= e.top && s <= e.bottom) for (var d = e.legendHitBoxes, u = 0; u < d.length; ++u) {\n              var c = d[u];\n\n              if (l >= c.left && l <= c.left + c.width && s >= c.top && s <= c.top + c.height) {\n                if (\"click\" === n) {\n                  i.onClick.call(e, t, e.legendItems[u]), o = !0;\n                  break;\n                }\n\n                if (\"mousemove\" === n) {\n                  i.onHover.call(e, t, e.legendItems[u]), o = !0;\n                  break;\n                }\n              }\n            }\n            return o;\n          }\n        }), t.plugins.register({\n          beforeInit: function beforeInit(e) {\n            var a = e.options,\n                i = a.legend;\n            i && (e.legend = new t.Legend({\n              ctx: e.chart.ctx,\n              options: i,\n              chart: e\n            }), t.layoutService.addBox(e, e.legend));\n          }\n        });\n      };\n    }, {}],\n    31: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers.noop;\n        t.plugins = {\n          _plugins: [],\n          register: function register(t) {\n            var e = this._plugins;\n            [].concat(t).forEach(function (t) {\n              -1 === e.indexOf(t) && e.push(t);\n            });\n          },\n          unregister: function unregister(t) {\n            var e = this._plugins;\n            [].concat(t).forEach(function (t) {\n              var a = e.indexOf(t);\n              -1 !== a && e.splice(a, 1);\n            });\n          },\n          clear: function clear() {\n            this._plugins = [];\n          },\n          count: function count() {\n            return this._plugins.length;\n          },\n          getAll: function getAll() {\n            return this._plugins;\n          },\n          notify: function notify(t, e) {\n            var a,\n                i,\n                n = this._plugins,\n                o = n.length;\n\n            for (a = 0; o > a; ++a) {\n              if (i = n[a], \"function\" == typeof i[t] && i[t].apply(i, e || []) === !1) return !1;\n            }\n\n            return !0;\n          }\n        }, t.PluginBase = t.Element.extend({\n          beforeInit: e,\n          afterInit: e,\n          beforeUpdate: e,\n          afterUpdate: e,\n          beforeDraw: e,\n          afterDraw: e,\n          destroy: e\n        }), t.pluginService = t.plugins;\n      };\n    }, {}],\n    32: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.scale = {\n          display: !0,\n          position: \"left\",\n          gridLines: {\n            display: !0,\n            color: \"rgba(0, 0, 0, 0.1)\",\n            lineWidth: 1,\n            drawBorder: !0,\n            drawOnChartArea: !0,\n            drawTicks: !0,\n            tickMarkLength: 10,\n            zeroLineWidth: 1,\n            zeroLineColor: \"rgba(0,0,0,0.25)\",\n            offsetGridLines: !1,\n            borderDash: [],\n            borderDashOffset: 0\n          },\n          scaleLabel: {\n            labelString: \"\",\n            display: !1\n          },\n          ticks: {\n            beginAtZero: !1,\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: !1,\n            padding: 10,\n            reverse: !1,\n            display: !0,\n            autoSkip: !0,\n            autoSkipPadding: 0,\n            labelOffset: 0,\n            callback: t.Ticks.formatters.values\n          }\n        }, t.Scale = t.Element.extend({\n          beforeUpdate: function beforeUpdate() {\n            e.callCallback(this.options.beforeUpdate, [this]);\n          },\n          update: function update(t, a, i) {\n            var n = this;\n            return n.beforeUpdate(), n.maxWidth = t, n.maxHeight = a, n.margins = e.extend({\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }, i), n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n.beforeDataLimits(), n.determineDataLimits(), n.afterDataLimits(), n.beforeBuildTicks(), n.buildTicks(), n.afterBuildTicks(), n.beforeTickToLabelConversion(), n.convertTicksToLabels(), n.afterTickToLabelConversion(), n.beforeCalculateTickRotation(), n.calculateTickRotation(), n.afterCalculateTickRotation(), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate(), n.minSize;\n          },\n          afterUpdate: function afterUpdate() {\n            e.callCallback(this.options.afterUpdate, [this]);\n          },\n          beforeSetDimensions: function beforeSetDimensions() {\n            e.callCallback(this.options.beforeSetDimensions, [this]);\n          },\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;\n          },\n          afterSetDimensions: function afterSetDimensions() {\n            e.callCallback(this.options.afterSetDimensions, [this]);\n          },\n          beforeDataLimits: function beforeDataLimits() {\n            e.callCallback(this.options.beforeDataLimits, [this]);\n          },\n          determineDataLimits: e.noop,\n          afterDataLimits: function afterDataLimits() {\n            e.callCallback(this.options.afterDataLimits, [this]);\n          },\n          beforeBuildTicks: function beforeBuildTicks() {\n            e.callCallback(this.options.beforeBuildTicks, [this]);\n          },\n          buildTicks: e.noop,\n          afterBuildTicks: function afterBuildTicks() {\n            e.callCallback(this.options.afterBuildTicks, [this]);\n          },\n          beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n            e.callCallback(this.options.beforeTickToLabelConversion, [this]);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var t = this,\n                e = t.options.ticks;\n            t.ticks = t.ticks.map(e.userCallback || e.callback);\n          },\n          afterTickToLabelConversion: function afterTickToLabelConversion() {\n            e.callCallback(this.options.afterTickToLabelConversion, [this]);\n          },\n          beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n            e.callCallback(this.options.beforeCalculateTickRotation, [this]);\n          },\n          calculateTickRotation: function calculateTickRotation() {\n            var a = this,\n                i = a.ctx,\n                n = t.defaults.global,\n                o = a.options.ticks,\n                r = e.getValueOrDefault(o.fontSize, n.defaultFontSize),\n                l = e.getValueOrDefault(o.fontStyle, n.defaultFontStyle),\n                s = e.getValueOrDefault(o.fontFamily, n.defaultFontFamily),\n                d = e.fontString(r, l, s);\n            i.font = d;\n            var u,\n                c = i.measureText(a.ticks[0]).width,\n                h = i.measureText(a.ticks[a.ticks.length - 1]).width;\n\n            if (a.labelRotation = o.minRotation || 0, a.paddingRight = 0, a.paddingLeft = 0, a.options.display && a.isHorizontal()) {\n              a.paddingRight = h / 2 + 3, a.paddingLeft = c / 2 + 3, a.longestTextCache || (a.longestTextCache = {});\n\n              for (var f, g, p = e.longestText(i, d, a.ticks, a.longestTextCache), m = p, b = a.getPixelForTick(1) - a.getPixelForTick(0) - 6; m > b && a.labelRotation < o.maxRotation;) {\n                if (f = Math.cos(e.toRadians(a.labelRotation)), g = Math.sin(e.toRadians(a.labelRotation)), u = f * c, u + r / 2 > a.yLabelWidth && (a.paddingLeft = u + r / 2), a.paddingRight = r / 2, g * p > a.maxHeight) {\n                  a.labelRotation--;\n                  break;\n                }\n\n                a.labelRotation++, m = f * p;\n              }\n            }\n\n            a.margins && (a.paddingLeft = Math.max(a.paddingLeft - a.margins.left, 0), a.paddingRight = Math.max(a.paddingRight - a.margins.right, 0));\n          },\n          afterCalculateTickRotation: function afterCalculateTickRotation() {\n            e.callCallback(this.options.afterCalculateTickRotation, [this]);\n          },\n          beforeFit: function beforeFit() {\n            e.callCallback(this.options.beforeFit, [this]);\n          },\n          fit: function fit() {\n            var a = this,\n                i = a.minSize = {\n              width: 0,\n              height: 0\n            },\n                n = a.options,\n                o = t.defaults.global,\n                r = n.ticks,\n                l = n.scaleLabel,\n                s = n.gridLines,\n                d = n.display,\n                u = a.isHorizontal(),\n                c = e.getValueOrDefault(r.fontSize, o.defaultFontSize),\n                h = e.getValueOrDefault(r.fontStyle, o.defaultFontStyle),\n                f = e.getValueOrDefault(r.fontFamily, o.defaultFontFamily),\n                g = e.fontString(c, h, f),\n                p = e.getValueOrDefault(l.fontSize, o.defaultFontSize),\n                m = n.gridLines.tickMarkLength;\n\n            if (u ? i.width = a.isFullWidth() ? a.maxWidth - a.margins.left - a.margins.right : a.maxWidth : i.width = d && s.drawTicks ? m : 0, u ? i.height = d && s.drawTicks ? m : 0 : i.height = a.maxHeight, l.display && d && (u ? i.height += 1.5 * p : i.width += 1.5 * p), r.display && d) {\n              a.longestTextCache || (a.longestTextCache = {});\n              var b = e.longestText(a.ctx, g, a.ticks, a.longestTextCache),\n                  v = e.numberOfLabelLines(a.ticks),\n                  x = 0.5 * c;\n\n              if (u) {\n                a.longestLabelWidth = b;\n                var y = Math.sin(e.toRadians(a.labelRotation)) * a.longestLabelWidth + c * v + x * v;\n                i.height = Math.min(a.maxHeight, i.height + y), a.ctx.font = g;\n                var k = a.ctx.measureText(a.ticks[0]).width,\n                    S = a.ctx.measureText(a.ticks[a.ticks.length - 1]).width,\n                    w = Math.cos(e.toRadians(a.labelRotation)),\n                    M = Math.sin(e.toRadians(a.labelRotation));\n                a.paddingLeft = 0 !== a.labelRotation ? w * k + 3 : k / 2 + 3, a.paddingRight = 0 !== a.labelRotation ? M * (c / 2) + 3 : S / 2 + 3;\n              } else {\n                var C = a.maxWidth - i.width,\n                    D = r.mirror;\n                D ? b = 0 : b += a.options.ticks.padding, C > b ? i.width += b : i.width = a.maxWidth, a.paddingTop = c / 2, a.paddingBottom = c / 2;\n              }\n            }\n\n            a.margins && (a.paddingLeft = Math.max(a.paddingLeft - a.margins.left, 0), a.paddingTop = Math.max(a.paddingTop - a.margins.top, 0), a.paddingRight = Math.max(a.paddingRight - a.margins.right, 0), a.paddingBottom = Math.max(a.paddingBottom - a.margins.bottom, 0)), a.width = i.width, a.height = i.height;\n          },\n          afterFit: function afterFit() {\n            e.callCallback(this.options.afterFit, [this]);\n          },\n          isHorizontal: function isHorizontal() {\n            return \"top\" === this.options.position || \"bottom\" === this.options.position;\n          },\n          isFullWidth: function isFullWidth() {\n            return this.options.fullWidth;\n          },\n          getRightValue: function getRightValue(t) {\n            return null === t || \"undefined\" == typeof t ? NaN : \"number\" != typeof t || isFinite(t) ? \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t) ? t instanceof Date || t.isValid ? t : this.getRightValue(this.isHorizontal() ? t.x : t.y) : t : NaN;\n          },\n          getLabelForIndex: e.noop,\n          getPixelForValue: e.noop,\n          getValueForPixel: e.noop,\n          getPixelForTick: function getPixelForTick(t, e) {\n            var a = this;\n\n            if (a.isHorizontal()) {\n              var i = a.width - (a.paddingLeft + a.paddingRight),\n                  n = i / Math.max(a.ticks.length - (a.options.gridLines.offsetGridLines ? 0 : 1), 1),\n                  o = n * t + a.paddingLeft;\n              e && (o += n / 2);\n              var r = a.left + Math.round(o);\n              return r += a.isFullWidth() ? a.margins.left : 0;\n            }\n\n            var l = a.height - (a.paddingTop + a.paddingBottom);\n            return a.top + t * (l / (a.ticks.length - 1));\n          },\n          getPixelForDecimal: function getPixelForDecimal(t) {\n            var e = this;\n\n            if (e.isHorizontal()) {\n              var a = e.width - (e.paddingLeft + e.paddingRight),\n                  i = a * t + e.paddingLeft,\n                  n = e.left + Math.round(i);\n              return n += e.isFullWidth() ? e.margins.left : 0;\n            }\n\n            return e.top + t * e.height;\n          },\n          getBasePixel: function getBasePixel() {\n            var t = this,\n                e = t.min,\n                a = t.max;\n            return t.getPixelForValue(t.beginAtZero ? 0 : 0 > e && 0 > a ? a : e > 0 && a > 0 ? e : 0);\n          },\n          draw: function draw(a) {\n            var i = this,\n                n = i.options;\n\n            if (n.display) {\n              var o,\n                  r,\n                  l = i.ctx,\n                  s = t.defaults.global,\n                  d = n.ticks,\n                  u = n.gridLines,\n                  c = n.scaleLabel,\n                  h = 0 !== i.labelRotation,\n                  f = d.autoSkip,\n                  g = i.isHorizontal();\n              d.maxTicksLimit && (r = d.maxTicksLimit);\n              var p = e.getValueOrDefault(d.fontColor, s.defaultFontColor),\n                  m = e.getValueOrDefault(d.fontSize, s.defaultFontSize),\n                  b = e.getValueOrDefault(d.fontStyle, s.defaultFontStyle),\n                  v = e.getValueOrDefault(d.fontFamily, s.defaultFontFamily),\n                  x = e.fontString(m, b, v),\n                  y = u.tickMarkLength,\n                  k = e.getValueOrDefault(u.borderDash, s.borderDash),\n                  S = e.getValueOrDefault(u.borderDashOffset, s.borderDashOffset),\n                  w = e.getValueOrDefault(c.fontColor, s.defaultFontColor),\n                  M = e.getValueOrDefault(c.fontSize, s.defaultFontSize),\n                  C = e.getValueOrDefault(c.fontStyle, s.defaultFontStyle),\n                  D = e.getValueOrDefault(c.fontFamily, s.defaultFontFamily),\n                  I = e.fontString(M, C, D),\n                  A = e.toRadians(i.labelRotation),\n                  T = Math.cos(A),\n                  P = i.longestLabelWidth * T;\n              l.fillStyle = p;\n              var F = [];\n\n              if (g) {\n                if (o = !1, h && (P /= 2), (P + d.autoSkipPadding) * i.ticks.length > i.width - (i.paddingLeft + i.paddingRight) && (o = 1 + Math.floor((P + d.autoSkipPadding) * i.ticks.length / (i.width - (i.paddingLeft + i.paddingRight)))), r && i.ticks.length > r) for (; !o || i.ticks.length / (o || 1) > r;) {\n                  o || (o = 1), o += 1;\n                }\n                f || (o = !1);\n              }\n\n              var _ = \"right\" === n.position ? i.left : i.right - y,\n                  R = \"right\" === n.position ? i.left + y : i.right,\n                  V = \"bottom\" === n.position ? i.top : i.bottom - y,\n                  L = \"bottom\" === n.position ? i.top + y : i.bottom;\n\n              if (e.each(i.ticks, function (t, r) {\n                if (void 0 !== t && null !== t) {\n                  var l = i.ticks.length === r + 1,\n                      s = o > 1 && r % o > 0 || r % o === 0 && r + o >= i.ticks.length;\n\n                  if ((!s || l) && void 0 !== t && null !== t) {\n                    var c, f;\n                    r === (\"undefined\" != typeof i.zeroLineIndex ? i.zeroLineIndex : 0) ? (c = u.zeroLineWidth, f = u.zeroLineColor) : (c = e.getValueAtIndexOrDefault(u.lineWidth, r), f = e.getValueAtIndexOrDefault(u.color, r));\n                    var p,\n                        m,\n                        b,\n                        v,\n                        x,\n                        w,\n                        M,\n                        C,\n                        D,\n                        I,\n                        T = \"middle\",\n                        P = \"middle\";\n\n                    if (g) {\n                      h || (P = \"top\" === n.position ? \"bottom\" : \"top\"), T = h ? \"right\" : \"center\";\n                      var O = i.getPixelForTick(r) + e.aliasPixel(c);\n                      D = i.getPixelForTick(r, u.offsetGridLines) + d.labelOffset, I = h ? i.top + 12 : \"top\" === n.position ? i.bottom - y : i.top + y, p = b = x = M = O, m = V, v = L, w = a.top, C = a.bottom;\n                    } else {\n                      \"left\" === n.position ? d.mirror ? (D = i.right + d.padding, T = \"left\") : (D = i.right - d.padding, T = \"right\") : d.mirror ? (D = i.left - d.padding, T = \"right\") : (D = i.left + d.padding, T = \"left\");\n                      var B = i.getPixelForTick(r);\n                      B += e.aliasPixel(c), I = i.getPixelForTick(r, u.offsetGridLines), p = _, b = R, x = a.left, M = a.right, m = v = w = C = B;\n                    }\n\n                    F.push({\n                      tx1: p,\n                      ty1: m,\n                      tx2: b,\n                      ty2: v,\n                      x1: x,\n                      y1: w,\n                      x2: M,\n                      y2: C,\n                      labelX: D,\n                      labelY: I,\n                      glWidth: c,\n                      glColor: f,\n                      glBorderDash: k,\n                      glBorderDashOffset: S,\n                      rotation: -1 * A,\n                      label: t,\n                      textBaseline: P,\n                      textAlign: T\n                    });\n                  }\n                }\n              }), e.each(F, function (t) {\n                if (u.display && (l.save(), l.lineWidth = t.glWidth, l.strokeStyle = t.glColor, l.setLineDash && (l.setLineDash(t.glBorderDash), l.lineDashOffset = t.glBorderDashOffset), l.beginPath(), u.drawTicks && (l.moveTo(t.tx1, t.ty1), l.lineTo(t.tx2, t.ty2)), u.drawOnChartArea && (l.moveTo(t.x1, t.y1), l.lineTo(t.x2, t.y2)), l.stroke(), l.restore()), d.display) {\n                  l.save(), l.translate(t.labelX, t.labelY), l.rotate(t.rotation), l.font = x, l.textBaseline = t.textBaseline, l.textAlign = t.textAlign;\n                  var a = t.label;\n                  if (e.isArray(a)) for (var i = 0, n = -(a.length - 1) * m * 0.75; i < a.length; ++i) {\n                    l.fillText(\"\" + a[i], 0, n), n += 1.5 * m;\n                  } else l.fillText(a, 0, 0);\n                  l.restore();\n                }\n              }), c.display) {\n                var O,\n                    B,\n                    W = 0;\n                if (g) O = i.left + (i.right - i.left) / 2, B = \"bottom\" === n.position ? i.bottom - M / 2 : i.top + M / 2;else {\n                  var z = \"left\" === n.position;\n                  O = z ? i.left + M / 2 : i.right - M / 2, B = i.top + (i.bottom - i.top) / 2, W = z ? -0.5 * Math.PI : 0.5 * Math.PI;\n                }\n                l.save(), l.translate(O, B), l.rotate(W), l.textAlign = \"center\", l.textBaseline = \"middle\", l.fillStyle = w, l.font = I, l.fillText(c.labelString, 0, 0), l.restore();\n              }\n\n              if (u.drawBorder) {\n                l.lineWidth = e.getValueAtIndexOrDefault(u.lineWidth, 0), l.strokeStyle = e.getValueAtIndexOrDefault(u.color, 0);\n                var N = i.left,\n                    E = i.right,\n                    H = i.top,\n                    U = i.bottom,\n                    j = e.aliasPixel(l.lineWidth);\n                g ? (H = U = \"top\" === n.position ? i.bottom : i.top, H += j, U += j) : (N = E = \"left\" === n.position ? i.right : i.left, N += j, E += j), l.beginPath(), l.moveTo(N, H), l.lineTo(E, U), l.stroke();\n              }\n            }\n          }\n        });\n      };\n    }, {}],\n    33: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.scaleService = {\n          constructors: {},\n          defaults: {},\n          registerScaleType: function registerScaleType(t, a, i) {\n            this.constructors[t] = a, this.defaults[t] = e.clone(i);\n          },\n          getScaleConstructor: function getScaleConstructor(t) {\n            return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0;\n          },\n          getScaleDefaults: function getScaleDefaults(a) {\n            return this.defaults.hasOwnProperty(a) ? e.scaleMerge(t.defaults.scale, this.defaults[a]) : {};\n          },\n          updateScaleDefaults: function updateScaleDefaults(t, a) {\n            var i = this.defaults;\n            i.hasOwnProperty(t) && (i[t] = e.extend(i[t], a));\n          },\n          addScalesToLayout: function addScalesToLayout(a) {\n            e.each(a.scales, function (e) {\n              t.layoutService.addBox(a, e);\n            });\n          }\n        };\n      };\n    }, {}],\n    34: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.Ticks = {\n          generators: {\n            linear: function linear(t, a) {\n              var i,\n                  n = [];\n              if (t.stepSize && t.stepSize > 0) i = t.stepSize;else {\n                var o = e.niceNum(a.max - a.min, !1);\n                i = e.niceNum(o / (t.maxTicks - 1), !0);\n              }\n              var r = Math.floor(a.min / i) * i,\n                  l = Math.ceil(a.max / i) * i;\n\n              if (t.min && t.max && t.stepSize) {\n                var s = (t.max - t.min) % t.stepSize === 0;\n                s && (r = t.min, l = t.max);\n              }\n\n              var d = (l - r) / i;\n              d = e.almostEquals(d, Math.round(d), i / 1e3) ? Math.round(d) : Math.ceil(d), n.push(void 0 !== t.min ? t.min : r);\n\n              for (var u = 1; d > u; ++u) {\n                n.push(r + u * i);\n              }\n\n              return n.push(void 0 !== t.max ? t.max : l), n;\n            },\n            logarithmic: function logarithmic(t, a) {\n              for (var i = [], n = e.getValueOrDefault, o = n(t.min, Math.pow(10, Math.floor(e.log10(a.min)))); o < a.max;) {\n                i.push(o);\n                var r, l;\n                0 === o ? (r = Math.floor(e.log10(a.minNotZero)), l = Math.round(a.minNotZero / Math.pow(10, r))) : (r = Math.floor(e.log10(o)), l = Math.floor(o / Math.pow(10, r)) + 1), 10 === l && (l = 1, ++r), o = l * Math.pow(10, r);\n              }\n\n              var s = n(t.max, o);\n              return i.push(s), i;\n            }\n          },\n          formatters: {\n            values: function values(t) {\n              return e.isArray(t) ? t : \"\" + t;\n            },\n            linear: function linear(t, a, i) {\n              var n = i.length > 3 ? i[2] - i[1] : i[1] - i[0];\n              Math.abs(n) > 1 && t !== Math.floor(t) && (n = t - Math.floor(t));\n              var o = e.log10(Math.abs(n)),\n                  r = \"\";\n\n              if (0 !== t) {\n                var l = -1 * Math.floor(o);\n                l = Math.max(Math.min(l, 20), 0), r = t.toFixed(l);\n              } else r = \"0\";\n\n              return r;\n            },\n            logarithmic: function logarithmic(t, a, i) {\n              var n = t / Math.pow(10, Math.floor(e.log10(t)));\n              return 0 === t ? \"0\" : 1 === n || 2 === n || 5 === n || 0 === a || a === i.length - 1 ? t.toExponential() : \"\";\n            }\n          }\n        };\n      };\n    }, {}],\n    35: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.global.title = {\n          display: !1,\n          position: \"top\",\n          fullWidth: !0,\n          fontStyle: \"bold\",\n          padding: 10,\n          text: \"\"\n        };\n        var a = e.noop;\n        t.Title = t.Element.extend({\n          initialize: function initialize(a) {\n            var i = this;\n            e.extend(i, a), i.options = e.configMerge(t.defaults.global.title, a.options), i.legendHitBoxes = [];\n          },\n          beforeUpdate: function beforeUpdate() {\n            var a = this.chart.options;\n            a && a.title && (this.options = e.configMerge(t.defaults.global.title, a.title));\n          },\n          update: function update(t, e, a) {\n            var i = this;\n            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = a, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n          },\n          afterUpdate: a,\n          beforeSetDimensions: a,\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n              width: 0,\n              height: 0\n            };\n          },\n          afterSetDimensions: a,\n          beforeBuildLabels: a,\n          buildLabels: a,\n          afterBuildLabels: a,\n          beforeFit: a,\n          fit: function fit() {\n            var a = this,\n                i = e.getValueOrDefault,\n                n = a.options,\n                o = t.defaults.global,\n                r = n.display,\n                l = i(n.fontSize, o.defaultFontSize),\n                s = a.minSize;\n            a.isHorizontal() ? (s.width = a.maxWidth, s.height = r ? l + 2 * n.padding : 0) : (s.width = r ? l + 2 * n.padding : 0, s.height = a.maxHeight), a.width = s.width, a.height = s.height;\n          },\n          afterFit: a,\n          isHorizontal: function isHorizontal() {\n            var t = this.options.position;\n            return \"top\" === t || \"bottom\" === t;\n          },\n          draw: function draw() {\n            var a = this,\n                i = a.ctx,\n                n = e.getValueOrDefault,\n                o = a.options,\n                r = t.defaults.global;\n\n            if (o.display) {\n              var l,\n                  s,\n                  d,\n                  u = n(o.fontSize, r.defaultFontSize),\n                  c = n(o.fontStyle, r.defaultFontStyle),\n                  h = n(o.fontFamily, r.defaultFontFamily),\n                  f = e.fontString(u, c, h),\n                  g = 0,\n                  p = a.top,\n                  m = a.left,\n                  b = a.bottom,\n                  v = a.right;\n              i.fillStyle = n(o.fontColor, r.defaultFontColor), i.font = f, a.isHorizontal() ? (l = m + (v - m) / 2, s = p + (b - p) / 2, d = v - m) : (l = \"left\" === o.position ? m + u / 2 : v - u / 2, s = p + (b - p) / 2, d = b - p, g = Math.PI * (\"left\" === o.position ? -0.5 : 0.5)), i.save(), i.translate(l, s), i.rotate(g), i.textAlign = \"center\", i.textBaseline = \"middle\", i.fillText(o.text, 0, 0, d), i.restore();\n            }\n          }\n        }), t.plugins.register({\n          beforeInit: function beforeInit(e) {\n            var a = e.options,\n                i = a.title;\n            i && (e.titleBlock = new t.Title({\n              ctx: e.chart.ctx,\n              options: i,\n              chart: e\n            }), t.layoutService.addBox(e, e.titleBlock));\n          }\n        });\n      };\n    }, {}],\n    36: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a = s.color(t);\n          return a.alpha(e * a.alpha()).rgbaString();\n        }\n\n        function a(t, e) {\n          return e && (s.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;\n        }\n\n        function i(t) {\n          var e = t._xScale,\n              a = t._yScale || t._scale,\n              i = t._index,\n              n = t._datasetIndex;\n          return {\n            xLabel: e ? e.getLabelForIndex(i, n) : \"\",\n            yLabel: a ? a.getLabelForIndex(i, n) : \"\",\n            index: i,\n            datasetIndex: n,\n            x: t._model.x,\n            y: t._model.y\n          };\n        }\n\n        function n(e) {\n          var a = t.defaults.global,\n              i = s.getValueOrDefault;\n          return {\n            xPadding: e.xPadding,\n            yPadding: e.yPadding,\n            xAlign: e.xAlign,\n            yAlign: e.yAlign,\n            bodyFontColor: e.bodyFontColor,\n            _bodyFontFamily: i(e.bodyFontFamily, a.defaultFontFamily),\n            _bodyFontStyle: i(e.bodyFontStyle, a.defaultFontStyle),\n            _bodyAlign: e.bodyAlign,\n            bodyFontSize: i(e.bodyFontSize, a.defaultFontSize),\n            bodySpacing: e.bodySpacing,\n            titleFontColor: e.titleFontColor,\n            _titleFontFamily: i(e.titleFontFamily, a.defaultFontFamily),\n            _titleFontStyle: i(e.titleFontStyle, a.defaultFontStyle),\n            titleFontSize: i(e.titleFontSize, a.defaultFontSize),\n            _titleAlign: e.titleAlign,\n            titleSpacing: e.titleSpacing,\n            titleMarginBottom: e.titleMarginBottom,\n            footerFontColor: e.footerFontColor,\n            _footerFontFamily: i(e.footerFontFamily, a.defaultFontFamily),\n            _footerFontStyle: i(e.footerFontStyle, a.defaultFontStyle),\n            footerFontSize: i(e.footerFontSize, a.defaultFontSize),\n            _footerAlign: e.footerAlign,\n            footerSpacing: e.footerSpacing,\n            footerMarginTop: e.footerMarginTop,\n            caretSize: e.caretSize,\n            cornerRadius: e.cornerRadius,\n            backgroundColor: e.backgroundColor,\n            opacity: 0,\n            legendColorBackground: e.multiKeyBackground,\n            displayColors: e.displayColors\n          };\n        }\n\n        function o(t, e) {\n          var a = t._chart.ctx,\n              i = 2 * e.yPadding,\n              n = 0,\n              o = e.body,\n              r = o.reduce(function (t, e) {\n            return t + e.before.length + e.lines.length + e.after.length;\n          }, 0);\n          r += e.beforeBody.length + e.afterBody.length;\n          var l = e.title.length,\n              d = e.footer.length,\n              u = e.titleFontSize,\n              c = e.bodyFontSize,\n              h = e.footerFontSize;\n          i += l * u, i += l ? (l - 1) * e.titleSpacing : 0, i += l ? e.titleMarginBottom : 0, i += r * c, i += r ? (r - 1) * e.bodySpacing : 0, i += d ? e.footerMarginTop : 0, i += d * h, i += d ? (d - 1) * e.footerSpacing : 0;\n\n          var f = 0,\n              g = function g(t) {\n            n = Math.max(n, a.measureText(t).width + f);\n          };\n\n          return a.font = s.fontString(u, e._titleFontStyle, e._titleFontFamily), s.each(e.title, g), a.font = s.fontString(c, e._bodyFontStyle, e._bodyFontFamily), s.each(e.beforeBody.concat(e.afterBody), g), f = e.displayColors ? c + 2 : 0, s.each(o, function (t) {\n            s.each(t.before, g), s.each(t.lines, g), s.each(t.after, g);\n          }), f = 0, a.font = s.fontString(h, e._footerFontStyle, e._footerFontFamily), s.each(e.footer, g), n += 2 * e.xPadding, {\n            width: n,\n            height: i\n          };\n        }\n\n        function r(t, e) {\n          var a = t._model,\n              i = t._chart,\n              n = t._chartInstance.chartArea,\n              o = \"center\",\n              r = \"center\";\n          a.y < e.height ? r = \"top\" : a.y > i.height - e.height && (r = \"bottom\");\n          var l,\n              s,\n              d,\n              u,\n              c,\n              h = (n.left + n.right) / 2,\n              f = (n.top + n.bottom) / 2;\n          \"center\" === r ? (l = function l(t) {\n            return h >= t;\n          }, s = function s(t) {\n            return t > h;\n          }) : (l = function l(t) {\n            return t <= e.width / 2;\n          }, s = function s(t) {\n            return t >= i.width - e.width / 2;\n          }), d = function d(t) {\n            return t + e.width > i.width;\n          }, u = function u(t) {\n            return t - e.width < 0;\n          }, c = function c(t) {\n            return f >= t ? \"top\" : \"bottom\";\n          }, l(a.x) ? (o = \"left\", d(a.x) && (o = \"center\", r = c(a.y))) : s(a.x) && (o = \"right\", u(a.x) && (o = \"center\", r = c(a.y)));\n          var g = t._options;\n          return {\n            xAlign: g.xAlign ? g.xAlign : o,\n            yAlign: g.yAlign ? g.yAlign : r\n          };\n        }\n\n        function l(t, e, a) {\n          var i = t.x,\n              n = t.y,\n              o = t.caretSize,\n              r = t.caretPadding,\n              l = t.cornerRadius,\n              s = a.xAlign,\n              d = a.yAlign,\n              u = o + r,\n              c = l + r;\n          return \"right\" === s ? i -= e.width : \"center\" === s && (i -= e.width / 2), \"top\" === d ? n += u : n -= \"bottom\" === d ? e.height + u : e.height / 2, \"center\" === d ? \"left\" === s ? i += u : \"right\" === s && (i -= u) : \"left\" === s ? i -= c : \"right\" === s && (i += c), {\n            x: i,\n            y: n\n          };\n        }\n\n        var s = t.helpers;\n        t.defaults.global.tooltips = {\n          enabled: !0,\n          custom: null,\n          mode: \"nearest\",\n          position: \"average\",\n          intersect: !0,\n          backgroundColor: \"rgba(0,0,0,0.8)\",\n          titleFontStyle: \"bold\",\n          titleSpacing: 2,\n          titleMarginBottom: 6,\n          titleFontColor: \"#fff\",\n          titleAlign: \"left\",\n          bodySpacing: 2,\n          bodyFontColor: \"#fff\",\n          bodyAlign: \"left\",\n          footerFontStyle: \"bold\",\n          footerSpacing: 2,\n          footerMarginTop: 6,\n          footerFontColor: \"#fff\",\n          footerAlign: \"left\",\n          yPadding: 6,\n          xPadding: 6,\n          caretSize: 5,\n          cornerRadius: 6,\n          multiKeyBackground: \"#fff\",\n          displayColors: !0,\n          callbacks: {\n            beforeTitle: s.noop,\n            title: function title(t, e) {\n              var a = \"\",\n                  i = e.labels,\n                  n = i ? i.length : 0;\n\n              if (t.length > 0) {\n                var o = t[0];\n                o.xLabel ? a = o.xLabel : n > 0 && o.index < n && (a = i[o.index]);\n              }\n\n              return a;\n            },\n            afterTitle: s.noop,\n            beforeBody: s.noop,\n            beforeLabel: s.noop,\n            label: function label(t, e) {\n              var a = e.datasets[t.datasetIndex].label || \"\";\n              return a + \": \" + t.yLabel;\n            },\n            labelColor: function labelColor(t, e) {\n              var a = e.getDatasetMeta(t.datasetIndex),\n                  i = a.data[t.index],\n                  n = i._view;\n              return {\n                borderColor: n.borderColor,\n                backgroundColor: n.backgroundColor\n              };\n            },\n            afterLabel: s.noop,\n            afterBody: s.noop,\n            beforeFooter: s.noop,\n            footer: s.noop,\n            afterFooter: s.noop\n          }\n        }, t.Tooltip = t.Element.extend({\n          initialize: function initialize() {\n            this._model = n(this._options);\n          },\n          getTitle: function getTitle() {\n            var t = this,\n                e = t._options,\n                i = e.callbacks,\n                n = i.beforeTitle.apply(t, arguments),\n                o = i.title.apply(t, arguments),\n                r = i.afterTitle.apply(t, arguments),\n                l = [];\n            return l = a(l, n), l = a(l, o), l = a(l, r);\n          },\n          getBeforeBody: function getBeforeBody() {\n            var t = this._options.callbacks.beforeBody.apply(this, arguments);\n\n            return s.isArray(t) ? t : void 0 !== t ? [t] : [];\n          },\n          getBody: function getBody(t, e) {\n            var i = this,\n                n = i._options.callbacks,\n                o = [];\n            return s.each(t, function (t) {\n              var r = {\n                before: [],\n                lines: [],\n                after: []\n              };\n              a(r.before, n.beforeLabel.call(i, t, e)), a(r.lines, n.label.call(i, t, e)), a(r.after, n.afterLabel.call(i, t, e)), o.push(r);\n            }), o;\n          },\n          getAfterBody: function getAfterBody() {\n            var t = this._options.callbacks.afterBody.apply(this, arguments);\n\n            return s.isArray(t) ? t : void 0 !== t ? [t] : [];\n          },\n          getFooter: function getFooter() {\n            var t = this,\n                e = t._options.callbacks,\n                i = e.beforeFooter.apply(t, arguments),\n                n = e.footer.apply(t, arguments),\n                o = e.afterFooter.apply(t, arguments),\n                r = [];\n            return r = a(r, i), r = a(r, n), r = a(r, o);\n          },\n          update: function update(e) {\n            var a,\n                d,\n                u = this,\n                c = u._options,\n                h = u._model,\n                f = u._model = n(c),\n                g = u._active,\n                p = u._data,\n                m = u._chartInstance,\n                b = {\n              xAlign: h.xAlign,\n              yAlign: h.yAlign\n            },\n                v = {\n              x: h.x,\n              y: h.y\n            },\n                x = {\n              width: h.width,\n              height: h.height\n            },\n                y = {\n              x: h.caretX,\n              y: h.caretY\n            };\n\n            if (g.length) {\n              f.opacity = 1;\n              var k = [];\n              y = t.Tooltip.positioners[c.position](g, u._eventPosition);\n              var S = [];\n\n              for (a = 0, d = g.length; d > a; ++a) {\n                S.push(i(g[a]));\n              }\n\n              c.filter && (S = S.filter(function (t) {\n                return c.filter(t, p);\n              })), c.itemSort && (S = S.sort(function (t, e) {\n                return c.itemSort(t, e, p);\n              })), s.each(S, function (t) {\n                k.push(c.callbacks.labelColor.call(u, t, m));\n              }), f.title = u.getTitle(S, p), f.beforeBody = u.getBeforeBody(S, p), f.body = u.getBody(S, p), f.afterBody = u.getAfterBody(S, p), f.footer = u.getFooter(S, p), f.x = Math.round(y.x), f.y = Math.round(y.y), f.caretPadding = s.getValueOrDefault(y.padding, 2), f.labelColors = k, f.dataPoints = S, x = o(this, f), b = r(this, x), v = l(f, x, b);\n            } else f.opacity = 0;\n\n            return f.xAlign = b.xAlign, f.yAlign = b.yAlign, f.x = v.x, f.y = v.y, f.width = x.width, f.height = x.height, f.caretX = y.x, f.caretY = y.y, u._model = f, e && c.custom && c.custom.call(u, f), u;\n          },\n          drawCaret: function drawCaret(t, a, i) {\n            var n,\n                o,\n                r,\n                l,\n                s,\n                d,\n                u = this._view,\n                c = this._chart.ctx,\n                h = u.caretSize,\n                f = u.cornerRadius,\n                g = u.xAlign,\n                p = u.yAlign,\n                m = t.x,\n                b = t.y,\n                v = a.width,\n                x = a.height;\n            \"center\" === p ? (\"left\" === g ? (n = m, o = n - h, r = n) : (n = m + v, o = n + h, r = n), s = b + x / 2, l = s - h, d = s + h) : (\"left\" === g ? (n = m + f, o = n + h, r = o + h) : \"right\" === g ? (n = m + v - f, o = n - h, r = o - h) : (o = m + v / 2, n = o - h, r = o + h), \"top\" === p ? (l = b, s = l - h, d = l) : (l = b + x, s = l + h, d = l)), c.fillStyle = e(u.backgroundColor, i), c.beginPath(), c.moveTo(n, l), c.lineTo(o, s), c.lineTo(r, d), c.closePath(), c.fill();\n          },\n          drawTitle: function drawTitle(t, a, i, n) {\n            var o = a.title;\n\n            if (o.length) {\n              i.textAlign = a._titleAlign, i.textBaseline = \"top\";\n              var r = a.titleFontSize,\n                  l = a.titleSpacing;\n              i.fillStyle = e(a.titleFontColor, n), i.font = s.fontString(r, a._titleFontStyle, a._titleFontFamily);\n              var d, u;\n\n              for (d = 0, u = o.length; u > d; ++d) {\n                i.fillText(o[d], t.x, t.y), t.y += r + l, d + 1 === o.length && (t.y += a.titleMarginBottom - l);\n              }\n            }\n          },\n          drawBody: function drawBody(t, a, i, n) {\n            var o = a.bodyFontSize,\n                r = a.bodySpacing,\n                l = a.body;\n            i.textAlign = a._bodyAlign, i.textBaseline = \"top\";\n            var d = e(a.bodyFontColor, n);\n            i.fillStyle = d, i.font = s.fontString(o, a._bodyFontStyle, a._bodyFontFamily);\n\n            var u = 0,\n                c = function c(e) {\n              i.fillText(e, t.x + u, t.y), t.y += o + r;\n            };\n\n            s.each(a.beforeBody, c);\n            var h = a.displayColors;\n            u = h ? o + 2 : 0, s.each(l, function (r, l) {\n              s.each(r.before, c), s.each(r.lines, function (r) {\n                h && (i.fillStyle = e(a.legendColorBackground, n), i.fillRect(t.x, t.y, o, o), i.strokeStyle = e(a.labelColors[l].borderColor, n), i.strokeRect(t.x, t.y, o, o), i.fillStyle = e(a.labelColors[l].backgroundColor, n), i.fillRect(t.x + 1, t.y + 1, o - 2, o - 2), i.fillStyle = d), c(r);\n              }), s.each(r.after, c);\n            }), u = 0, s.each(a.afterBody, c), t.y -= r;\n          },\n          drawFooter: function drawFooter(t, a, i, n) {\n            var o = a.footer;\n            o.length && (t.y += a.footerMarginTop, i.textAlign = a._footerAlign, i.textBaseline = \"top\", i.fillStyle = e(a.footerFontColor, n), i.font = s.fontString(a.footerFontSize, a._footerFontStyle, a._footerFontFamily), s.each(o, function (e) {\n              i.fillText(e, t.x, t.y), t.y += a.footerFontSize + a.footerSpacing;\n            }));\n          },\n          drawBackground: function drawBackground(t, a, i, n, o) {\n            i.fillStyle = e(a.backgroundColor, o), s.drawRoundedRectangle(i, t.x, t.y, n.width, n.height, a.cornerRadius), i.fill();\n          },\n          draw: function draw() {\n            var t = this._chart.ctx,\n                e = this._view;\n\n            if (0 !== e.opacity) {\n              var a = {\n                width: e.width,\n                height: e.height\n              },\n                  i = {\n                x: e.x,\n                y: e.y\n              },\n                  n = Math.abs(e.opacity < 0.001) ? 0 : e.opacity;\n              this._options.enabled && (this.drawBackground(i, e, t, a, n), this.drawCaret(i, a, n), i.x += e.xPadding, i.y += e.yPadding, this.drawTitle(i, e, t, n), this.drawBody(i, e, t, n), this.drawFooter(i, e, t, n));\n            }\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                a = e._options,\n                i = !1;\n\n            if (e._lastActive = e._lastActive || [], \"mouseout\" === t.type ? e._active = [] : e._active = e._chartInstance.getElementsAtEventForMode(t, a.mode, a), i = !s.arrayEquals(e._active, e._lastActive), e._lastActive = e._active, a.enabled || a.custom) {\n              e._eventPosition = s.getRelativePosition(t, e._chart);\n              var n = e._model;\n              e.update(!0), e.pivot(), i |= n.x !== e._model.x || n.y !== e._model.y;\n            }\n\n            return i;\n          }\n        }), t.Tooltip.positioners = {\n          average: function average(t) {\n            if (!t.length) return !1;\n            var e,\n                a,\n                i = 0,\n                n = 0,\n                o = 0;\n\n            for (e = 0, a = t.length; a > e; ++e) {\n              var r = t[e];\n\n              if (r && r.hasValue()) {\n                var l = r.tooltipPosition();\n                i += l.x, n += l.y, ++o;\n              }\n            }\n\n            return {\n              x: Math.round(i / o),\n              y: Math.round(n / o)\n            };\n          },\n          nearest: function nearest(t, e) {\n            var a,\n                i,\n                n,\n                o = e.x,\n                r = e.y,\n                l = Number.POSITIVE_INFINITY;\n\n            for (i = 0, n = t.length; n > i; ++i) {\n              var d = t[i];\n\n              if (d && d.hasValue()) {\n                var u = d.getCenterPoint(),\n                    c = s.distanceBetweenPoints(e, u);\n                l > c && (l = c, a = d);\n              }\n            }\n\n            if (a) {\n              var h = a.tooltipPosition();\n              o = h.x, r = h.y;\n            }\n\n            return {\n              x: o,\n              y: r\n            };\n          }\n        };\n      };\n    }, {}],\n    37: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global;\n        a.elements.arc = {\n          backgroundColor: a.defaultColor,\n          borderColor: \"#fff\",\n          borderWidth: 2\n        }, t.elements.Arc = t.Element.extend({\n          inLabelRange: function inLabelRange(t) {\n            var e = this._view;\n            return e ? Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2) : !1;\n          },\n          inRange: function inRange(t, a) {\n            var i = this._view;\n\n            if (i) {\n              for (var n = e.getAngleFromPoint(i, {\n                x: t,\n                y: a\n              }), o = n.angle, r = n.distance, l = i.startAngle, s = i.endAngle; l > s;) {\n                s += 2 * Math.PI;\n              }\n\n              for (; o > s;) {\n                o -= 2 * Math.PI;\n              }\n\n              for (; l > o;) {\n                o += 2 * Math.PI;\n              }\n\n              var d = o >= l && s >= o,\n                  u = r >= i.innerRadius && r <= i.outerRadius;\n              return d && u;\n            }\n\n            return !1;\n          },\n          getCenterPoint: function getCenterPoint() {\n            var t = this._view,\n                e = (t.startAngle + t.endAngle) / 2,\n                a = (t.innerRadius + t.outerRadius) / 2;\n            return {\n              x: t.x + Math.cos(e) * a,\n              y: t.y + Math.sin(e) * a\n            };\n          },\n          getArea: function getArea() {\n            var t = this._view;\n            return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2));\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view,\n                e = t.startAngle + (t.endAngle - t.startAngle) / 2,\n                a = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius;\n            return {\n              x: t.x + Math.cos(e) * a,\n              y: t.y + Math.sin(e) * a\n            };\n          },\n          draw: function draw() {\n            var t = this._chart.ctx,\n                e = this._view,\n                a = e.startAngle,\n                i = e.endAngle;\n            t.beginPath(), t.arc(e.x, e.y, e.outerRadius, a, i), t.arc(e.x, e.y, e.innerRadius, i, a, !0), t.closePath(), t.strokeStyle = e.borderColor, t.lineWidth = e.borderWidth, t.fillStyle = e.backgroundColor, t.fill(), t.lineJoin = \"bevel\", e.borderWidth && t.stroke();\n          }\n        });\n      };\n    }, {}],\n    38: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global;\n        t.defaults.global.elements.line = {\n          tension: 0.4,\n          backgroundColor: a.defaultColor,\n          borderWidth: 3,\n          borderColor: a.defaultColor,\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0,\n          borderJoinStyle: \"miter\",\n          capBezierPoints: !0,\n          fill: !0\n        }, t.elements.Line = t.Element.extend({\n          draw: function draw() {\n            function t(t, e) {\n              var a = e._view;\n              e._view.steppedLine === !0 ? (s.lineTo(a.x, t._view.y), s.lineTo(a.x, a.y)) : 0 === e._view.tension ? s.lineTo(a.x, a.y) : s.bezierCurveTo(t._view.controlPointNextX, t._view.controlPointNextY, a.controlPointPreviousX, a.controlPointPreviousY, a.x, a.y);\n            }\n\n            var i = this,\n                n = i._view,\n                o = n.spanGaps,\n                r = n.scaleZero,\n                l = i._loop;\n            l || (\"top\" === n.fill ? r = n.scaleTop : \"bottom\" === n.fill && (r = n.scaleBottom));\n            var s = i._chart.ctx;\n            s.save();\n\n            var d = i._children.slice(),\n                u = -1;\n\n            l && d.length && d.push(d[0]);\n            var c, h, f, g;\n\n            if (d.length && n.fill) {\n              for (s.beginPath(), c = 0; c < d.length; ++c) {\n                h = d[c], f = e.previousItem(d, c), g = h._view, 0 === c ? (l ? s.moveTo(r.x, r.y) : s.moveTo(g.x, r), g.skip || (u = c, s.lineTo(g.x, g.y))) : (f = -1 === u ? f : d[u], g.skip ? o || u !== c - 1 || (l ? s.lineTo(r.x, r.y) : s.lineTo(f._view.x, r)) : (u !== c - 1 ? o && -1 !== u ? t(f, h) : l ? s.lineTo(g.x, g.y) : (s.lineTo(g.x, r), s.lineTo(g.x, g.y)) : t(f, h), u = c));\n              }\n\n              l || -1 === u || s.lineTo(d[u]._view.x, r), s.fillStyle = n.backgroundColor || a.defaultColor, s.closePath(), s.fill();\n            }\n\n            var p = a.elements.line;\n\n            for (s.lineCap = n.borderCapStyle || p.borderCapStyle, s.setLineDash && s.setLineDash(n.borderDash || p.borderDash), s.lineDashOffset = n.borderDashOffset || p.borderDashOffset, s.lineJoin = n.borderJoinStyle || p.borderJoinStyle, s.lineWidth = n.borderWidth || p.borderWidth, s.strokeStyle = n.borderColor || a.defaultColor, s.beginPath(), u = -1, c = 0; c < d.length; ++c) {\n              h = d[c], f = e.previousItem(d, c), g = h._view, 0 === c ? g.skip || (s.moveTo(g.x, g.y), u = c) : (f = -1 === u ? f : d[u], g.skip || (u !== c - 1 && !o || -1 === u ? s.moveTo(g.x, g.y) : t(f, h), u = c));\n            }\n\n            s.stroke(), s.restore();\n          }\n        });\n      };\n    }, {}],\n    39: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t) {\n          var e = this._view;\n          return e ? Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hitRadius, 2) : !1;\n        }\n\n        function a(t) {\n          var e = this._view;\n          return e ? Math.pow(t - e.y, 2) < Math.pow(e.radius + e.hitRadius, 2) : !1;\n        }\n\n        var i = t.helpers,\n            n = t.defaults.global,\n            o = n.defaultColor;\n        n.elements.point = {\n          radius: 3,\n          pointStyle: \"circle\",\n          backgroundColor: o,\n          borderWidth: 1,\n          borderColor: o,\n          hitRadius: 1,\n          hoverRadius: 4,\n          hoverBorderWidth: 1\n        }, t.elements.Point = t.Element.extend({\n          inRange: function inRange(t, e) {\n            var a = this._view;\n            return a ? Math.pow(t - a.x, 2) + Math.pow(e - a.y, 2) < Math.pow(a.hitRadius + a.radius, 2) : !1;\n          },\n          inLabelRange: e,\n          inXRange: e,\n          inYRange: a,\n          getCenterPoint: function getCenterPoint() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y\n            };\n          },\n          getArea: function getArea() {\n            return Math.PI * Math.pow(this._view.radius, 2);\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y,\n              padding: t.radius + t.borderWidth\n            };\n          },\n          draw: function draw() {\n            var e = this._view,\n                a = this._chart.ctx,\n                r = e.pointStyle,\n                l = e.radius,\n                s = e.x,\n                d = e.y;\n            e.skip || (a.strokeStyle = e.borderColor || o, a.lineWidth = i.getValueOrDefault(e.borderWidth, n.elements.point.borderWidth), a.fillStyle = e.backgroundColor || o, t.canvasHelpers.drawPoint(a, r, l, s, d));\n          }\n        });\n      };\n    }, {}],\n    40: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t) {\n          return void 0 !== t._view.width;\n        }\n\n        function a(t) {\n          var a,\n              i,\n              n,\n              o,\n              r = t._view;\n\n          if (e(t)) {\n            var l = r.width / 2;\n            a = r.x - l, i = r.x + l, n = Math.min(r.y, r.base), o = Math.max(r.y, r.base);\n          } else {\n            var s = r.height / 2;\n            a = Math.min(r.x, r.base), i = Math.max(r.x, r.base), n = r.y - s, o = r.y + s;\n          }\n\n          return {\n            left: a,\n            top: n,\n            right: i,\n            bottom: o\n          };\n        }\n\n        var i = t.defaults.global;\n        i.elements.rectangle = {\n          backgroundColor: i.defaultColor,\n          borderWidth: 0,\n          borderColor: i.defaultColor,\n          borderSkipped: \"bottom\"\n        }, t.elements.Rectangle = t.Element.extend({\n          draw: function draw() {\n            function t(t) {\n              return s[(u + t) % 4];\n            }\n\n            var e = this._chart.ctx,\n                a = this._view,\n                i = a.width / 2,\n                n = a.x - i,\n                o = a.x + i,\n                r = a.base - (a.base - a.y),\n                l = a.borderWidth / 2;\n            a.borderWidth && (n += l, o -= l, r += l), e.beginPath(), e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth;\n            var s = [[n, a.base], [n, r], [o, r], [o, a.base]],\n                d = [\"bottom\", \"left\", \"top\", \"right\"],\n                u = d.indexOf(a.borderSkipped, 0);\n            -1 === u && (u = 0);\n            var c = t(0);\n            e.moveTo(c[0], c[1]);\n\n            for (var h = 1; 4 > h; h++) {\n              c = t(h), e.lineTo(c[0], c[1]);\n            }\n\n            e.fill(), a.borderWidth && e.stroke();\n          },\n          height: function height() {\n            var t = this._view;\n            return t.base - t.y;\n          },\n          inRange: function inRange(t, e) {\n            var i = !1;\n\n            if (this._view) {\n              var n = a(this);\n              i = t >= n.left && t <= n.right && e >= n.top && e <= n.bottom;\n            }\n\n            return i;\n          },\n          inLabelRange: function inLabelRange(t, i) {\n            var n = this;\n            if (!n._view) return !1;\n            var o = !1,\n                r = a(n);\n            return o = e(n) ? t >= r.left && t <= r.right : i >= r.top && i <= r.bottom;\n          },\n          inXRange: function inXRange(t) {\n            var e = a(this);\n            return t >= e.left && t <= e.right;\n          },\n          inYRange: function inYRange(t) {\n            var e = a(this);\n            return t >= e.top && t <= e.bottom;\n          },\n          getCenterPoint: function getCenterPoint() {\n            var t,\n                a,\n                i = this._view;\n            return e(this) ? (t = i.x, a = (i.y + i.base) / 2) : (t = (i.x + i.base) / 2, a = i.y), {\n              x: t,\n              y: a\n            };\n          },\n          getArea: function getArea() {\n            var t = this._view;\n            return t.width * Math.abs(t.y - t.base);\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y\n            };\n          }\n        });\n      };\n    }, {}],\n    41: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"bottom\"\n        },\n            i = t.Scale.extend({\n          getLabels: function getLabels() {\n            var t = this.chart.data;\n            return (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels;\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this,\n                a = t.getLabels();\n            t.minIndex = 0, t.maxIndex = a.length - 1;\n            var i;\n            void 0 !== t.options.ticks.min && (i = e.indexOf(a, t.options.ticks.min), t.minIndex = -1 !== i ? i : t.minIndex), void 0 !== t.options.ticks.max && (i = e.indexOf(a, t.options.ticks.max), t.maxIndex = -1 !== i ? i : t.maxIndex), t.min = a[t.minIndex], t.max = a[t.maxIndex];\n          },\n          buildTicks: function buildTicks() {\n            var t = this,\n                e = t.getLabels();\n            t.ticks = 0 === t.minIndex && t.maxIndex === e.length - 1 ? e : e.slice(t.minIndex, t.maxIndex + 1);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            var a = this,\n                i = a.chart.data,\n                n = a.isHorizontal();\n            return i.xLabels && n || i.yLabels && !n ? a.getRightValue(i.datasets[e].data[t]) : a.ticks[t];\n          },\n          getPixelForValue: function getPixelForValue(t, e, a, i) {\n            var n = this,\n                o = Math.max(n.maxIndex + 1 - n.minIndex - (n.options.gridLines.offsetGridLines ? 0 : 1), 1);\n\n            if (void 0 !== t && isNaN(e)) {\n              var r = n.getLabels(),\n                  l = r.indexOf(t);\n              e = -1 !== l ? l : e;\n            }\n\n            if (n.isHorizontal()) {\n              var s = n.width - (n.paddingLeft + n.paddingRight),\n                  d = s / o,\n                  u = d * (e - n.minIndex) + n.paddingLeft;\n              return (n.options.gridLines.offsetGridLines && i || n.maxIndex === n.minIndex && i) && (u += d / 2), n.left + Math.round(u);\n            }\n\n            var c = n.height - (n.paddingTop + n.paddingBottom),\n                h = c / o,\n                f = h * (e - n.minIndex) + n.paddingTop;\n            return n.options.gridLines.offsetGridLines && i && (f += h / 2), n.top + Math.round(f);\n          },\n          getPixelForTick: function getPixelForTick(t, e) {\n            return this.getPixelForValue(this.ticks[t], t + this.minIndex, null, e);\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e,\n                a = this,\n                i = Math.max(a.ticks.length - (a.options.gridLines.offsetGridLines ? 0 : 1), 1),\n                n = a.isHorizontal(),\n                o = n ? a.width - (a.paddingLeft + a.paddingRight) : a.height - (a.paddingTop + a.paddingBottom),\n                r = o / i;\n            return t -= n ? a.left : a.top, a.options.gridLines.offsetGridLines && (t -= r / 2), t -= n ? a.paddingLeft : a.paddingTop, e = 0 >= t ? 0 : Math.round(t / r);\n          },\n          getBasePixel: function getBasePixel() {\n            return this.bottom;\n          }\n        });\n        t.scaleService.registerScaleType(\"category\", i, a);\n      };\n    }, {}],\n    42: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"left\",\n          ticks: {\n            callback: t.Ticks.formatters.linear\n          }\n        },\n            i = t.LinearScaleBase.extend({\n          determineDataLimits: function determineDataLimits() {\n            function t(t) {\n              return l ? t.xAxisID === a.id : t.yAxisID === a.id;\n            }\n\n            var a = this,\n                i = a.options,\n                n = a.chart,\n                o = n.data,\n                r = o.datasets,\n                l = a.isHorizontal();\n\n            if (a.min = null, a.max = null, i.stacked) {\n              var s = {};\n              e.each(r, function (o, r) {\n                var l = n.getDatasetMeta(r);\n                void 0 === s[l.type] && (s[l.type] = {\n                  positiveValues: [],\n                  negativeValues: []\n                });\n                var d = s[l.type].positiveValues,\n                    u = s[l.type].negativeValues;\n                n.isDatasetVisible(r) && t(l) && e.each(o.data, function (t, e) {\n                  var n = +a.getRightValue(t);\n                  isNaN(n) || l.data[e].hidden || (d[e] = d[e] || 0, u[e] = u[e] || 0, i.relativePoints ? d[e] = 100 : 0 > n ? u[e] += n : d[e] += n);\n                });\n              }), e.each(s, function (t) {\n                var i = t.positiveValues.concat(t.negativeValues),\n                    n = e.min(i),\n                    o = e.max(i);\n                a.min = null === a.min ? n : Math.min(a.min, n), a.max = null === a.max ? o : Math.max(a.max, o);\n              });\n            } else e.each(r, function (i, o) {\n              var r = n.getDatasetMeta(o);\n              n.isDatasetVisible(o) && t(r) && e.each(i.data, function (t, e) {\n                var i = +a.getRightValue(t);\n                isNaN(i) || r.data[e].hidden || (null === a.min ? a.min = i : i < a.min && (a.min = i), null === a.max ? a.max = i : i > a.max && (a.max = i));\n              });\n            });\n\n            this.handleTickRangeOptions();\n          },\n          getTickLimit: function getTickLimit() {\n            var a,\n                i = this,\n                n = i.options.ticks;\n            if (i.isHorizontal()) a = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(i.width / 50));else {\n              var o = e.getValueOrDefault(n.fontSize, t.defaults.global.defaultFontSize);\n              a = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(i.height / (2 * o)));\n            }\n            return a;\n          },\n          handleDirectionalChanges: function handleDirectionalChanges() {\n            this.isHorizontal() || this.ticks.reverse();\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          getPixelForValue: function getPixelForValue(t) {\n            var e,\n                a,\n                i = this,\n                n = i.paddingLeft,\n                o = i.paddingBottom,\n                r = i.start,\n                l = +i.getRightValue(t),\n                s = i.end - r;\n            return i.isHorizontal() ? (a = i.width - (n + i.paddingRight), e = i.left + a / s * (l - r), Math.round(e + n)) : (a = i.height - (i.paddingTop + o), e = i.bottom - o - a / s * (l - r), Math.round(e));\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e = this,\n                a = e.isHorizontal(),\n                i = e.paddingLeft,\n                n = e.paddingBottom,\n                o = a ? e.width - (i + e.paddingRight) : e.height - (e.paddingTop + n),\n                r = (a ? t - e.left - i : e.bottom - n - t) / o;\n            return e.start + (e.end - e.start) * r;\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.ticksAsNumbers[t]);\n          }\n        });\n        t.scaleService.registerScaleType(\"linear\", i, a);\n      };\n    }, {}],\n    43: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = e.noop;\n        t.LinearScaleBase = t.Scale.extend({\n          handleTickRangeOptions: function handleTickRangeOptions() {\n            var t = this,\n                a = t.options,\n                i = a.ticks;\n\n            if (i.beginAtZero) {\n              var n = e.sign(t.min),\n                  o = e.sign(t.max);\n              0 > n && 0 > o ? t.max = 0 : n > 0 && o > 0 && (t.min = 0);\n            }\n\n            void 0 !== i.min ? t.min = i.min : void 0 !== i.suggestedMin && (t.min = Math.min(t.min, i.suggestedMin)), void 0 !== i.max ? t.max = i.max : void 0 !== i.suggestedMax && (t.max = Math.max(t.max, i.suggestedMax)), t.min === t.max && (t.max++, i.beginAtZero || t.min--);\n          },\n          getTickLimit: a,\n          handleDirectionalChanges: a,\n          buildTicks: function buildTicks() {\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = a.getTickLimit();\n            o = Math.max(2, o);\n            var r = {\n              maxTicks: o,\n              min: n.min,\n              max: n.max,\n              stepSize: e.getValueOrDefault(n.fixedStepSize, n.stepSize)\n            },\n                l = a.ticks = t.Ticks.generators.linear(r, a);\n            a.handleDirectionalChanges(), a.max = e.max(l), a.min = e.min(l), n.reverse ? (l.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var e = this;\n            e.ticksAsNumbers = e.ticks.slice(), e.zeroLineIndex = e.ticks.indexOf(0), t.Scale.prototype.convertTicksToLabels.call(e);\n          }\n        });\n      };\n    }, {}],\n    44: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"left\",\n          ticks: {\n            callback: t.Ticks.formatters.logarithmic\n          }\n        },\n            i = t.Scale.extend({\n          determineDataLimits: function determineDataLimits() {\n            function t(t) {\n              return d ? t.xAxisID === a.id : t.yAxisID === a.id;\n            }\n\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = a.chart,\n                r = o.data,\n                l = r.datasets,\n                s = e.getValueOrDefault,\n                d = a.isHorizontal();\n\n            if (a.min = null, a.max = null, a.minNotZero = null, i.stacked) {\n              var u = {};\n              e.each(l, function (n, r) {\n                var l = o.getDatasetMeta(r);\n                o.isDatasetVisible(r) && t(l) && (void 0 === u[l.type] && (u[l.type] = []), e.each(n.data, function (t, e) {\n                  var n = u[l.type],\n                      o = +a.getRightValue(t);\n                  isNaN(o) || l.data[e].hidden || (n[e] = n[e] || 0, i.relativePoints ? n[e] = 100 : n[e] += o);\n                }));\n              }), e.each(u, function (t) {\n                var i = e.min(t),\n                    n = e.max(t);\n                a.min = null === a.min ? i : Math.min(a.min, i), a.max = null === a.max ? n : Math.max(a.max, n);\n              });\n            } else e.each(l, function (i, n) {\n              var r = o.getDatasetMeta(n);\n              o.isDatasetVisible(n) && t(r) && e.each(i.data, function (t, e) {\n                var i = +a.getRightValue(t);\n                isNaN(i) || r.data[e].hidden || (null === a.min ? a.min = i : i < a.min && (a.min = i), null === a.max ? a.max = i : i > a.max && (a.max = i), 0 !== i && (null === a.minNotZero || i < a.minNotZero) && (a.minNotZero = i));\n              });\n            });\n\n            a.min = s(n.min, a.min), a.max = s(n.max, a.max), a.min === a.max && (0 !== a.min && null !== a.min ? (a.min = Math.pow(10, Math.floor(e.log10(a.min)) - 1), a.max = Math.pow(10, Math.floor(e.log10(a.max)) + 1)) : (a.min = 1, a.max = 10));\n          },\n          buildTicks: function buildTicks() {\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = {\n              min: n.min,\n              max: n.max\n            },\n                r = a.ticks = t.Ticks.generators.logarithmic(o, a);\n            a.isHorizontal() || r.reverse(), a.max = e.max(r), a.min = e.min(r), n.reverse ? (r.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            this.tickValues = this.ticks.slice(), t.Scale.prototype.convertTicksToLabels.call(this);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.tickValues[t]);\n          },\n          getPixelForValue: function getPixelForValue(t) {\n            var a,\n                i,\n                n,\n                o = this,\n                r = o.start,\n                l = +o.getRightValue(t),\n                s = o.paddingTop,\n                d = o.paddingBottom,\n                u = o.paddingLeft,\n                c = o.options,\n                h = c.ticks;\n            return o.isHorizontal() ? (n = e.log10(o.end) - e.log10(r), 0 === l ? i = o.left + u : (a = o.width - (u + o.paddingRight), i = o.left + a / n * (e.log10(l) - e.log10(r)), i += u)) : (a = o.height - (s + d), 0 !== r || h.reverse ? 0 === o.end && h.reverse ? (n = e.log10(o.start) - e.log10(o.minNotZero), i = l === o.end ? o.top + s : l === o.minNotZero ? o.top + s + 0.02 * a : o.top + s + 0.02 * a + 0.98 * a / n * (e.log10(l) - e.log10(o.minNotZero))) : (n = e.log10(o.end) - e.log10(r), a = o.height - (s + d), i = o.bottom - d - a / n * (e.log10(l) - e.log10(r))) : (n = e.log10(o.end) - e.log10(o.minNotZero), i = l === r ? o.bottom - d : l === o.minNotZero ? o.bottom - d - 0.02 * a : o.bottom - d - 0.02 * a - 0.98 * a / n * (e.log10(l) - e.log10(o.minNotZero)))), i;\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var a,\n                i,\n                n = this,\n                o = e.log10(n.end) - e.log10(n.start);\n            return n.isHorizontal() ? (i = n.width - (n.paddingLeft + n.paddingRight), a = n.start * Math.pow(10, (t - n.left - n.paddingLeft) * o / i)) : (i = n.height - (n.paddingTop + n.paddingBottom), a = Math.pow(10, (n.bottom - n.paddingBottom - t) * o / i) / n.start), a;\n          }\n        });\n        t.scaleService.registerScaleType(\"logarithmic\", i, a);\n      };\n    }, {}],\n    45: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global,\n            i = {\n          display: !0,\n          animate: !0,\n          lineArc: !1,\n          position: \"chartArea\",\n          angleLines: {\n            display: !0,\n            color: \"rgba(0, 0, 0, 0.1)\",\n            lineWidth: 1\n          },\n          ticks: {\n            showLabelBackdrop: !0,\n            backdropColor: \"rgba(255,255,255,0.75)\",\n            backdropPaddingY: 2,\n            backdropPaddingX: 2,\n            callback: t.Ticks.formatters.linear\n          },\n          pointLabels: {\n            fontSize: 10,\n            callback: function callback(t) {\n              return t;\n            }\n          }\n        },\n            n = t.LinearScaleBase.extend({\n          getValueCount: function getValueCount() {\n            return this.chart.data.labels.length;\n          },\n          setDimensions: function setDimensions() {\n            var t = this,\n                i = t.options,\n                n = i.ticks;\n            t.width = t.maxWidth, t.height = t.maxHeight, t.xCenter = Math.round(t.width / 2), t.yCenter = Math.round(t.height / 2);\n            var o = e.min([t.height, t.width]),\n                r = e.getValueOrDefault(n.fontSize, a.defaultFontSize);\n            t.drawingArea = i.display ? o / 2 - (r / 2 + n.backdropPaddingY) : o / 2;\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this,\n                a = t.chart;\n            t.min = null, t.max = null, e.each(a.data.datasets, function (i, n) {\n              if (a.isDatasetVisible(n)) {\n                var o = a.getDatasetMeta(n);\n                e.each(i.data, function (e, a) {\n                  var i = +t.getRightValue(e);\n                  isNaN(i) || o.data[a].hidden || (null === t.min ? t.min = i : i < t.min && (t.min = i), null === t.max ? t.max = i : i > t.max && (t.max = i));\n                });\n              }\n            }), t.handleTickRangeOptions();\n          },\n          getTickLimit: function getTickLimit() {\n            var t = this.options.ticks,\n                i = e.getValueOrDefault(t.fontSize, a.defaultFontSize);\n            return Math.min(t.maxTicksLimit ? t.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * i)));\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var e = this;\n            t.LinearScaleBase.prototype.convertTicksToLabels.call(e), e.pointLabels = e.chart.data.labels.map(e.options.pointLabels.callback, e);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          fit: function fit() {\n            var t,\n                i,\n                n,\n                o,\n                r,\n                l,\n                s,\n                d,\n                u,\n                c,\n                h,\n                f,\n                g = this.options.pointLabels,\n                p = e.getValueOrDefault(g.fontSize, a.defaultFontSize),\n                m = e.getValueOrDefault(g.fontStyle, a.defaultFontStyle),\n                b = e.getValueOrDefault(g.fontFamily, a.defaultFontFamily),\n                v = e.fontString(p, m, b),\n                x = e.min([this.height / 2 - p - 5, this.width / 2]),\n                y = this.width,\n                k = 0;\n\n            for (this.ctx.font = v, i = 0; i < this.getValueCount(); i++) {\n              t = this.getPointPosition(i, x), n = this.ctx.measureText(this.pointLabels[i] ? this.pointLabels[i] : \"\").width + 5;\n              var S = this.getIndexAngle(i) + Math.PI / 2,\n                  w = 360 * S / (2 * Math.PI) % 360;\n              0 === w || 180 === w ? (o = n / 2, t.x + o > y && (y = t.x + o, r = i), t.x - o < k && (k = t.x - o, s = i)) : 180 > w ? t.x + n > y && (y = t.x + n, r = i) : t.x - n < k && (k = t.x - n, s = i);\n            }\n\n            u = k, c = Math.ceil(y - this.width), l = this.getIndexAngle(r), d = this.getIndexAngle(s), h = c / Math.sin(l + Math.PI / 2), f = u / Math.sin(d + Math.PI / 2), h = e.isNumber(h) ? h : 0, f = e.isNumber(f) ? f : 0, this.drawingArea = Math.round(x - (f + h) / 2), this.setCenterPoint(f, h);\n          },\n          setCenterPoint: function setCenterPoint(t, e) {\n            var a = this,\n                i = a.width - e - a.drawingArea,\n                n = t + a.drawingArea;\n            a.xCenter = Math.round((n + i) / 2 + a.left), a.yCenter = Math.round(a.height / 2 + a.top);\n          },\n          getIndexAngle: function getIndexAngle(t) {\n            var e = 2 * Math.PI / this.getValueCount(),\n                a = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0,\n                i = a * Math.PI * 2 / 360;\n            return t * e - Math.PI / 2 + i;\n          },\n          getDistanceFromCenterForValue: function getDistanceFromCenterForValue(t) {\n            var e = this;\n            if (null === t) return 0;\n            var a = e.drawingArea / (e.max - e.min);\n            return e.options.reverse ? (e.max - t) * a : (t - e.min) * a;\n          },\n          getPointPosition: function getPointPosition(t, e) {\n            var a = this,\n                i = a.getIndexAngle(t);\n            return {\n              x: Math.round(Math.cos(i) * e) + a.xCenter,\n              y: Math.round(Math.sin(i) * e) + a.yCenter\n            };\n          },\n          getPointPositionForValue: function getPointPositionForValue(t, e) {\n            return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n          },\n          getBasePosition: function getBasePosition() {\n            var t = this,\n                e = t.min,\n                a = t.max;\n            return t.getPointPositionForValue(0, t.beginAtZero ? 0 : 0 > e && 0 > a ? a : e > 0 && a > 0 ? e : 0);\n          },\n          draw: function draw() {\n            var t = this,\n                i = t.options,\n                n = i.gridLines,\n                o = i.ticks,\n                r = i.angleLines,\n                l = i.pointLabels,\n                s = e.getValueOrDefault;\n\n            if (i.display) {\n              var d = t.ctx,\n                  u = s(o.fontSize, a.defaultFontSize),\n                  c = s(o.fontStyle, a.defaultFontStyle),\n                  h = s(o.fontFamily, a.defaultFontFamily),\n                  f = e.fontString(u, c, h);\n\n              if (e.each(t.ticks, function (r, l) {\n                if (l > 0 || i.reverse) {\n                  var c = t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]),\n                      h = t.yCenter - c;\n                  if (n.display && 0 !== l) if (d.strokeStyle = e.getValueAtIndexOrDefault(n.color, l - 1), d.lineWidth = e.getValueAtIndexOrDefault(n.lineWidth, l - 1), i.lineArc) d.beginPath(), d.arc(t.xCenter, t.yCenter, c, 0, 2 * Math.PI), d.closePath(), d.stroke();else {\n                    d.beginPath();\n\n                    for (var g = 0; g < t.getValueCount(); g++) {\n                      var p = t.getPointPosition(g, c);\n                      0 === g ? d.moveTo(p.x, p.y) : d.lineTo(p.x, p.y);\n                    }\n\n                    d.closePath(), d.stroke();\n                  }\n\n                  if (o.display) {\n                    var m = s(o.fontColor, a.defaultFontColor);\n\n                    if (d.font = f, o.showLabelBackdrop) {\n                      var b = d.measureText(r).width;\n                      d.fillStyle = o.backdropColor, d.fillRect(t.xCenter - b / 2 - o.backdropPaddingX, h - u / 2 - o.backdropPaddingY, b + 2 * o.backdropPaddingX, u + 2 * o.backdropPaddingY);\n                    }\n\n                    d.textAlign = \"center\", d.textBaseline = \"middle\", d.fillStyle = m, d.fillText(r, t.xCenter, h);\n                  }\n                }\n              }), !i.lineArc) {\n                d.lineWidth = r.lineWidth, d.strokeStyle = r.color;\n\n                for (var g = t.getDistanceFromCenterForValue(i.reverse ? t.min : t.max), p = s(l.fontSize, a.defaultFontSize), m = s(l.fontStyle, a.defaultFontStyle), b = s(l.fontFamily, a.defaultFontFamily), v = e.fontString(p, m, b), x = t.getValueCount() - 1; x >= 0; x--) {\n                  if (r.display) {\n                    var y = t.getPointPosition(x, g);\n                    d.beginPath(), d.moveTo(t.xCenter, t.yCenter), d.lineTo(y.x, y.y), d.stroke(), d.closePath();\n                  }\n\n                  var k = t.getPointPosition(x, g + 5),\n                      S = s(l.fontColor, a.defaultFontColor);\n                  d.font = v, d.fillStyle = S;\n                  var w = t.pointLabels,\n                      M = this.getIndexAngle(x) + Math.PI / 2,\n                      C = 360 * M / (2 * Math.PI) % 360;\n                  0 === C || 180 === C ? d.textAlign = \"center\" : 180 > C ? d.textAlign = \"left\" : d.textAlign = \"right\", 90 === C || 270 === C ? d.textBaseline = \"middle\" : C > 270 || 90 > C ? d.textBaseline = \"bottom\" : d.textBaseline = \"top\", d.fillText(w[x] ? w[x] : \"\", k.x, k.y);\n                }\n              }\n            }\n          }\n        });\n        t.scaleService.registerScaleType(\"radialLinear\", n, i);\n      };\n    }, {}],\n    46: [function (t, e, a) {\n      \"use strict\";\n\n      var i = t(1);\n      i = \"function\" == typeof i ? i : window.moment, e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          units: [{\n            name: \"millisecond\",\n            steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n          }, {\n            name: \"second\",\n            steps: [1, 2, 5, 10, 30]\n          }, {\n            name: \"minute\",\n            steps: [1, 2, 5, 10, 30]\n          }, {\n            name: \"hour\",\n            steps: [1, 2, 3, 6, 12]\n          }, {\n            name: \"day\",\n            steps: [1, 2, 5]\n          }, {\n            name: \"week\",\n            maxStep: 4\n          }, {\n            name: \"month\",\n            maxStep: 3\n          }, {\n            name: \"quarter\",\n            maxStep: 4\n          }, {\n            name: \"year\",\n            maxStep: !1\n          }]\n        },\n            n = {\n          position: \"bottom\",\n          time: {\n            parser: !1,\n            format: !1,\n            unit: !1,\n            round: !1,\n            displayFormat: !1,\n            isoWeekday: !1,\n            minUnit: \"millisecond\",\n            displayFormats: {\n              millisecond: \"h:mm:ss.SSS a\",\n              second: \"h:mm:ss a\",\n              minute: \"h:mm:ss a\",\n              hour: \"MMM D, hA\",\n              day: \"ll\",\n              week: \"ll\",\n              month: \"MMM YYYY\",\n              quarter: \"[Q]Q - YYYY\",\n              year: \"YYYY\"\n            }\n          },\n          ticks: {\n            autoSkip: !1\n          }\n        },\n            o = t.Scale.extend({\n          initialize: function initialize() {\n            if (!i) throw new Error(\"Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com\");\n            t.Scale.prototype.initialize.call(this);\n          },\n          getLabelMoment: function getLabelMoment(t, e) {\n            return null === t || null === e ? null : \"undefined\" != typeof this.labelMoments[t] ? this.labelMoments[t][e] : null;\n          },\n          getLabelDiff: function getLabelDiff(t, e) {\n            var a = this;\n            return null === t || null === e ? null : (void 0 === a.labelDiffs && a.buildLabelDiffs(), \"undefined\" != typeof a.labelDiffs[t] ? a.labelDiffs[t][e] : null);\n          },\n          getMomentStartOf: function getMomentStartOf(t) {\n            var e = this;\n            return \"week\" === e.options.time.unit && e.options.time.isoWeekday !== !1 ? t.clone().startOf(\"isoWeek\").isoWeekday(e.options.time.isoWeekday) : t.clone().startOf(e.tickUnit);\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this;\n            t.labelMoments = [];\n            var a = [];\n            t.chart.data.labels && t.chart.data.labels.length > 0 ? (e.each(t.chart.data.labels, function (e) {\n              var i = t.parseTime(e);\n              i.isValid() && (t.options.time.round && i.startOf(t.options.time.round), a.push(i));\n            }, t), t.firstTick = i.min.call(t, a), t.lastTick = i.max.call(t, a)) : (t.firstTick = null, t.lastTick = null), e.each(t.chart.data.datasets, function (n, o) {\n              var r = [],\n                  l = t.chart.isDatasetVisible(o);\n              \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(n.data[0]) && null !== n.data[0] ? e.each(n.data, function (e) {\n                var a = t.parseTime(t.getRightValue(e));\n                a.isValid() && (t.options.time.round && a.startOf(t.options.time.round), r.push(a), l && (t.firstTick = null !== t.firstTick ? i.min(t.firstTick, a) : a, t.lastTick = null !== t.lastTick ? i.max(t.lastTick, a) : a));\n              }, t) : r = a, t.labelMoments.push(r);\n            }, t), t.options.time.min && (t.firstTick = t.parseTime(t.options.time.min)), t.options.time.max && (t.lastTick = t.parseTime(t.options.time.max)), t.firstTick = (t.firstTick || i()).clone(), t.lastTick = (t.lastTick || i()).clone();\n          },\n          buildLabelDiffs: function buildLabelDiffs() {\n            var t = this;\n            t.labelDiffs = [];\n            var a = [];\n            t.chart.data.labels && t.chart.data.labels.length > 0 && e.each(t.chart.data.labels, function (e) {\n              var i = t.parseTime(e);\n              i.isValid() && (t.options.time.round && i.startOf(t.options.time.round), a.push(i.diff(t.firstTick, t.tickUnit, !0)));\n            }, t), e.each(t.chart.data.datasets, function (i) {\n              var n = [];\n              \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(i.data[0]) && null !== i.data[0] ? e.each(i.data, function (e) {\n                var a = t.parseTime(t.getRightValue(e));\n                a.isValid() && (t.options.time.round && a.startOf(t.options.time.round), n.push(a.diff(t.firstTick, t.tickUnit, !0)));\n              }, t) : n = a, t.labelDiffs.push(n);\n            }, t);\n          },\n          buildTicks: function buildTicks() {\n            var i = this;\n            i.ctx.save();\n            var n = e.getValueOrDefault(i.options.ticks.fontSize, t.defaults.global.defaultFontSize),\n                o = e.getValueOrDefault(i.options.ticks.fontStyle, t.defaults.global.defaultFontStyle),\n                r = e.getValueOrDefault(i.options.ticks.fontFamily, t.defaults.global.defaultFontFamily),\n                l = e.fontString(n, o, r);\n            if (i.ctx.font = l, i.ticks = [], i.unitScale = 1, i.scaleSizeInUnits = 0, i.options.time.unit) i.tickUnit = i.options.time.unit || \"day\", i.displayFormat = i.options.time.displayFormats[i.tickUnit], i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0), i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, 1);else {\n              var s = i.isHorizontal() ? i.width - (i.paddingLeft + i.paddingRight) : i.height - (i.paddingTop + i.paddingBottom),\n                  d = i.tickFormatFunction(i.firstTick, 0, []),\n                  u = i.ctx.measureText(d).width,\n                  c = Math.cos(e.toRadians(i.options.ticks.maxRotation)),\n                  h = Math.sin(e.toRadians(i.options.ticks.maxRotation));\n              u = u * c + n * h;\n              var f = s / u;\n              i.tickUnit = i.options.time.minUnit, i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0), i.displayFormat = i.options.time.displayFormats[i.tickUnit];\n\n              for (var g = 0, p = a.units[g]; g < a.units.length;) {\n                if (i.unitScale = 1, e.isArray(p.steps) && Math.ceil(i.scaleSizeInUnits / f) < e.max(p.steps)) {\n                  for (var m = 0; m < p.steps.length; ++m) {\n                    if (p.steps[m] >= Math.ceil(i.scaleSizeInUnits / f)) {\n                      i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, p.steps[m]);\n                      break;\n                    }\n                  }\n\n                  break;\n                }\n\n                if (p.maxStep === !1 || Math.ceil(i.scaleSizeInUnits / f) < p.maxStep) {\n                  i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, Math.ceil(i.scaleSizeInUnits / f));\n                  break;\n                }\n\n                ++g, p = a.units[g], i.tickUnit = p.name;\n                var b = i.firstTick.diff(i.getMomentStartOf(i.firstTick), i.tickUnit, !0),\n                    v = i.getMomentStartOf(i.lastTick.clone().add(1, i.tickUnit)).diff(i.lastTick, i.tickUnit, !0);\n                i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0) + b + v, i.displayFormat = i.options.time.displayFormats[p.name];\n              }\n            }\n            var x;\n\n            if (i.options.time.min ? x = i.getMomentStartOf(i.firstTick) : (i.firstTick = i.getMomentStartOf(i.firstTick), x = i.firstTick), !i.options.time.max) {\n              var y = i.getMomentStartOf(i.lastTick),\n                  k = y.diff(i.lastTick, i.tickUnit, !0);\n              0 > k ? i.lastTick = i.getMomentStartOf(i.lastTick.add(1, i.tickUnit)) : k >= 0 && (i.lastTick = y), i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0);\n            }\n\n            i.options.time.displayFormat && (i.displayFormat = i.options.time.displayFormat), i.ticks.push(i.firstTick.clone());\n\n            for (var S = 1; S <= i.scaleSizeInUnits; ++S) {\n              var w = x.clone().add(S, i.tickUnit);\n              if (i.options.time.max && w.diff(i.lastTick, i.tickUnit, !0) >= 0) break;\n              S % i.unitScale === 0 && i.ticks.push(w);\n            }\n\n            var M = i.ticks[i.ticks.length - 1].diff(i.lastTick, i.tickUnit);\n            (0 !== M || 0 === i.scaleSizeInUnits) && (i.options.time.max ? (i.ticks.push(i.lastTick.clone()), i.scaleSizeInUnits = i.lastTick.diff(i.ticks[0], i.tickUnit, !0)) : (i.ticks.push(i.lastTick.clone()), i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0))), i.ctx.restore(), i.labelDiffs = void 0;\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            var a = this,\n                i = a.chart.data.labels && t < a.chart.data.labels.length ? a.chart.data.labels[t] : \"\";\n            return \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(a.chart.data.datasets[e].data[0]) && (i = a.getRightValue(a.chart.data.datasets[e].data[t])), a.options.time.tooltipFormat && (i = a.parseTime(i).format(a.options.time.tooltipFormat)), i;\n          },\n          tickFormatFunction: function tickFormatFunction(t, a, i) {\n            var n = t.format(this.displayFormat),\n                o = this.options.ticks,\n                r = e.getValueOrDefault(o.callback, o.userCallback);\n            return r ? r(n, a, i) : n;\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var t = this;\n            t.tickMoments = t.ticks, t.ticks = t.ticks.map(t.tickFormatFunction, t);\n          },\n          getPixelForValue: function getPixelForValue(t, e, a) {\n            var i = this,\n                n = null;\n\n            if (void 0 !== e && void 0 !== a && (n = i.getLabelDiff(a, e)), null === n && (t && t.isValid || (t = i.parseTime(i.getRightValue(t))), t && t.isValid && t.isValid() && (n = t.diff(i.firstTick, i.tickUnit, !0))), null !== n) {\n              var o = 0 !== n ? n / i.scaleSizeInUnits : n;\n\n              if (i.isHorizontal()) {\n                var r = i.width - (i.paddingLeft + i.paddingRight),\n                    l = r * o + i.paddingLeft;\n                return i.left + Math.round(l);\n              }\n\n              var s = i.height - (i.paddingTop + i.paddingBottom),\n                  d = s * o + i.paddingTop;\n              return i.top + Math.round(d);\n            }\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.tickMoments[t], null, null);\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e = this,\n                a = e.isHorizontal() ? e.width - (e.paddingLeft + e.paddingRight) : e.height - (e.paddingTop + e.paddingBottom),\n                n = (t - (e.isHorizontal() ? e.left + e.paddingLeft : e.top + e.paddingTop)) / a;\n            return n *= e.scaleSizeInUnits, e.firstTick.clone().add(i.duration(n, e.tickUnit).asSeconds(), \"seconds\");\n          },\n          parseTime: function parseTime(t) {\n            var e = this;\n            return \"string\" == typeof e.options.time.parser ? i(t, e.options.time.parser) : \"function\" == typeof e.options.time.parser ? e.options.time.parser(t) : \"function\" == typeof t.getMonth || \"number\" == typeof t ? i(t) : t.isValid && t.isValid() ? t : \"string\" != typeof e.options.time.format && e.options.time.format.call ? (console.warn(\"options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale\"), e.options.time.format(t)) : i(t, e.options.time.format);\n          }\n        });\n        t.scaleService.registerScaleType(\"time\", o, n);\n      };\n    }, {\n      1: 1\n    }]\n  }, {}, [7])(7);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4213\n");

/***/ }),

/***/ 1635:
/***/ ((module) => {

eval("module.exports = {\n  type: \"bar\",\n  data: {\n    labels: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"],\n    datasets: [{\n      label: \"# of Votes\",\n      data: [58, 80, 44, 76, 54, 50, 45, 90, 57, 48, 54, 49, 63, 77, 67, 83, 95],\n      backgroundColor: [\"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\"],\n      //borderColor: [\n      //    'rgba(255,99,132,1)',\n      //    'rgba(54, 162, 235, 1)',\n      //    'rgba(255, 206, 86, 1)',\n      //    'rgba(75, 192, 192, 1)',\n      //    'rgba(153, 102, 255, 1)',\n      //    'rgba(255, 159, 64, 1)'\n      //],\n      borderWidth: 0\n    }]\n  },\n  options: {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        display: false\n      }],\n      yAxes: [{\n        display: false\n      }]\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1ib2lsZXItcGxhdGUvLi9zcmMvbGliL0NoYXJ0L0NvbmZpZy5qcz9hMDE0Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiZGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsIm9wdGlvbnMiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZGlzcGxheSIsInNjYWxlcyIsInhBeGVzIiwieUF4ZXMiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsRUFBQUEsSUFBSSxFQUFFLEtBRFM7QUFFZkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRSxDQUNOLEdBRE0sRUFFTixHQUZNLEVBR04sR0FITSxFQUlOLEdBSk0sRUFLTixHQUxNLEVBTU4sR0FOTSxFQU9OLEdBUE0sRUFRTixHQVJNLEVBU04sR0FUTSxFQVVOLEdBVk0sRUFXTixHQVhNLEVBWU4sR0FaTSxFQWFOLEdBYk0sRUFjTixHQWRNLEVBZU4sR0FmTSxFQWdCTixHQWhCTSxFQWlCTixHQWpCTSxDQURKO0FBb0JKQyxJQUFBQSxRQUFRLEVBQUUsQ0FDUjtBQUNFQyxNQUFBQSxLQUFLLEVBQUUsWUFEVDtBQUVFSCxNQUFBQSxJQUFJLEVBQUUsQ0FDSixFQURJLEVBQ0EsRUFEQSxFQUNJLEVBREosRUFDUSxFQURSLEVBQ1ksRUFEWixFQUNnQixFQURoQixFQUNvQixFQURwQixFQUN3QixFQUR4QixFQUM0QixFQUQ1QixFQUNnQyxFQURoQyxFQUNvQyxFQURwQyxFQUN3QyxFQUR4QyxFQUM0QyxFQUQ1QyxFQUNnRCxFQURoRCxFQUNvRCxFQURwRCxFQUN3RCxFQUR4RCxFQUM0RCxFQUQ1RCxDQUZSO0FBS0VJLE1BQUFBLGVBQWUsRUFBRSxDQUNmLDBCQURlLEVBRWYsMEJBRmUsRUFHZiwwQkFIZSxFQUlmLDBCQUplLEVBS2YsMEJBTGUsRUFNZiwwQkFOZSxFQU9mLDBCQVBlLEVBUWYsMEJBUmUsRUFTZiwwQkFUZSxFQVVmLDBCQVZlLEVBV2YsMEJBWGUsRUFZZiwwQkFaZSxFQWFmLDBCQWJlLEVBY2YsMEJBZGUsRUFlZiwwQkFmZSxFQWdCZiwwQkFoQmUsRUFpQmYsMEJBakJlLENBTG5CO0FBd0JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBQUEsV0FBVyxFQUFFO0FBaENmLEtBRFE7QUFwQk4sR0FGUztBQTJEZkMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BDLElBQUFBLG1CQUFtQixFQUFFLEtBRGQ7QUFFUEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLE9BQU8sRUFBRTtBQURILEtBRkQ7QUFLUEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VGLFFBQUFBLE9BQU8sRUFBRTtBQURYLE9BREssQ0FERDtBQU1ORyxNQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFSCxRQUFBQSxPQUFPLEVBQUU7QUFEWCxPQURLO0FBTkQ7QUFMRDtBQTNETSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHR5cGU6IFwiYmFyXCIsXHJcbiAgZGF0YToge1xyXG4gICAgbGFiZWxzOiBbXHJcbiAgICAgIFwiQVwiLFxyXG4gICAgICBcIkJcIixcclxuICAgICAgXCJDXCIsXHJcbiAgICAgIFwiRFwiLFxyXG4gICAgICBcIkVcIixcclxuICAgICAgXCJGXCIsXHJcbiAgICAgIFwiR1wiLFxyXG4gICAgICBcIkhcIixcclxuICAgICAgXCJJXCIsXHJcbiAgICAgIFwiSlwiLFxyXG4gICAgICBcIktcIixcclxuICAgICAgXCJMXCIsXHJcbiAgICAgIFwiTVwiLFxyXG4gICAgICBcIk5cIixcclxuICAgICAgXCJPXCIsXHJcbiAgICAgIFwiUFwiLFxyXG4gICAgICBcIlFcIixcclxuICAgIF0sXHJcbiAgICBkYXRhc2V0czogW1xyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWw6IFwiIyBvZiBWb3Rlc1wiLFxyXG4gICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgIDU4LCA4MCwgNDQsIDc2LCA1NCwgNTAsIDQ1LCA5MCwgNTcsIDQ4LCA1NCwgNDksIDYzLCA3NywgNjcsIDgzLCA5NSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogW1xyXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcclxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXHJcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxyXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcclxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXHJcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxyXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcclxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXHJcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxyXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcclxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXHJcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxyXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcclxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXHJcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxyXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcclxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvL2JvcmRlckNvbG9yOiBbXHJcbiAgICAgICAgLy8gICAgJ3JnYmEoMjU1LDk5LDEzMiwxKScsXHJcbiAgICAgICAgLy8gICAgJ3JnYmEoNTQsIDE2MiwgMjM1LCAxKScsXHJcbiAgICAgICAgLy8gICAgJ3JnYmEoMjU1LCAyMDYsIDg2LCAxKScsXHJcbiAgICAgICAgLy8gICAgJ3JnYmEoNzUsIDE5MiwgMTkyLCAxKScsXHJcbiAgICAgICAgLy8gICAgJ3JnYmEoMTUzLCAxMDIsIDI1NSwgMSknLFxyXG4gICAgICAgIC8vICAgICdyZ2JhKDI1NSwgMTU5LCA2NCwgMSknXHJcbiAgICAgICAgLy9dLFxyXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIG9wdGlvbnM6IHtcclxuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgIGRpc3BsYXk6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHNjYWxlczoge1xyXG4gICAgICB4QXhlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICAgIHlBeGVzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgXSxcclxuICAgIH0sXHJcbiAgfSxcclxufTtcclxuIl0sImZpbGUiOiIxNjM1LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1635\n");

/***/ })

}]);