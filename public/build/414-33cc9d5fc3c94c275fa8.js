/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkreact_boiler_plate"] = self["webpackChunkreact_boiler_plate"] || []).push([[414],{

/***/ 9414:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Pages_DashBoard_DashBoard)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(4942);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 19 modules\nvar es = __webpack_require__(4494);\n// EXTERNAL MODULE: ./src/Components/SideBar/SideBar.js\nvar SideBar = __webpack_require__(4973);\n// EXTERNAL MODULE: ./src/Components/BreadCrumb/BreadCrumb.js\nvar BreadCrumb = __webpack_require__(6096);\n// EXTERNAL MODULE: ./src/actions/payout.js\nvar actions_payout = __webpack_require__(9155);\n// EXTERNAL MODULE: ./src/lib/Chart/Chart.min.js\nvar Chart_min = __webpack_require__(4213);\n// EXTERNAL MODULE: ./src/Pages/DashBoard/DashBoard.css\nvar DashBoard = __webpack_require__(7632);\n;// CONCATENATED MODULE: ./src/lib/Chart/common.js\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar dynamicDataWithXY = function dynamicDataWithXY(xdata, yData, chartTitle, xLabel, yLabel, chartOptions) {\n  var chartObj = {\n    type: 'bar',\n    // also try bar or other graph types\n    data: {\n      labels: xdata,\n      // Information about the dataset\n      datasets: [{\n        label: \"\",\n        backgroundColor: 'lightblue',\n        borderColor: 'royalblue',\n        data: yData\n      }]\n    },\n    // Configuration options\n    options: _objectSpread({\n      layout: {\n        padding: 10\n      },\n      legend: {\n        position: 'bottom'\n      },\n      title: {\n        display: true,\n        text: chartTitle\n      },\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: yLabel\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: xLabel\n          }\n        }]\n      }\n    }, chartOptions)\n  };\n  return chartObj;\n};\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(5671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(3144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(136);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(2963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(1120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\nvar taggedTemplateLiteral = __webpack_require__(168);\n// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js + 4 modules\nvar styled_components_browser_esm = __webpack_require__(5458);\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/style.js\n\n\nvar _templateObject;\n\n\n/* harmony default export */ const style = (styled_components_browser_esm/* default.svg */.ZP.svg(_templateObject || (_templateObject = (0,taggedTemplateLiteral/* default */.Z)([\"\\n.circle-background,\\n.circle-progress {\\n  fill: none;\\n}\\n\\n.circle-background {\\n  stroke: #ddd;\\n}\\n\\n.circle-progress {\\n  stroke: \", \";\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n}\\n\\n.circle-text {\\n  font-size: 14px;\\n  font-weight: bold;\\n  fill: \", \";\\n}\\n\"])), function (props) {\n  return props.strokeColor ? \"\".concat(props.strokeColor) : '#4d94ff';\n}, function (props) {\n  return props.strokeColor ? \"\".concat(props.strokeColor) : '#4d94ff';\n}));\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/CircularProgressBar.js\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar CircularProgressBar = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.Z)(CircularProgressBar, _React$Component);\n\n  var _super = _createSuper(CircularProgressBar);\n\n  function CircularProgressBar(props) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, CircularProgressBar);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(CircularProgressBar, [{\n    key: \"render\",\n    value: function render() {\n      // Size of the enclosing square\n      var sqSize = this.props.sqSize; // SVG centers the stroke width on the radius, subtract out so circle fits in square\n\n      var radius = (this.props.sqSize - this.props.strokeWidth) / 2; // Enclose cicle in a circumscribing square\n\n      var viewBox = \"0 0 \".concat(sqSize, \" \").concat(sqSize); // Arc length at 100% coverage is the circle circumference\n\n      var dashArray = radius * Math.PI * 2; // Scale 100% coverage overlay with the actual percent\n\n      var dashOffset = dashArray - dashArray * this.props.percentage / 100;\n      return /*#__PURE__*/react.createElement(style, {\n        width: this.props.sqSize,\n        height: this.props.sqSize,\n        strokeColor: this.props.strokeColor,\n        viewBox: viewBox\n      }, /*#__PURE__*/react.createElement(\"circle\", {\n        className: \"circle-background\",\n        cx: this.props.sqSize / 2,\n        cy: this.props.sqSize / 2,\n        r: radius,\n        strokeWidth: \"\".concat(this.props.strokeWidth, \"px\")\n      }), /*#__PURE__*/react.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: this.props.sqSize / 2,\n        cy: this.props.sqSize / 2,\n        r: radius,\n        strokeWidth: \"\".concat(this.props.strokeWidth, \"px\") // Start progress marker at 12 O'Clock\n        ,\n        transform: \"rotate(-90 \".concat(this.props.sqSize / 2, \" \").concat(this.props.sqSize / 2, \")\"),\n        style: {\n          strokeDasharray: dashArray,\n          strokeDashoffset: dashOffset\n        }\n      }), /*#__PURE__*/react.createElement(\"text\", {\n        className: \"circle-text\",\n        x: \"50%\",\n        y: \"50%\",\n        dy: \".3em\",\n        textAnchor: \"middle\"\n      }, \"\".concat(this.props.percentage, \"%\")));\n    }\n  }]);\n\n  return CircularProgressBar;\n}(react.Component);\n\nCircularProgressBar.defaultProps = {\n  sqSize: 100,\n  percentage: 25,\n  strokeWidth: 5\n};\n/* harmony default export */ const CircularProgressBar_CircularProgressBar = (CircularProgressBar);\n;// CONCATENATED MODULE: ./src/Components/CircularProgressBar/index.js\n\n// EXTERNAL MODULE: ./src/utils/common.js\nvar common = __webpack_require__(2667);\n;// CONCATENATED MODULE: ./src/Pages/DashBoard/DashBoard.js\n\n\nfunction DashBoard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DashBoard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DashBoard_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DashBoard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\nvar chartConfig = __webpack_require__(1635);\n\n\n\n\n\n\nvar DashBoard_DashBoard = function DashBoard(props) {\n  // const {\n  //   data: { totalTransaction, totalSuccess, totalFailed, totalPending },\n  // } = transactionStatus;\n  var renderPieChart = function renderPieChart() {\n    if (document.getElementById(\"container-pie-chart\")) {\n      var ctx = document.getElementById(\"container-pie-chart\").getContext(\"2d\");\n      var myChart = new Chart(ctx, {\n        type: \"pie\",\n        data: {\n          labels: [\"Success\", \"Fail\", \"Refunded\", \"Cancel\"],\n          datasets: [{\n            backgroundColor: [\"#2ecc71\", \"#e74c3c\", \"#3498db\", \"#9b59b6\"],\n            data: [90, 2, 5, 3]\n          }]\n        }\n      });\n    }\n  };\n\n  (0,react.useEffect)(function () {\n    var dispatch = props.dispatch,\n        payout = props.payout;\n    dispatch((0,actions_payout/* fetchMonthlyReports */.yl)());\n    setTimeout(function () {\n      renderPieChart();\n    }, 2000);\n  }, []);\n\n  var changeHandler = function changeHandler() {\n    renderPieChart();\n  };\n\n  console.log(\"dashboard\", props);\n  var payout = props.payout;\n  var statusReport = payout && payout.statusReport && payout.statusReport.data || \"\";\n  var monthlyReport = payout && payout.monthlyReport || \"\";\n  var transactionReport = \"\";\n\n  if (payout && payout.statusTranscReport && payout.statusTranscReport.data && Array.isArray(payout.statusTranscReport.data)) {\n    transactionReport = payout.statusTranscReport.data.filter(function (item) {\n      return item.status.toLowerCase() == \"done\";\n    });\n    transactionReport = transactionReport[0];\n  }\n\n  var totalTransaction = statusReport ? parseInt(statusReport.DONE) + parseInt(statusReport.FAIL) + parseInt(statusReport.REJECTED) : \"\";\n  var chartXData = monthlyReport && monthlyReport.data && monthlyReport.data.map(function (item) {\n    return \"\".concat(item.month, \" \").concat(item.year);\n  });\n  var chartYData = monthlyReport && monthlyReport.data && monthlyReport.data.map(function (item) {\n    return Math.abs(item.totalRevenue);\n  });\n  var chartObj = dynamicDataWithXY(chartXData, chartYData, \"Revenue Chart\", \"Month of the year\", \"Revenue in Rs\");\n\n  if (monthlyReport && document.getElementById(\"myChart3-light\")) {\n    var ctx = document.getElementById(\"myChart3-light\").getContext(\"2d\");\n    var myChart = new Chart(ctx, chartObj);\n  }\n\n  var fontCss = {\n    fontSize: \"20px\",\n    textAlign: \"center\",\n    fontWeight: \"bold\"\n  };\n  var login = props.login;\n  var userPermissions = (0,common/* getUserPermissions */.$h)(login);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container_full\"\n  }, /*#__PURE__*/react.createElement(SideBar/* default */.Z, props), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"content_wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-fluid\"\n  }, /*#__PURE__*/react.createElement(BreadCrumb/* default */.Z, {\n    heading: \"Dashboard\",\n    value: \"Dashboard\"\n  }), /*#__PURE__*/react.createElement(\"section\", {\n    className: \"chart_section\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-3 col-sm-6 mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card bg-primary border-0 text-light pt-3 pb-3 h-100\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body \"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-3\"\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    className: \"ti-server f30\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-9\"\n  }, /*#__PURE__*/react.createElement(\"h6\", {\n    className: \"m-0 text-light\"\n  }, \"Total Transactions\"), /*#__PURE__*/react.createElement(\"p\", {\n    className: \"f12 mb-0\",\n    style: fontCss\n  }, transactionReport && transactionReport.count || 0)))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-3 col-sm-6 mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card bg-info border-0 text-light pt-3 pb-3 h-100\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-3\"\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    className: \"ti-control-shuffle f30\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-9\"\n  }, /*#__PURE__*/react.createElement(\"h6\", {\n    className: \"m-0 text-light\"\n  }, \"Total Amount\"), /*#__PURE__*/react.createElement(\"p\", {\n    className: \"f12 mb-0\",\n    style: fontCss\n  }, transactionReport && transactionReport.totalTransaction || 0)))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-3 col-sm-6 mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card bg-warning border-0 text-light pt-3 pb-3 h-100\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-3\"\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    className: \"ti-back-left f30\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-9\"\n  }, /*#__PURE__*/react.createElement(\"h6\", {\n    className: \"m-0 text-light\"\n  }, \"Refunded Transaction\"), /*#__PURE__*/react.createElement(\"p\", {\n    className: \"f12 mb-0\",\n    style: fontCss\n  }, \"0\")))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-3 col-sm-6 mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card bg-danger border-0 text-light pt-3 pb-3 h-100\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-3\"\n  }, /*#__PURE__*/react.createElement(\"i\", {\n    className: \"ti-time f30\"\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-9\"\n  }, /*#__PURE__*/react.createElement(\"h6\", {\n    className: \"m-0 text-light\"\n  }, \"Cancelled Transaction\"), /*#__PURE__*/react.createElement(\"p\", {\n    className: \"f12 mb-0\",\n    style: fontCss\n  }, \"0\"))))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-8 mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-12\"\n  }, /*#__PURE__*/react.createElement(\"h2\", {\n    className: \"mb-4\"\n  }, \"Last 6 Months Transaction Analysis\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row py-3\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-12 col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"px-4\"\n  }, /*#__PURE__*/react.createElement(\"canvas\", {\n    id: \"myChart3-light\",\n    className: \"height_box\"\n  }))))))), statusReport ? /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-4 mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-12\"\n  }, /*#__PURE__*/react.createElement(\"h2\", {\n    className: \"mb-1\"\n  }, \"Overall statistics\"), /*#__PURE__*/react.createElement(\"p\", {\n    className: \"mb-4\"\n  }, \"Daily information about statistics in system\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-sm-12 mb-xs-30\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"ep_1 \"\n  }, /*#__PURE__*/react.createElement(CircularProgressBar_CircularProgressBar, {\n    percentage: Math.floor(statusReport.DONE * 100 / totalTransaction),\n    strokeWidth: 7,\n    strokeColor: \"#097643\",\n    sqSize: 100\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"user_data\"\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: \"fw-bold mt-3 mb-0\"\n  }, \"Success\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-sm-6 mb-xs-30\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"ep_1 \"\n  }, /*#__PURE__*/react.createElement(CircularProgressBar_CircularProgressBar, {\n    percentage: Math.floor(statusReport.FAIL * 100 / totalTransaction),\n    strokeWidth: 7,\n    strokeColor: \"#FF333C\",\n    sqSize: 100\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"user_data\"\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: \"fw-bold mt-3 mb-0\"\n  }, \"Failed\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-sm-6\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"ep_1\",\n    \"data-percent\": \"1\"\n  }, /*#__PURE__*/react.createElement(CircularProgressBar_CircularProgressBar, {\n    percentage: Math.floor(statusReport.REJECTED * 100 / totalTransaction),\n    strokeWidth: 7,\n    strokeColor: \"#0000ff\",\n    sqSize: 100\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"user_data\"\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: \"fw-bold mt-3 mb-0\"\n  }, \"Rejected\"))))))) : \"\"), userPermissions && userPermissions.includes(\"PTM_VENDOR_TRANSACTION_REPORT\") && /*#__PURE__*/react.createElement(VendorTransactionReport, {\n    changeHandler: changeHandler\n  })))));\n};\n\nfunction mapStateToProps(state) {\n  return DashBoard_objectSpread({}, state);\n}\n\n/* harmony default export */ const Pages_DashBoard_DashBoard = ((0,es/* connect */.$j)(mapStateToProps)(DashBoard_DashBoard));\n\nvar VendorTransactionReport = function VendorTransactionReport(_ref) {\n  var changeHandler = _ref.changeHandler;\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-xl-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card card-shadow mb-4\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-header\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-title\"\n  }, \"Transaction Status\"), /*#__PURE__*/react.createElement(\"form\", {\n    className: \"filter-table\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", null, \"Vendor\"), /*#__PURE__*/react.createElement(\"select\", {\n    className: \"form-control\",\n    id: \"exampleFormControlSelect1\",\n    onChange: changeHandler\n  }, /*#__PURE__*/react.createElement(\"option\", null, \"Ranjeet\"), /*#__PURE__*/react.createElement(\"option\", null, \"Diwakar\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", null, \"Date\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"date\",\n    className: \"form-control\",\n    id: \"exampleInputEmail1\",\n    \"aria-describedby\": \"emailHelp\",\n    placeholder: \"Enter email\"\n  })))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-pie-chart\"\n  }, /*#__PURE__*/react.createElement(\"canvas\", {\n    id: \"container-pie-chart\",\n    className: \"height_box\"\n  }))))));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9414\n");

/***/ }),

/***/ 4213:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1002);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n/*!\n * Chart.js\n * http://chartjs.org/\n * Version: 2.4.0\n *\n * Copyright 2016 Nick Downie\n * Released under the MIT license\n * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md\n */\n!function (t) {\n  if (\"object\" == (typeof exports === \"undefined\" ? \"undefined\" : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(exports)) && \"undefined\" != \"object\") module.exports = t();else if (\"function\" == typeof define && __webpack_require__.amdO) define([], t);else {\n    var e;\n    e = \"undefined\" != typeof window ? window : \"undefined\" != typeof __webpack_require__.g ? __webpack_require__.g : \"undefined\" != typeof self ? self : this, e.Chart = t();\n  }\n}(function () {\n  return function t(e, a, i) {\n    function n(r, l) {\n      if (!a[r]) {\n        if (!e[r]) {\n          var s = undefined;\n          if (!l && s) return require(r, !0);\n          if (o) return o(r, !0);\n          var d = new Error(\"Cannot find module '\" + r + \"'\");\n          throw d.code = \"MODULE_NOT_FOUND\", d;\n        }\n\n        var u = a[r] = {\n          exports: {}\n        };\n        e[r][0].call(u.exports, function (t) {\n          var a = e[r][1][t];\n          return n(a ? a : t);\n        }, u, u.exports, t, e, a, i);\n      }\n\n      return a[r].exports;\n    }\n\n    for (var o = undefined, r = 0; r < i.length; r++) {\n      n(i[r]);\n    }\n\n    return n;\n  }({\n    1: [function (t, e, a) {}, {}],\n    2: [function (t, e, a) {\n      function i(t) {\n        if (t) {\n          var e = /^#([a-fA-F0-9]{3})$/,\n              a = /^#([a-fA-F0-9]{6})$/,\n              i = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\n              n = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\n              o = /(\\w+)/,\n              r = [0, 0, 0],\n              l = 1,\n              s = t.match(e);\n\n          if (s) {\n            s = s[1];\n\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s[d] + s[d], 16);\n            }\n          } else if (s = t.match(a)) {\n            s = s[1];\n\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s.slice(2 * d, 2 * d + 2), 16);\n            }\n          } else if (s = t.match(i)) {\n            for (var d = 0; d < r.length; d++) {\n              r[d] = parseInt(s[d + 1]);\n            }\n\n            l = parseFloat(s[4]);\n          } else if (s = t.match(n)) {\n            for (var d = 0; d < r.length; d++) {\n              r[d] = Math.round(2.55 * parseFloat(s[d + 1]));\n            }\n\n            l = parseFloat(s[4]);\n          } else if (s = t.match(o)) {\n            if (\"transparent\" == s[1]) return [0, 0, 0, 0];\n            if (r = y[s[1]], !r) return;\n          }\n\n          for (var d = 0; d < r.length; d++) {\n            r[d] = v(r[d], 0, 255);\n          }\n\n          return l = l || 0 == l ? v(l, 0, 1) : 1, r[3] = l, r;\n        }\n      }\n\n      function n(t) {\n        if (t) {\n          var e = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/,\n              a = t.match(e);\n\n          if (a) {\n            var i = parseFloat(a[4]),\n                n = v(parseInt(a[1]), 0, 360),\n                o = v(parseFloat(a[2]), 0, 100),\n                r = v(parseFloat(a[3]), 0, 100),\n                l = v(isNaN(i) ? 1 : i, 0, 1);\n            return [n, o, r, l];\n          }\n        }\n      }\n\n      function o(t) {\n        if (t) {\n          var e = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/,\n              a = t.match(e);\n\n          if (a) {\n            var i = parseFloat(a[4]),\n                n = v(parseInt(a[1]), 0, 360),\n                o = v(parseFloat(a[2]), 0, 100),\n                r = v(parseFloat(a[3]), 0, 100),\n                l = v(isNaN(i) ? 1 : i, 0, 1);\n            return [n, o, r, l];\n          }\n        }\n      }\n\n      function r(t) {\n        var e = i(t);\n        return e && e.slice(0, 3);\n      }\n\n      function l(t) {\n        var e = n(t);\n        return e && e.slice(0, 3);\n      }\n\n      function s(t) {\n        var e = i(t);\n        return e ? e[3] : (e = n(t)) ? e[3] : (e = o(t)) ? e[3] : void 0;\n      }\n\n      function d(t) {\n        return \"#\" + x(t[0]) + x(t[1]) + x(t[2]);\n      }\n\n      function u(t, e) {\n        return 1 > e || t[3] && t[3] < 1 ? c(t, e) : \"rgb(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \")\";\n      }\n\n      function c(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"rgba(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \", \" + e + \")\";\n      }\n\n      function h(t, e) {\n        if (1 > e || t[3] && t[3] < 1) return f(t, e);\n        var a = Math.round(t[0] / 255 * 100),\n            i = Math.round(t[1] / 255 * 100),\n            n = Math.round(t[2] / 255 * 100);\n        return \"rgb(\" + a + \"%, \" + i + \"%, \" + n + \"%)\";\n      }\n\n      function f(t, e) {\n        var a = Math.round(t[0] / 255 * 100),\n            i = Math.round(t[1] / 255 * 100),\n            n = Math.round(t[2] / 255 * 100);\n        return \"rgba(\" + a + \"%, \" + i + \"%, \" + n + \"%, \" + (e || t[3] || 1) + \")\";\n      }\n\n      function g(t, e) {\n        return 1 > e || t[3] && t[3] < 1 ? p(t, e) : \"hsl(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%)\";\n      }\n\n      function p(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hsla(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%, \" + e + \")\";\n      }\n\n      function m(t, e) {\n        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hwb(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%\" + (void 0 !== e && 1 !== e ? \", \" + e : \"\") + \")\";\n      }\n\n      function b(t) {\n        return k[t.slice(0, 3)];\n      }\n\n      function v(t, e, a) {\n        return Math.min(Math.max(e, t), a);\n      }\n\n      function x(t) {\n        var e = t.toString(16).toUpperCase();\n        return e.length < 2 ? \"0\" + e : e;\n      }\n\n      var y = t(6);\n      e.exports = {\n        getRgba: i,\n        getHsla: n,\n        getRgb: r,\n        getHsl: l,\n        getHwb: o,\n        getAlpha: s,\n        hexString: d,\n        rgbString: u,\n        rgbaString: c,\n        percentString: h,\n        percentaString: f,\n        hslString: g,\n        hslaString: p,\n        hwbString: m,\n        keyword: b\n      };\n      var k = {};\n\n      for (var S in y) {\n        k[y[S]] = S;\n      }\n    }, {\n      6: 6\n    }],\n    3: [function (t, e, a) {\n      var i = t(5),\n          n = t(2),\n          o = function o(t) {\n        if (t instanceof o) return t;\n        if (!(this instanceof o)) return new o(t);\n        this.values = {\n          rgb: [0, 0, 0],\n          hsl: [0, 0, 0],\n          hsv: [0, 0, 0],\n          hwb: [0, 0, 0],\n          cmyk: [0, 0, 0, 0],\n          alpha: 1\n        };\n        var e;\n        if (\"string\" == typeof t) {\n          if (e = n.getRgba(t)) this.setValues(\"rgb\", e);else if (e = n.getHsla(t)) this.setValues(\"hsl\", e);else {\n            if (!(e = n.getHwb(t))) throw new Error('Unable to parse color from string \"' + t + '\"');\n            this.setValues(\"hwb\", e);\n          }\n        } else if (\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t)) if (e = t, void 0 !== e.r || void 0 !== e.red) this.setValues(\"rgb\", e);else if (void 0 !== e.l || void 0 !== e.lightness) this.setValues(\"hsl\", e);else if (void 0 !== e.v || void 0 !== e.value) this.setValues(\"hsv\", e);else if (void 0 !== e.w || void 0 !== e.whiteness) this.setValues(\"hwb\", e);else {\n          if (void 0 === e.c && void 0 === e.cyan) throw new Error(\"Unable to parse color from object \" + JSON.stringify(t));\n          this.setValues(\"cmyk\", e);\n        }\n      };\n\n      o.prototype = {\n        rgb: function rgb() {\n          return this.setSpace(\"rgb\", arguments);\n        },\n        hsl: function hsl() {\n          return this.setSpace(\"hsl\", arguments);\n        },\n        hsv: function hsv() {\n          return this.setSpace(\"hsv\", arguments);\n        },\n        hwb: function hwb() {\n          return this.setSpace(\"hwb\", arguments);\n        },\n        cmyk: function cmyk() {\n          return this.setSpace(\"cmyk\", arguments);\n        },\n        rgbArray: function rgbArray() {\n          return this.values.rgb;\n        },\n        hslArray: function hslArray() {\n          return this.values.hsl;\n        },\n        hsvArray: function hsvArray() {\n          return this.values.hsv;\n        },\n        hwbArray: function hwbArray() {\n          var t = this.values;\n          return 1 !== t.alpha ? t.hwb.concat([t.alpha]) : t.hwb;\n        },\n        cmykArray: function cmykArray() {\n          return this.values.cmyk;\n        },\n        rgbaArray: function rgbaArray() {\n          var t = this.values;\n          return t.rgb.concat([t.alpha]);\n        },\n        hslaArray: function hslaArray() {\n          var t = this.values;\n          return t.hsl.concat([t.alpha]);\n        },\n        alpha: function alpha(t) {\n          return void 0 === t ? this.values.alpha : (this.setValues(\"alpha\", t), this);\n        },\n        red: function red(t) {\n          return this.setChannel(\"rgb\", 0, t);\n        },\n        green: function green(t) {\n          return this.setChannel(\"rgb\", 1, t);\n        },\n        blue: function blue(t) {\n          return this.setChannel(\"rgb\", 2, t);\n        },\n        hue: function hue(t) {\n          return t && (t %= 360, t = 0 > t ? 360 + t : t), this.setChannel(\"hsl\", 0, t);\n        },\n        saturation: function saturation(t) {\n          return this.setChannel(\"hsl\", 1, t);\n        },\n        lightness: function lightness(t) {\n          return this.setChannel(\"hsl\", 2, t);\n        },\n        saturationv: function saturationv(t) {\n          return this.setChannel(\"hsv\", 1, t);\n        },\n        whiteness: function whiteness(t) {\n          return this.setChannel(\"hwb\", 1, t);\n        },\n        blackness: function blackness(t) {\n          return this.setChannel(\"hwb\", 2, t);\n        },\n        value: function value(t) {\n          return this.setChannel(\"hsv\", 2, t);\n        },\n        cyan: function cyan(t) {\n          return this.setChannel(\"cmyk\", 0, t);\n        },\n        magenta: function magenta(t) {\n          return this.setChannel(\"cmyk\", 1, t);\n        },\n        yellow: function yellow(t) {\n          return this.setChannel(\"cmyk\", 2, t);\n        },\n        black: function black(t) {\n          return this.setChannel(\"cmyk\", 3, t);\n        },\n        hexString: function hexString() {\n          return n.hexString(this.values.rgb);\n        },\n        rgbString: function rgbString() {\n          return n.rgbString(this.values.rgb, this.values.alpha);\n        },\n        rgbaString: function rgbaString() {\n          return n.rgbaString(this.values.rgb, this.values.alpha);\n        },\n        percentString: function percentString() {\n          return n.percentString(this.values.rgb, this.values.alpha);\n        },\n        hslString: function hslString() {\n          return n.hslString(this.values.hsl, this.values.alpha);\n        },\n        hslaString: function hslaString() {\n          return n.hslaString(this.values.hsl, this.values.alpha);\n        },\n        hwbString: function hwbString() {\n          return n.hwbString(this.values.hwb, this.values.alpha);\n        },\n        keyword: function keyword() {\n          return n.keyword(this.values.rgb, this.values.alpha);\n        },\n        rgbNumber: function rgbNumber() {\n          var t = this.values.rgb;\n          return t[0] << 16 | t[1] << 8 | t[2];\n        },\n        luminosity: function luminosity() {\n          for (var t = this.values.rgb, e = [], a = 0; a < t.length; a++) {\n            var i = t[a] / 255;\n            e[a] = 0.03928 >= i ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4);\n          }\n\n          return 0.2126 * e[0] + 0.7152 * e[1] + 0.0722 * e[2];\n        },\n        contrast: function contrast(t) {\n          var e = this.luminosity(),\n              a = t.luminosity();\n          return e > a ? (e + 0.05) / (a + 0.05) : (a + 0.05) / (e + 0.05);\n        },\n        level: function level(t) {\n          var e = this.contrast(t);\n          return e >= 7.1 ? \"AAA\" : e >= 4.5 ? \"AA\" : \"\";\n        },\n        dark: function dark() {\n          var t = this.values.rgb,\n              e = (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3;\n          return 128 > e;\n        },\n        light: function light() {\n          return !this.dark();\n        },\n        negate: function negate() {\n          for (var t = [], e = 0; 3 > e; e++) {\n            t[e] = 255 - this.values.rgb[e];\n          }\n\n          return this.setValues(\"rgb\", t), this;\n        },\n        lighten: function lighten(t) {\n          var e = this.values.hsl;\n          return e[2] += e[2] * t, this.setValues(\"hsl\", e), this;\n        },\n        darken: function darken(t) {\n          var e = this.values.hsl;\n          return e[2] -= e[2] * t, this.setValues(\"hsl\", e), this;\n        },\n        saturate: function saturate(t) {\n          var e = this.values.hsl;\n          return e[1] += e[1] * t, this.setValues(\"hsl\", e), this;\n        },\n        desaturate: function desaturate(t) {\n          var e = this.values.hsl;\n          return e[1] -= e[1] * t, this.setValues(\"hsl\", e), this;\n        },\n        whiten: function whiten(t) {\n          var e = this.values.hwb;\n          return e[1] += e[1] * t, this.setValues(\"hwb\", e), this;\n        },\n        blacken: function blacken(t) {\n          var e = this.values.hwb;\n          return e[2] += e[2] * t, this.setValues(\"hwb\", e), this;\n        },\n        greyscale: function greyscale() {\n          var t = this.values.rgb,\n              e = 0.3 * t[0] + 0.59 * t[1] + 0.11 * t[2];\n          return this.setValues(\"rgb\", [e, e, e]), this;\n        },\n        clearer: function clearer(t) {\n          var e = this.values.alpha;\n          return this.setValues(\"alpha\", e - e * t), this;\n        },\n        opaquer: function opaquer(t) {\n          var e = this.values.alpha;\n          return this.setValues(\"alpha\", e + e * t), this;\n        },\n        rotate: function rotate(t) {\n          var e = this.values.hsl,\n              a = (e[0] + t) % 360;\n          return e[0] = 0 > a ? 360 + a : a, this.setValues(\"hsl\", e), this;\n        },\n        mix: function mix(t, e) {\n          var a = this,\n              i = t,\n              n = void 0 === e ? 0.5 : e,\n              o = 2 * n - 1,\n              r = a.alpha() - i.alpha(),\n              l = ((o * r === -1 ? o : (o + r) / (1 + o * r)) + 1) / 2,\n              s = 1 - l;\n          return this.rgb(l * a.red() + s * i.red(), l * a.green() + s * i.green(), l * a.blue() + s * i.blue()).alpha(a.alpha() * n + i.alpha() * (1 - n));\n        },\n        toJSON: function toJSON() {\n          return this.rgb();\n        },\n        clone: function clone() {\n          var t,\n              e,\n              a = new o(),\n              i = this.values,\n              n = a.values;\n\n          for (var r in i) {\n            i.hasOwnProperty(r) && (t = i[r], e = {}.toString.call(t), \"[object Array]\" === e ? n[r] = t.slice(0) : \"[object Number]\" === e ? n[r] = t : console.error(\"unexpected color value:\", t));\n          }\n\n          return a;\n        }\n      }, o.prototype.spaces = {\n        rgb: [\"red\", \"green\", \"blue\"],\n        hsl: [\"hue\", \"saturation\", \"lightness\"],\n        hsv: [\"hue\", \"saturation\", \"value\"],\n        hwb: [\"hue\", \"whiteness\", \"blackness\"],\n        cmyk: [\"cyan\", \"magenta\", \"yellow\", \"black\"]\n      }, o.prototype.maxes = {\n        rgb: [255, 255, 255],\n        hsl: [360, 100, 100],\n        hsv: [360, 100, 100],\n        hwb: [360, 100, 100],\n        cmyk: [100, 100, 100, 100]\n      }, o.prototype.getValues = function (t) {\n        for (var e = this.values, a = {}, i = 0; i < t.length; i++) {\n          a[t.charAt(i)] = e[t][i];\n        }\n\n        return 1 !== e.alpha && (a.a = e.alpha), a;\n      }, o.prototype.setValues = function (t, e) {\n        var a,\n            n = this.values,\n            o = this.spaces,\n            r = this.maxes,\n            l = 1;\n        if (\"alpha\" === t) l = e;else if (e.length) n[t] = e.slice(0, t.length), l = e[t.length];else if (void 0 !== e[t.charAt(0)]) {\n          for (a = 0; a < t.length; a++) {\n            n[t][a] = e[t.charAt(a)];\n          }\n\n          l = e.a;\n        } else if (void 0 !== e[o[t][0]]) {\n          var s = o[t];\n\n          for (a = 0; a < t.length; a++) {\n            n[t][a] = e[s[a]];\n          }\n\n          l = e.alpha;\n        }\n        if (n.alpha = Math.max(0, Math.min(1, void 0 === l ? n.alpha : l)), \"alpha\" === t) return !1;\n        var d;\n\n        for (a = 0; a < t.length; a++) {\n          d = Math.max(0, Math.min(r[t][a], n[t][a])), n[t][a] = Math.round(d);\n        }\n\n        for (var u in o) {\n          u !== t && (n[u] = i[t][u](n[t]));\n        }\n\n        return !0;\n      }, o.prototype.setSpace = function (t, e) {\n        var a = e[0];\n        return void 0 === a ? this.getValues(t) : (\"number\" == typeof a && (a = Array.prototype.slice.call(e)), this.setValues(t, a), this);\n      }, o.prototype.setChannel = function (t, e, a) {\n        var i = this.values[t];\n        return void 0 === a ? i[e] : a === i[e] ? this : (i[e] = a, this.setValues(t, i), this);\n      }, \"undefined\" != typeof window && (window.Color = o), e.exports = o;\n    }, {\n      2: 2,\n      5: 5\n    }],\n    4: [function (t, e, a) {\n      function i(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 255,\n            o = t[1] / 255,\n            r = t[2] / 255,\n            l = Math.min(n, o, r),\n            s = Math.max(n, o, r),\n            d = s - l;\n        return s == l ? e = 0 : n == s ? e = (o - r) / d : o == s ? e = 2 + (r - n) / d : r == s && (e = 4 + (n - o) / d), e = Math.min(60 * e, 360), 0 > e && (e += 360), i = (l + s) / 2, a = s == l ? 0 : 0.5 >= i ? d / (s + l) : d / (2 - s - l), [e, 100 * a, 100 * i];\n      }\n\n      function n(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2],\n            l = Math.min(n, o, r),\n            s = Math.max(n, o, r),\n            d = s - l;\n        return a = 0 == s ? 0 : d / s * 1e3 / 10, s == l ? e = 0 : n == s ? e = (o - r) / d : o == s ? e = 2 + (r - n) / d : r == s && (e = 4 + (n - o) / d), e = Math.min(60 * e, 360), 0 > e && (e += 360), i = s / 255 * 1e3 / 10, [e, a, i];\n      }\n\n      function o(t) {\n        var e = t[0],\n            a = t[1],\n            n = t[2],\n            o = i(t)[0],\n            r = 1 / 255 * Math.min(e, Math.min(a, n)),\n            n = 1 - 1 / 255 * Math.max(e, Math.max(a, n));\n        return [o, 100 * r, 100 * n];\n      }\n\n      function l(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0] / 255,\n            r = t[1] / 255,\n            l = t[2] / 255;\n        return n = Math.min(1 - o, 1 - r, 1 - l), e = (1 - o - n) / (1 - n) || 0, a = (1 - r - n) / (1 - n) || 0, i = (1 - l - n) / (1 - n) || 0, [100 * e, 100 * a, 100 * i, 100 * n];\n      }\n\n      function s(t) {\n        return G[JSON.stringify(t)];\n      }\n\n      function d(t) {\n        var e = t[0] / 255,\n            a = t[1] / 255,\n            i = t[2] / 255;\n        e = e > 0.04045 ? Math.pow((e + 0.055) / 1.055, 2.4) : e / 12.92, a = a > 0.04045 ? Math.pow((a + 0.055) / 1.055, 2.4) : a / 12.92, i = i > 0.04045 ? Math.pow((i + 0.055) / 1.055, 2.4) : i / 12.92;\n        var n = 0.4124 * e + 0.3576 * a + 0.1805 * i,\n            o = 0.2126 * e + 0.7152 * a + 0.0722 * i,\n            r = 0.0193 * e + 0.1192 * a + 0.9505 * i;\n        return [100 * n, 100 * o, 100 * r];\n      }\n\n      function u(t) {\n        var e,\n            a,\n            i,\n            n = d(t),\n            o = n[0],\n            r = n[1],\n            l = n[2];\n        return o /= 95.047, r /= 100, l /= 108.883, o = o > 0.008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, l = l > 0.008856 ? Math.pow(l, 1 / 3) : 7.787 * l + 16 / 116, e = 116 * r - 16, a = 500 * (o - r), i = 200 * (r - l), [e, a, i];\n      }\n\n      function c(t) {\n        return W(u(t));\n      }\n\n      function h(t) {\n        var e,\n            a,\n            i,\n            n,\n            o,\n            r = t[0] / 360,\n            l = t[1] / 100,\n            s = t[2] / 100;\n        if (0 == l) return o = 255 * s, [o, o, o];\n        a = 0.5 > s ? s * (1 + l) : s + l - s * l, e = 2 * s - a, n = [0, 0, 0];\n\n        for (var d = 0; 3 > d; d++) {\n          i = r + 1 / 3 * -(d - 1), 0 > i && i++, i > 1 && i--, o = 1 > 6 * i ? e + 6 * (a - e) * i : 1 > 2 * i ? a : 2 > 3 * i ? e + (a - e) * (2 / 3 - i) * 6 : e, n[d] = 255 * o;\n        }\n\n        return n;\n      }\n\n      function f(t) {\n        var e,\n            a,\n            i = t[0],\n            n = t[1] / 100,\n            o = t[2] / 100;\n        return 0 === o ? [0, 0, 0] : (o *= 2, n *= 1 >= o ? o : 2 - o, a = (o + n) / 2, e = 2 * n / (o + n), [i, 100 * e, 100 * a]);\n      }\n\n      function p(t) {\n        return o(h(t));\n      }\n\n      function m(t) {\n        return l(h(t));\n      }\n\n      function v(t) {\n        return s(h(t));\n      }\n\n      function x(t) {\n        var e = t[0] / 60,\n            a = t[1] / 100,\n            i = t[2] / 100,\n            n = Math.floor(e) % 6,\n            o = e - Math.floor(e),\n            r = 255 * i * (1 - a),\n            l = 255 * i * (1 - a * o),\n            s = 255 * i * (1 - a * (1 - o)),\n            i = 255 * i;\n\n        switch (n) {\n          case 0:\n            return [i, s, r];\n\n          case 1:\n            return [l, i, r];\n\n          case 2:\n            return [r, i, s];\n\n          case 3:\n            return [r, l, i];\n\n          case 4:\n            return [s, r, i];\n\n          case 5:\n            return [i, r, l];\n        }\n      }\n\n      function y(t) {\n        var e,\n            a,\n            i = t[0],\n            n = t[1] / 100,\n            o = t[2] / 100;\n        return a = (2 - n) * o, e = n * o, e /= 1 >= a ? a : 2 - a, e = e || 0, a /= 2, [i, 100 * e, 100 * a];\n      }\n\n      function k(t) {\n        return o(x(t));\n      }\n\n      function S(t) {\n        return l(x(t));\n      }\n\n      function w(t) {\n        return s(x(t));\n      }\n\n      function M(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0] / 360,\n            l = t[1] / 100,\n            s = t[2] / 100,\n            d = l + s;\n\n        switch (d > 1 && (l /= d, s /= d), e = Math.floor(6 * o), a = 1 - s, i = 6 * o - e, 0 != (1 & e) && (i = 1 - i), n = l + i * (a - l), e) {\n          default:\n          case 6:\n          case 0:\n            r = a, g = n, b = l;\n            break;\n\n          case 1:\n            r = n, g = a, b = l;\n            break;\n\n          case 2:\n            r = l, g = a, b = n;\n            break;\n\n          case 3:\n            r = l, g = n, b = a;\n            break;\n\n          case 4:\n            r = n, g = l, b = a;\n            break;\n\n          case 5:\n            r = a, g = l, b = n;\n        }\n\n        return [255 * r, 255 * g, 255 * b];\n      }\n\n      function C(t) {\n        return i(M(t));\n      }\n\n      function D(t) {\n        return n(M(t));\n      }\n\n      function I(t) {\n        return l(M(t));\n      }\n\n      function A(t) {\n        return s(M(t));\n      }\n\n      function T(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 100,\n            o = t[1] / 100,\n            r = t[2] / 100,\n            l = t[3] / 100;\n        return e = 1 - Math.min(1, n * (1 - l) + l), a = 1 - Math.min(1, o * (1 - l) + l), i = 1 - Math.min(1, r * (1 - l) + l), [255 * e, 255 * a, 255 * i];\n      }\n\n      function P(t) {\n        return i(T(t));\n      }\n\n      function F(t) {\n        return n(T(t));\n      }\n\n      function _(t) {\n        return o(T(t));\n      }\n\n      function R(t) {\n        return s(T(t));\n      }\n\n      function V(t) {\n        var e,\n            a,\n            i,\n            n = t[0] / 100,\n            o = t[1] / 100,\n            r = t[2] / 100;\n        return e = 3.2406 * n + -1.5372 * o + r * -0.4986, a = n * -0.9689 + 1.8758 * o + 0.0415 * r, i = 0.0557 * n + o * -0.204 + 1.057 * r, e = e > 0.0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - 0.055 : e = 12.92 * e, a = a > 0.0031308 ? 1.055 * Math.pow(a, 1 / 2.4) - 0.055 : a = 12.92 * a, i = i > 0.0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - 0.055 : i = 12.92 * i, e = Math.min(Math.max(0, e), 1), a = Math.min(Math.max(0, a), 1), i = Math.min(Math.max(0, i), 1), [255 * e, 255 * a, 255 * i];\n      }\n\n      function L(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return n /= 95.047, o /= 100, r /= 108.883, n = n > 0.008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, o = o > 0.008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, e = 116 * o - 16, a = 500 * (n - o), i = 200 * (o - r), [e, a, i];\n      }\n\n      function O(t) {\n        return W(L(t));\n      }\n\n      function B(t) {\n        var e,\n            a,\n            i,\n            n,\n            o = t[0],\n            r = t[1],\n            l = t[2];\n        return 8 >= o ? (a = 100 * o / 903.3, n = 7.787 * (a / 100) + 16 / 116) : (a = 100 * Math.pow((o + 16) / 116, 3), n = Math.pow(a / 100, 1 / 3)), e = 0.008856 >= e / 95.047 ? e = 95.047 * (r / 500 + n - 16 / 116) / 7.787 : 95.047 * Math.pow(r / 500 + n, 3), i = 0.008859 >= i / 108.883 ? i = 108.883 * (n - l / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(n - l / 200, 3), [e, a, i];\n      }\n\n      function W(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return e = Math.atan2(r, o), a = 360 * e / 2 / Math.PI, 0 > a && (a += 360), i = Math.sqrt(o * o + r * r), [n, i, a];\n      }\n\n      function z(t) {\n        return V(B(t));\n      }\n\n      function N(t) {\n        var e,\n            a,\n            i,\n            n = t[0],\n            o = t[1],\n            r = t[2];\n        return i = r / 360 * 2 * Math.PI, e = o * Math.cos(i), a = o * Math.sin(i), [n, e, a];\n      }\n\n      function E(t) {\n        return B(N(t));\n      }\n\n      function H(t) {\n        return z(N(t));\n      }\n\n      function U(t) {\n        return Z[t];\n      }\n\n      function j(t) {\n        return i(U(t));\n      }\n\n      function q(t) {\n        return n(U(t));\n      }\n\n      function Y(t) {\n        return o(U(t));\n      }\n\n      function X(t) {\n        return l(U(t));\n      }\n\n      function K(t) {\n        return u(U(t));\n      }\n\n      function J(t) {\n        return d(U(t));\n      }\n\n      e.exports = {\n        rgb2hsl: i,\n        rgb2hsv: n,\n        rgb2hwb: o,\n        rgb2cmyk: l,\n        rgb2keyword: s,\n        rgb2xyz: d,\n        rgb2lab: u,\n        rgb2lch: c,\n        hsl2rgb: h,\n        hsl2hsv: f,\n        hsl2hwb: p,\n        hsl2cmyk: m,\n        hsl2keyword: v,\n        hsv2rgb: x,\n        hsv2hsl: y,\n        hsv2hwb: k,\n        hsv2cmyk: S,\n        hsv2keyword: w,\n        hwb2rgb: M,\n        hwb2hsl: C,\n        hwb2hsv: D,\n        hwb2cmyk: I,\n        hwb2keyword: A,\n        cmyk2rgb: T,\n        cmyk2hsl: P,\n        cmyk2hsv: F,\n        cmyk2hwb: _,\n        cmyk2keyword: R,\n        keyword2rgb: U,\n        keyword2hsl: j,\n        keyword2hsv: q,\n        keyword2hwb: Y,\n        keyword2cmyk: X,\n        keyword2lab: K,\n        keyword2xyz: J,\n        xyz2rgb: V,\n        xyz2lab: L,\n        xyz2lch: O,\n        lab2xyz: B,\n        lab2rgb: z,\n        lab2lch: W,\n        lch2lab: N,\n        lch2xyz: E,\n        lch2rgb: H\n      };\n      var Z = {\n        aliceblue: [240, 248, 255],\n        antiquewhite: [250, 235, 215],\n        aqua: [0, 255, 255],\n        aquamarine: [127, 255, 212],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        bisque: [255, 228, 196],\n        black: [0, 0, 0],\n        blanchedalmond: [255, 235, 205],\n        blue: [0, 0, 255],\n        blueviolet: [138, 43, 226],\n        brown: [165, 42, 42],\n        burlywood: [222, 184, 135],\n        cadetblue: [95, 158, 160],\n        chartreuse: [127, 255, 0],\n        chocolate: [210, 105, 30],\n        coral: [255, 127, 80],\n        cornflowerblue: [100, 149, 237],\n        cornsilk: [255, 248, 220],\n        crimson: [220, 20, 60],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgoldenrod: [184, 134, 11],\n        darkgray: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkgrey: [169, 169, 169],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkseagreen: [143, 188, 143],\n        darkslateblue: [72, 61, 139],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        darkturquoise: [0, 206, 209],\n        darkviolet: [148, 0, 211],\n        deeppink: [255, 20, 147],\n        deepskyblue: [0, 191, 255],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        dodgerblue: [30, 144, 255],\n        firebrick: [178, 34, 34],\n        floralwhite: [255, 250, 240],\n        forestgreen: [34, 139, 34],\n        fuchsia: [255, 0, 255],\n        gainsboro: [220, 220, 220],\n        ghostwhite: [248, 248, 255],\n        gold: [255, 215, 0],\n        goldenrod: [218, 165, 32],\n        gray: [128, 128, 128],\n        green: [0, 128, 0],\n        greenyellow: [173, 255, 47],\n        grey: [128, 128, 128],\n        honeydew: [240, 255, 240],\n        hotpink: [255, 105, 180],\n        indianred: [205, 92, 92],\n        indigo: [75, 0, 130],\n        ivory: [255, 255, 240],\n        khaki: [240, 230, 140],\n        lavender: [230, 230, 250],\n        lavenderblush: [255, 240, 245],\n        lawngreen: [124, 252, 0],\n        lemonchiffon: [255, 250, 205],\n        lightblue: [173, 216, 230],\n        lightcoral: [240, 128, 128],\n        lightcyan: [224, 255, 255],\n        lightgoldenrodyellow: [250, 250, 210],\n        lightgray: [211, 211, 211],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightsalmon: [255, 160, 122],\n        lightseagreen: [32, 178, 170],\n        lightskyblue: [135, 206, 250],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        lightsteelblue: [176, 196, 222],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        limegreen: [50, 205, 50],\n        linen: [250, 240, 230],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        mediumaquamarine: [102, 205, 170],\n        mediumblue: [0, 0, 205],\n        mediumorchid: [186, 85, 211],\n        mediumpurple: [147, 112, 219],\n        mediumseagreen: [60, 179, 113],\n        mediumslateblue: [123, 104, 238],\n        mediumspringgreen: [0, 250, 154],\n        mediumturquoise: [72, 209, 204],\n        mediumvioletred: [199, 21, 133],\n        midnightblue: [25, 25, 112],\n        mintcream: [245, 255, 250],\n        mistyrose: [255, 228, 225],\n        moccasin: [255, 228, 181],\n        navajowhite: [255, 222, 173],\n        navy: [0, 0, 128],\n        oldlace: [253, 245, 230],\n        olive: [128, 128, 0],\n        olivedrab: [107, 142, 35],\n        orange: [255, 165, 0],\n        orangered: [255, 69, 0],\n        orchid: [218, 112, 214],\n        palegoldenrod: [238, 232, 170],\n        palegreen: [152, 251, 152],\n        paleturquoise: [175, 238, 238],\n        palevioletred: [219, 112, 147],\n        papayawhip: [255, 239, 213],\n        peachpuff: [255, 218, 185],\n        peru: [205, 133, 63],\n        pink: [255, 192, 203],\n        plum: [221, 160, 221],\n        powderblue: [176, 224, 230],\n        purple: [128, 0, 128],\n        rebeccapurple: [102, 51, 153],\n        red: [255, 0, 0],\n        rosybrown: [188, 143, 143],\n        royalblue: [65, 105, 225],\n        saddlebrown: [139, 69, 19],\n        salmon: [250, 128, 114],\n        sandybrown: [244, 164, 96],\n        seagreen: [46, 139, 87],\n        seashell: [255, 245, 238],\n        sienna: [160, 82, 45],\n        silver: [192, 192, 192],\n        skyblue: [135, 206, 235],\n        slateblue: [106, 90, 205],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        snow: [255, 250, 250],\n        springgreen: [0, 255, 127],\n        steelblue: [70, 130, 180],\n        tan: [210, 180, 140],\n        teal: [0, 128, 128],\n        thistle: [216, 191, 216],\n        tomato: [255, 99, 71],\n        turquoise: [64, 224, 208],\n        violet: [238, 130, 238],\n        wheat: [245, 222, 179],\n        white: [255, 255, 255],\n        whitesmoke: [245, 245, 245],\n        yellow: [255, 255, 0],\n        yellowgreen: [154, 205, 50]\n      },\n          G = {};\n\n      for (var Q in Z) {\n        G[JSON.stringify(Z[Q])] = Q;\n      }\n    }, {}],\n    5: [function (t, e, a) {\n      var i = t(4),\n          n = function n() {\n        return new d();\n      };\n\n      for (var o in i) {\n        n[o + \"Raw\"] = function (t) {\n          return function (e) {\n            return \"number\" == typeof e && (e = Array.prototype.slice.call(arguments)), i[t](e);\n          };\n        }(o);\n\n        var r = /(\\w+)2(\\w+)/.exec(o),\n            l = r[1],\n            s = r[2];\n        n[l] = n[l] || {}, n[l][s] = n[o] = function (t) {\n          return function (e) {\n            \"number\" == typeof e && (e = Array.prototype.slice.call(arguments));\n            var a = i[t](e);\n            if (\"string\" == typeof a || void 0 === a) return a;\n\n            for (var n = 0; n < a.length; n++) {\n              a[n] = Math.round(a[n]);\n            }\n\n            return a;\n          };\n        }(o);\n      }\n\n      var d = function d() {\n        this.convs = {};\n      };\n\n      d.prototype.routeSpace = function (t, e) {\n        var a = e[0];\n        return void 0 === a ? this.getValues(t) : (\"number\" == typeof a && (a = Array.prototype.slice.call(e)), this.setValues(t, a));\n      }, d.prototype.setValues = function (t, e) {\n        return this.space = t, this.convs = {}, this.convs[t] = e, this;\n      }, d.prototype.getValues = function (t) {\n        var e = this.convs[t];\n\n        if (!e) {\n          var a = this.space,\n              i = this.convs[a];\n          e = n[a][t](i), this.convs[t] = e;\n        }\n\n        return e;\n      }, [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (t) {\n        d.prototype[t] = function (e) {\n          return this.routeSpace(t, arguments);\n        };\n      }), e.exports = n;\n    }, {\n      4: 4\n    }],\n    6: [function (t, e, a) {\n      e.exports = {\n        aliceblue: [240, 248, 255],\n        antiquewhite: [250, 235, 215],\n        aqua: [0, 255, 255],\n        aquamarine: [127, 255, 212],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        bisque: [255, 228, 196],\n        black: [0, 0, 0],\n        blanchedalmond: [255, 235, 205],\n        blue: [0, 0, 255],\n        blueviolet: [138, 43, 226],\n        brown: [165, 42, 42],\n        burlywood: [222, 184, 135],\n        cadetblue: [95, 158, 160],\n        chartreuse: [127, 255, 0],\n        chocolate: [210, 105, 30],\n        coral: [255, 127, 80],\n        cornflowerblue: [100, 149, 237],\n        cornsilk: [255, 248, 220],\n        crimson: [220, 20, 60],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgoldenrod: [184, 134, 11],\n        darkgray: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkgrey: [169, 169, 169],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkseagreen: [143, 188, 143],\n        darkslateblue: [72, 61, 139],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        darkturquoise: [0, 206, 209],\n        darkviolet: [148, 0, 211],\n        deeppink: [255, 20, 147],\n        deepskyblue: [0, 191, 255],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        dodgerblue: [30, 144, 255],\n        firebrick: [178, 34, 34],\n        floralwhite: [255, 250, 240],\n        forestgreen: [34, 139, 34],\n        fuchsia: [255, 0, 255],\n        gainsboro: [220, 220, 220],\n        ghostwhite: [248, 248, 255],\n        gold: [255, 215, 0],\n        goldenrod: [218, 165, 32],\n        gray: [128, 128, 128],\n        green: [0, 128, 0],\n        greenyellow: [173, 255, 47],\n        grey: [128, 128, 128],\n        honeydew: [240, 255, 240],\n        hotpink: [255, 105, 180],\n        indianred: [205, 92, 92],\n        indigo: [75, 0, 130],\n        ivory: [255, 255, 240],\n        khaki: [240, 230, 140],\n        lavender: [230, 230, 250],\n        lavenderblush: [255, 240, 245],\n        lawngreen: [124, 252, 0],\n        lemonchiffon: [255, 250, 205],\n        lightblue: [173, 216, 230],\n        lightcoral: [240, 128, 128],\n        lightcyan: [224, 255, 255],\n        lightgoldenrodyellow: [250, 250, 210],\n        lightgray: [211, 211, 211],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightsalmon: [255, 160, 122],\n        lightseagreen: [32, 178, 170],\n        lightskyblue: [135, 206, 250],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        lightsteelblue: [176, 196, 222],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        limegreen: [50, 205, 50],\n        linen: [250, 240, 230],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        mediumaquamarine: [102, 205, 170],\n        mediumblue: [0, 0, 205],\n        mediumorchid: [186, 85, 211],\n        mediumpurple: [147, 112, 219],\n        mediumseagreen: [60, 179, 113],\n        mediumslateblue: [123, 104, 238],\n        mediumspringgreen: [0, 250, 154],\n        mediumturquoise: [72, 209, 204],\n        mediumvioletred: [199, 21, 133],\n        midnightblue: [25, 25, 112],\n        mintcream: [245, 255, 250],\n        mistyrose: [255, 228, 225],\n        moccasin: [255, 228, 181],\n        navajowhite: [255, 222, 173],\n        navy: [0, 0, 128],\n        oldlace: [253, 245, 230],\n        olive: [128, 128, 0],\n        olivedrab: [107, 142, 35],\n        orange: [255, 165, 0],\n        orangered: [255, 69, 0],\n        orchid: [218, 112, 214],\n        palegoldenrod: [238, 232, 170],\n        palegreen: [152, 251, 152],\n        paleturquoise: [175, 238, 238],\n        palevioletred: [219, 112, 147],\n        papayawhip: [255, 239, 213],\n        peachpuff: [255, 218, 185],\n        peru: [205, 133, 63],\n        pink: [255, 192, 203],\n        plum: [221, 160, 221],\n        powderblue: [176, 224, 230],\n        purple: [128, 0, 128],\n        rebeccapurple: [102, 51, 153],\n        red: [255, 0, 0],\n        rosybrown: [188, 143, 143],\n        royalblue: [65, 105, 225],\n        saddlebrown: [139, 69, 19],\n        salmon: [250, 128, 114],\n        sandybrown: [244, 164, 96],\n        seagreen: [46, 139, 87],\n        seashell: [255, 245, 238],\n        sienna: [160, 82, 45],\n        silver: [192, 192, 192],\n        skyblue: [135, 206, 235],\n        slateblue: [106, 90, 205],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        snow: [255, 250, 250],\n        springgreen: [0, 255, 127],\n        steelblue: [70, 130, 180],\n        tan: [210, 180, 140],\n        teal: [0, 128, 128],\n        thistle: [216, 191, 216],\n        tomato: [255, 99, 71],\n        turquoise: [64, 224, 208],\n        violet: [238, 130, 238],\n        wheat: [245, 222, 179],\n        white: [255, 255, 255],\n        whitesmoke: [245, 245, 245],\n        yellow: [255, 255, 0],\n        yellowgreen: [154, 205, 50]\n      };\n    }, {}],\n    7: [function (t, e, a) {\n      var i = t(28)();\n      t(26)(i), t(22)(i), t(25)(i), t(21)(i), t(23)(i), t(24)(i), t(29)(i), t(33)(i), t(31)(i), t(34)(i), t(32)(i), t(35)(i), t(30)(i), t(27)(i), t(36)(i), t(37)(i), t(38)(i), t(39)(i), t(40)(i), t(43)(i), t(41)(i), t(42)(i), t(44)(i), t(45)(i), t(46)(i), t(15)(i), t(16)(i), t(17)(i), t(18)(i), t(19)(i), t(20)(i), t(8)(i), t(9)(i), t(10)(i), t(11)(i), t(12)(i), t(13)(i), t(14)(i), window.Chart = e.exports = i;\n    }, {\n      10: 10,\n      11: 11,\n      12: 12,\n      13: 13,\n      14: 14,\n      15: 15,\n      16: 16,\n      17: 17,\n      18: 18,\n      19: 19,\n      20: 20,\n      21: 21,\n      22: 22,\n      23: 23,\n      24: 24,\n      25: 25,\n      26: 26,\n      27: 27,\n      28: 28,\n      29: 29,\n      30: 30,\n      31: 31,\n      32: 32,\n      33: 33,\n      34: 34,\n      35: 35,\n      36: 36,\n      37: 37,\n      38: 38,\n      39: 39,\n      40: 40,\n      41: 41,\n      42: 42,\n      43: 43,\n      44: 44,\n      45: 45,\n      46: 46,\n      8: 8,\n      9: 9\n    }],\n    8: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Bar = function (e, a) {\n          return a.type = \"bar\", new t(e, a);\n        };\n      };\n    }, {}],\n    9: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Bubble = function (e, a) {\n          return a.type = \"bubble\", new t(e, a);\n        };\n      };\n    }, {}],\n    10: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Doughnut = function (e, a) {\n          return a.type = \"doughnut\", new t(e, a);\n        };\n      };\n    }, {}],\n    11: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Line = function (e, a) {\n          return a.type = \"line\", new t(e, a);\n        };\n      };\n    }, {}],\n    12: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.PolarArea = function (e, a) {\n          return a.type = \"polarArea\", new t(e, a);\n        };\n      };\n    }, {}],\n    13: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        t.Radar = function (e, a) {\n          return a.type = \"radar\", new t(e, a);\n        };\n      };\n    }, {}],\n    14: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = {\n          hover: {\n            mode: \"single\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\",\n              id: \"x-axis-1\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              position: \"left\",\n              id: \"y-axis-1\"\n            }]\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t) {\n                return \"(\" + t.xLabel + \", \" + t.yLabel + \")\";\n              }\n            }\n          }\n        };\n        t.defaults.scatter = e, t.controllers.scatter = t.controllers.line, t.Scatter = function (e, a) {\n          return a.type = \"scatter\", new t(e, a);\n        };\n      };\n    }, {}],\n    15: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.bar = {\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"category\",\n              categoryPercentage: 0.8,\n              barPercentage: 0.9,\n              gridLines: {\n                offsetGridLines: !0\n              }\n            }],\n            yAxes: [{\n              type: \"linear\"\n            }]\n          }\n        }, t.controllers.bar = t.DatasetController.extend({\n          dataElementType: t.elements.Rectangle,\n          initialize: function initialize(e, a) {\n            t.DatasetController.prototype.initialize.call(this, e, a), this.getMeta().bar = !0;\n          },\n          getBarCount: function getBarCount() {\n            var t = this,\n                a = 0;\n            return e.each(t.chart.data.datasets, function (e, i) {\n              var n = t.chart.getDatasetMeta(i);\n              n.bar && t.chart.isDatasetVisible(i) && ++a;\n            }, t), a;\n          },\n          update: function update(t) {\n            var a = this;\n            e.each(a.getMeta().data, function (e, i) {\n              a.updateElement(e, i, t);\n            }, a);\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.getMeta(),\n                r = n.getScaleForId(o.xAxisID),\n                l = n.getScaleForId(o.yAxisID),\n                s = l.getBasePixel(),\n                d = n.chart.options.elements.rectangle,\n                u = t.custom || {},\n                c = n.getDataset();\n            t._xScale = r, t._yScale = l, t._datasetIndex = n.index, t._index = a;\n            var h = n.getRuler(a);\n            t._model = {\n              x: n.calculateBarX(a, n.index, h),\n              y: i ? s : n.calculateBarY(a, n.index),\n              label: n.chart.data.labels[a],\n              datasetLabel: c.label,\n              base: i ? s : n.calculateBarBase(n.index, a),\n              width: n.calculateBarWidth(h),\n              backgroundColor: u.backgroundColor ? u.backgroundColor : e.getValueAtIndexOrDefault(c.backgroundColor, a, d.backgroundColor),\n              borderSkipped: u.borderSkipped ? u.borderSkipped : d.borderSkipped,\n              borderColor: u.borderColor ? u.borderColor : e.getValueAtIndexOrDefault(c.borderColor, a, d.borderColor),\n              borderWidth: u.borderWidth ? u.borderWidth : e.getValueAtIndexOrDefault(c.borderWidth, a, d.borderWidth)\n            }, t.pivot();\n          },\n          calculateBarBase: function calculateBarBase(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = 0;\n\n            if (n.options.stacked) {\n              for (var r = a.chart, l = r.data.datasets, s = Number(l[t].data[e]), d = 0; t > d; d++) {\n                var u = l[d],\n                    c = r.getDatasetMeta(d);\n\n                if (c.bar && c.yAxisID === n.id && r.isDatasetVisible(d)) {\n                  var h = Number(u.data[e]);\n                  o += 0 > s ? Math.min(h, 0) : Math.max(h, 0);\n                }\n              }\n\n              return n.getPixelForValue(o);\n            }\n\n            return n.getBasePixel();\n          },\n          getRuler: function getRuler(t) {\n            var e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = a.getBarCount();\n            e = \"category\" === n.options.type ? n.getPixelForTick(t + 1) - n.getPixelForTick(t) : n.width / n.ticks.length;\n            var r = e * n.options.categoryPercentage,\n                l = (e - e * n.options.categoryPercentage) / 2,\n                s = r / o;\n\n            if (n.ticks.length !== a.chart.data.labels.length) {\n              var d = n.ticks.length / a.chart.data.labels.length;\n              s *= d;\n            }\n\n            var u = s * n.options.barPercentage,\n                c = s - s * n.options.barPercentage;\n            return {\n              datasetCount: o,\n              tickWidth: e,\n              categoryWidth: r,\n              categorySpacing: l,\n              fullBarWidth: s,\n              barWidth: u,\n              barSpacing: c\n            };\n          },\n          calculateBarWidth: function calculateBarWidth(t) {\n            var e = this.getScaleForId(this.getMeta().xAxisID);\n            return e.options.barThickness ? e.options.barThickness : e.options.stacked ? t.categoryWidth : t.barWidth;\n          },\n          getBarIndex: function getBarIndex(t) {\n            var e,\n                a,\n                i = 0;\n\n            for (a = 0; t > a; ++a) {\n              e = this.chart.getDatasetMeta(a), e.bar && this.chart.isDatasetVisible(a) && ++i;\n            }\n\n            return i;\n          },\n          calculateBarX: function calculateBarX(t, e, a) {\n            var i = this,\n                n = i.getMeta(),\n                o = i.getScaleForId(n.xAxisID),\n                r = i.getBarIndex(e),\n                l = o.getPixelForValue(null, t, e, i.chart.isCombo);\n            return l -= i.chart.isCombo ? a.tickWidth / 2 : 0, o.options.stacked ? l + a.categoryWidth / 2 + a.categorySpacing : l + a.barWidth / 2 + a.categorySpacing + a.barWidth * r + a.barSpacing / 2 + a.barSpacing * r;\n          },\n          calculateBarY: function calculateBarY(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = Number(a.getDataset().data[t]);\n\n            if (n.options.stacked) {\n              for (var r = 0, l = 0, s = 0; e > s; s++) {\n                var d = a.chart.data.datasets[s],\n                    u = a.chart.getDatasetMeta(s);\n\n                if (u.bar && u.yAxisID === n.id && a.chart.isDatasetVisible(s)) {\n                  var c = Number(d.data[t]);\n                  0 > c ? l += c || 0 : r += c || 0;\n                }\n              }\n\n              return 0 > o ? n.getPixelForValue(l + o) : n.getPixelForValue(r + o);\n            }\n\n            return n.getPixelForValue(o);\n          },\n          draw: function draw(t) {\n            var e,\n                a,\n                i = this,\n                n = t || 1,\n                o = i.getMeta().data,\n                r = i.getDataset();\n\n            for (e = 0, a = o.length; a > e; ++e) {\n              var l = r.data[e];\n              null === l || void 0 === l || isNaN(l) || o[e].transition(n).draw();\n            }\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model;\n            o.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : e.getValueAtIndexOrDefault(a.hoverBackgroundColor, i, e.getHoverColor(o.backgroundColor)), o.borderColor = n.hoverBorderColor ? n.hoverBorderColor : e.getValueAtIndexOrDefault(a.hoverBorderColor, i, e.getHoverColor(o.borderColor)), o.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : e.getValueAtIndexOrDefault(a.hoverBorderWidth, i, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model,\n                r = this.chart.options.elements.rectangle;\n            o.backgroundColor = n.backgroundColor ? n.backgroundColor : e.getValueAtIndexOrDefault(a.backgroundColor, i, r.backgroundColor), o.borderColor = n.borderColor ? n.borderColor : e.getValueAtIndexOrDefault(a.borderColor, i, r.borderColor), o.borderWidth = n.borderWidth ? n.borderWidth : e.getValueAtIndexOrDefault(a.borderWidth, i, r.borderWidth);\n          }\n        }), t.defaults.horizontalBar = {\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\"\n            }],\n            yAxes: [{\n              position: \"left\",\n              type: \"category\",\n              categoryPercentage: 0.8,\n              barPercentage: 0.9,\n              gridLines: {\n                offsetGridLines: !0\n              }\n            }]\n          },\n          elements: {\n            rectangle: {\n              borderSkipped: \"left\"\n            }\n          },\n          tooltips: {\n            callbacks: {\n              title: function title(t, e) {\n                var a = \"\";\n                return t.length > 0 && (t[0].yLabel ? a = t[0].yLabel : e.labels.length > 0 && t[0].index < e.labels.length && (a = e.labels[t[0].index])), a;\n              },\n              label: function label(t, e) {\n                var a = e.datasets[t.datasetIndex].label || \"\";\n                return a + \": \" + t.xLabel;\n              }\n            }\n          }\n        }, t.controllers.horizontalBar = t.controllers.bar.extend({\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.getMeta(),\n                r = n.getScaleForId(o.xAxisID),\n                l = n.getScaleForId(o.yAxisID),\n                s = r.getBasePixel(),\n                d = t.custom || {},\n                u = n.getDataset(),\n                c = n.chart.options.elements.rectangle;\n            t._xScale = r, t._yScale = l, t._datasetIndex = n.index, t._index = a;\n            var h = n.getRuler(a);\n            t._model = {\n              x: i ? s : n.calculateBarX(a, n.index),\n              y: n.calculateBarY(a, n.index, h),\n              label: n.chart.data.labels[a],\n              datasetLabel: u.label,\n              base: i ? s : n.calculateBarBase(n.index, a),\n              height: n.calculateBarHeight(h),\n              backgroundColor: d.backgroundColor ? d.backgroundColor : e.getValueAtIndexOrDefault(u.backgroundColor, a, c.backgroundColor),\n              borderSkipped: d.borderSkipped ? d.borderSkipped : c.borderSkipped,\n              borderColor: d.borderColor ? d.borderColor : e.getValueAtIndexOrDefault(u.borderColor, a, c.borderColor),\n              borderWidth: d.borderWidth ? d.borderWidth : e.getValueAtIndexOrDefault(u.borderWidth, a, c.borderWidth)\n            }, t.draw = function () {\n              function t(t) {\n                return s[(u + t) % 4];\n              }\n\n              var e = this._chart.ctx,\n                  a = this._view,\n                  i = a.height / 2,\n                  n = a.y - i,\n                  o = a.y + i,\n                  r = a.base - (a.base - a.x),\n                  l = a.borderWidth / 2;\n              a.borderWidth && (n += l, o -= l, r += l), e.beginPath(), e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth;\n              var s = [[a.base, o], [a.base, n], [r, n], [r, o]],\n                  d = [\"bottom\", \"left\", \"top\", \"right\"],\n                  u = d.indexOf(a.borderSkipped, 0);\n              -1 === u && (u = 0), e.moveTo.apply(e, t(0));\n\n              for (var c = 1; 4 > c; c++) {\n                e.lineTo.apply(e, t(c));\n              }\n\n              e.fill(), a.borderWidth && e.stroke();\n            }, t.pivot();\n          },\n          calculateBarBase: function calculateBarBase(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = 0;\n\n            if (n.options.stacked) {\n              for (var r = a.chart, l = r.data.datasets, s = Number(l[t].data[e]), d = 0; t > d; d++) {\n                var u = l[d],\n                    c = r.getDatasetMeta(d);\n\n                if (c.bar && c.xAxisID === n.id && r.isDatasetVisible(d)) {\n                  var h = Number(u.data[e]);\n                  o += 0 > s ? Math.min(h, 0) : Math.max(h, 0);\n                }\n              }\n\n              return n.getPixelForValue(o);\n            }\n\n            return n.getBasePixel();\n          },\n          getRuler: function getRuler(t) {\n            var e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.yAxisID),\n                o = a.getBarCount();\n            e = \"category\" === n.options.type ? n.getPixelForTick(t + 1) - n.getPixelForTick(t) : n.width / n.ticks.length;\n            var r = e * n.options.categoryPercentage,\n                l = (e - e * n.options.categoryPercentage) / 2,\n                s = r / o;\n\n            if (n.ticks.length !== a.chart.data.labels.length) {\n              var d = n.ticks.length / a.chart.data.labels.length;\n              s *= d;\n            }\n\n            var u = s * n.options.barPercentage,\n                c = s - s * n.options.barPercentage;\n            return {\n              datasetCount: o,\n              tickHeight: e,\n              categoryHeight: r,\n              categorySpacing: l,\n              fullBarHeight: s,\n              barHeight: u,\n              barSpacing: c\n            };\n          },\n          calculateBarHeight: function calculateBarHeight(t) {\n            var e = this,\n                a = e.getScaleForId(e.getMeta().yAxisID);\n            return a.options.barThickness ? a.options.barThickness : a.options.stacked ? t.categoryHeight : t.barHeight;\n          },\n          calculateBarX: function calculateBarX(t, e) {\n            var a = this,\n                i = a.getMeta(),\n                n = a.getScaleForId(i.xAxisID),\n                o = Number(a.getDataset().data[t]);\n\n            if (n.options.stacked) {\n              for (var r = 0, l = 0, s = 0; e > s; s++) {\n                var d = a.chart.data.datasets[s],\n                    u = a.chart.getDatasetMeta(s);\n\n                if (u.bar && u.xAxisID === n.id && a.chart.isDatasetVisible(s)) {\n                  var c = Number(d.data[t]);\n                  0 > c ? l += c || 0 : r += c || 0;\n                }\n              }\n\n              return 0 > o ? n.getPixelForValue(l + o) : n.getPixelForValue(r + o);\n            }\n\n            return n.getPixelForValue(o);\n          },\n          calculateBarY: function calculateBarY(t, e, a) {\n            var i = this,\n                n = i.getMeta(),\n                o = i.getScaleForId(n.yAxisID),\n                r = i.getBarIndex(e),\n                l = o.getPixelForValue(null, t, e, i.chart.isCombo);\n            return l -= i.chart.isCombo ? a.tickHeight / 2 : 0, o.options.stacked ? l + a.categoryHeight / 2 + a.categorySpacing : l + a.barHeight / 2 + a.categorySpacing + a.barHeight * r + a.barSpacing / 2 + a.barSpacing * r;\n          }\n        });\n      };\n    }, {}],\n    16: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.bubble = {\n          hover: {\n            mode: \"single\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"linear\",\n              position: \"bottom\",\n              id: \"x-axis-0\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              position: \"left\",\n              id: \"y-axis-0\"\n            }]\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, e) {\n                var a = e.datasets[t.datasetIndex].label || \"\",\n                    i = e.datasets[t.datasetIndex].data[t.index];\n                return a + \": (\" + t.xLabel + \", \" + t.yLabel + \", \" + i.r + \")\";\n              }\n            }\n          }\n        }, t.controllers.bubble = t.DatasetController.extend({\n          dataElementType: t.elements.Point,\n          update: function update(t) {\n            var a = this,\n                i = a.getMeta(),\n                n = i.data;\n            e.each(n, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(a, i, n) {\n            var o = this,\n                r = o.getMeta(),\n                l = o.getScaleForId(r.xAxisID),\n                s = o.getScaleForId(r.yAxisID),\n                d = a.custom || {},\n                u = o.getDataset(),\n                c = u.data[i],\n                h = o.chart.options.elements.point,\n                f = o.index;\n            e.extend(a, {\n              _xScale: l,\n              _yScale: s,\n              _datasetIndex: f,\n              _index: i,\n              _model: {\n                x: n ? l.getPixelForDecimal(0.5) : l.getPixelForValue(\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(c) ? c : NaN, i, f, o.chart.isCombo),\n                y: n ? s.getBasePixel() : s.getPixelForValue(c, i, f),\n                radius: n ? 0 : d.radius ? d.radius : o.getRadius(c),\n                hitRadius: d.hitRadius ? d.hitRadius : e.getValueAtIndexOrDefault(u.hitRadius, i, h.hitRadius)\n              }\n            }), t.DatasetController.prototype.removeHoverStyle.call(o, a, h);\n            var g = a._model;\n            g.skip = d.skip ? d.skip : isNaN(g.x) || isNaN(g.y), a.pivot();\n          },\n          getRadius: function getRadius(t) {\n            return t.r || this.chart.options.elements.point.radius;\n          },\n          setHoverStyle: function setHoverStyle(a) {\n            var i = this;\n            t.DatasetController.prototype.setHoverStyle.call(i, a);\n            var n = i.chart.data.datasets[a._datasetIndex],\n                o = a._index,\n                r = a.custom || {},\n                l = a._model;\n            l.radius = r.hoverRadius ? r.hoverRadius : e.getValueAtIndexOrDefault(n.hoverRadius, o, i.chart.options.elements.point.hoverRadius) + i.getRadius(n.data[o]);\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            var a = this;\n            t.DatasetController.prototype.removeHoverStyle.call(a, e, a.chart.options.elements.point);\n            var i = a.chart.data.datasets[e._datasetIndex].data[e._index],\n                n = e.custom || {},\n                o = e._model;\n            o.radius = n.radius ? n.radius : a.getRadius(i);\n          }\n        });\n      };\n    }, {}],\n    17: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults;\n        a.doughnut = {\n          animation: {\n            animateRotate: !0,\n            animateScale: !1\n          },\n          aspectRatio: 1,\n          hover: {\n            mode: \"single\"\n          },\n          legendCallback: function legendCallback(t) {\n            var e = [];\n            e.push('<ul className=\"' + t.id + '-legend\">');\n            var a = t.data,\n                i = a.datasets,\n                n = a.labels;\n            if (i.length) for (var o = 0; o < i[0].data.length; ++o) {\n              e.push('<li><span style=\"background-color:' + i[0].backgroundColor[o] + '\"></span>'), n[o] && e.push(n[o]), e.push(\"</li>\");\n            }\n            return e.push(\"</ul>\"), e.join(\"\");\n          },\n          legend: {\n            labels: {\n              generateLabels: function generateLabels(t) {\n                var a = t.data;\n                return a.labels.length && a.datasets.length ? a.labels.map(function (i, n) {\n                  var o = t.getDatasetMeta(0),\n                      r = a.datasets[0],\n                      l = o.data[n],\n                      s = l && l.custom || {},\n                      d = e.getValueAtIndexOrDefault,\n                      u = t.options.elements.arc,\n                      c = s.backgroundColor ? s.backgroundColor : d(r.backgroundColor, n, u.backgroundColor),\n                      h = s.borderColor ? s.borderColor : d(r.borderColor, n, u.borderColor),\n                      f = s.borderWidth ? s.borderWidth : d(r.borderWidth, n, u.borderWidth);\n                  return {\n                    text: i,\n                    fillStyle: c,\n                    strokeStyle: h,\n                    lineWidth: f,\n                    hidden: isNaN(r.data[n]) || o.data[n].hidden,\n                    index: n\n                  };\n                }) : [];\n              }\n            },\n            onClick: function onClick(t, e) {\n              var a,\n                  i,\n                  n,\n                  o = e.index,\n                  r = this.chart;\n\n              for (a = 0, i = (r.data.datasets || []).length; i > a; ++a) {\n                n = r.getDatasetMeta(a), n.data[o] && (n.data[o].hidden = !n.data[o].hidden);\n              }\n\n              r.update();\n            }\n          },\n          cutoutPercentage: 50,\n          rotation: Math.PI * -0.5,\n          circumference: 2 * Math.PI,\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, a) {\n                var i = a.labels[t.index],\n                    n = \": \" + a.datasets[t.datasetIndex].data[t.index];\n                return e.isArray(i) ? (i = i.slice(), i[0] += n) : i += n, i;\n              }\n            }\n          }\n        }, a.pie = e.clone(a.doughnut), e.extend(a.pie, {\n          cutoutPercentage: 0\n        }), t.controllers.doughnut = t.controllers.pie = t.DatasetController.extend({\n          dataElementType: t.elements.Arc,\n          linkScales: e.noop,\n          getRingIndex: function getRingIndex(t) {\n            for (var e = 0, a = 0; t > a; ++a) {\n              this.chart.isDatasetVisible(a) && ++e;\n            }\n\n            return e;\n          },\n          update: function update(t) {\n            var a = this,\n                i = a.chart,\n                n = i.chartArea,\n                o = i.options,\n                r = o.elements.arc,\n                l = n.right - n.left - r.borderWidth,\n                s = n.bottom - n.top - r.borderWidth,\n                d = Math.min(l, s),\n                u = {\n              x: 0,\n              y: 0\n            },\n                c = a.getMeta(),\n                h = o.cutoutPercentage,\n                f = o.circumference;\n\n            if (f < 2 * Math.PI) {\n              var g = o.rotation % (2 * Math.PI);\n              g += 2 * Math.PI * (g >= Math.PI ? -1 : g < -Math.PI ? 1 : 0);\n              var p = g + f,\n                  m = {\n                x: Math.cos(g),\n                y: Math.sin(g)\n              },\n                  b = {\n                x: Math.cos(p),\n                y: Math.sin(p)\n              },\n                  v = 0 >= g && p >= 0 || g <= 2 * Math.PI && 2 * Math.PI <= p,\n                  x = g <= 0.5 * Math.PI && 0.5 * Math.PI <= p || g <= 2.5 * Math.PI && 2.5 * Math.PI <= p,\n                  y = g <= -Math.PI && -Math.PI <= p || g <= Math.PI && Math.PI <= p,\n                  k = g <= 0.5 * -Math.PI && 0.5 * -Math.PI <= p || g <= 1.5 * Math.PI && 1.5 * Math.PI <= p,\n                  S = h / 100,\n                  w = {\n                x: y ? -1 : Math.min(m.x * (m.x < 0 ? 1 : S), b.x * (b.x < 0 ? 1 : S)),\n                y: k ? -1 : Math.min(m.y * (m.y < 0 ? 1 : S), b.y * (b.y < 0 ? 1 : S))\n              },\n                  M = {\n                x: v ? 1 : Math.max(m.x * (m.x > 0 ? 1 : S), b.x * (b.x > 0 ? 1 : S)),\n                y: x ? 1 : Math.max(m.y * (m.y > 0 ? 1 : S), b.y * (b.y > 0 ? 1 : S))\n              },\n                  C = {\n                width: 0.5 * (M.x - w.x),\n                height: 0.5 * (M.y - w.y)\n              };\n              d = Math.min(l / C.width, s / C.height), u = {\n                x: (M.x + w.x) * -0.5,\n                y: (M.y + w.y) * -0.5\n              };\n            }\n\n            i.borderWidth = a.getMaxBorderWidth(c.data), i.outerRadius = Math.max((d - i.borderWidth) / 2, 0), i.innerRadius = Math.max(h ? i.outerRadius / 100 * h : 1, 0), i.radiusLength = (i.outerRadius - i.innerRadius) / i.getVisibleDatasetCount(), i.offsetX = u.x * i.outerRadius, i.offsetY = u.y * i.outerRadius, c.total = a.calculateTotal(), a.outerRadius = i.outerRadius - i.radiusLength * a.getRingIndex(a.index), a.innerRadius = a.outerRadius - i.radiusLength, e.each(c.data, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = n.chart,\n                r = o.chartArea,\n                l = o.options,\n                s = l.animation,\n                d = (r.left + r.right) / 2,\n                u = (r.top + r.bottom) / 2,\n                c = l.rotation,\n                h = l.rotation,\n                f = n.getDataset(),\n                g = i && s.animateRotate ? 0 : t.hidden ? 0 : n.calculateCircumference(f.data[a]) * (l.circumference / (2 * Math.PI)),\n                p = i && s.animateScale ? 0 : n.innerRadius,\n                m = i && s.animateScale ? 0 : n.outerRadius,\n                b = e.getValueAtIndexOrDefault;\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _model: {\n                x: d + o.offsetX,\n                y: u + o.offsetY,\n                startAngle: c,\n                endAngle: h,\n                circumference: g,\n                outerRadius: m,\n                innerRadius: p,\n                label: b(f.label, a, o.data.labels[a])\n              }\n            });\n            var v = t._model;\n            this.removeHoverStyle(t), i && s.animateRotate || (0 === a ? v.startAngle = l.rotation : v.startAngle = n.getMeta().data[a - 1]._model.endAngle, v.endAngle = v.startAngle + v.circumference), t.pivot();\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);\n          },\n          calculateTotal: function calculateTotal() {\n            var t,\n                a = this.getDataset(),\n                i = this.getMeta(),\n                n = 0;\n            return e.each(i.data, function (e, i) {\n              t = a.data[i], isNaN(t) || e.hidden || (n += Math.abs(t));\n            }), n;\n          },\n          calculateCircumference: function calculateCircumference(t) {\n            var e = this.getMeta().total;\n            return e > 0 && !isNaN(t) ? 2 * Math.PI * (t / e) : 0;\n          },\n          getMaxBorderWidth: function getMaxBorderWidth(t) {\n            for (var e, a, i = 0, n = this.index, o = t.length, r = 0; o > r; r++) {\n              e = t[r]._model ? t[r]._model.borderWidth : 0, a = t[r]._chart ? t[r]._chart.config.data.datasets[n].hoverBorderWidth : 0, i = e > i ? e : i, i = a > i ? a : i;\n            }\n\n            return i;\n          }\n        });\n      };\n    }, {}],\n    18: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return a.getValueOrDefault(t.showLine, e.showLines);\n        }\n\n        var a = t.helpers;\n        t.defaults.line = {\n          showLines: !0,\n          spanGaps: !1,\n          hover: {\n            mode: \"label\"\n          },\n          scales: {\n            xAxes: [{\n              type: \"category\",\n              id: \"x-axis-0\"\n            }],\n            yAxes: [{\n              type: \"linear\",\n              id: \"y-axis-0\"\n            }]\n          }\n        }, t.controllers.line = t.DatasetController.extend({\n          datasetElementType: t.elements.Line,\n          dataElementType: t.elements.Point,\n          update: function update(t) {\n            var i,\n                n,\n                o,\n                r = this,\n                l = r.getMeta(),\n                s = l.dataset,\n                d = l.data || [],\n                u = r.chart.options,\n                c = u.elements.line,\n                h = r.getScaleForId(l.yAxisID),\n                f = r.getDataset(),\n                g = e(f, u);\n\n            for (g && (o = s.custom || {}, void 0 !== f.tension && void 0 === f.lineTension && (f.lineTension = f.tension), s._scale = h, s._datasetIndex = r.index, s._children = d, s._model = {\n              spanGaps: f.spanGaps ? f.spanGaps : u.spanGaps,\n              tension: o.tension ? o.tension : a.getValueOrDefault(f.lineTension, c.tension),\n              backgroundColor: o.backgroundColor ? o.backgroundColor : f.backgroundColor || c.backgroundColor,\n              borderWidth: o.borderWidth ? o.borderWidth : f.borderWidth || c.borderWidth,\n              borderColor: o.borderColor ? o.borderColor : f.borderColor || c.borderColor,\n              borderCapStyle: o.borderCapStyle ? o.borderCapStyle : f.borderCapStyle || c.borderCapStyle,\n              borderDash: o.borderDash ? o.borderDash : f.borderDash || c.borderDash,\n              borderDashOffset: o.borderDashOffset ? o.borderDashOffset : f.borderDashOffset || c.borderDashOffset,\n              borderJoinStyle: o.borderJoinStyle ? o.borderJoinStyle : f.borderJoinStyle || c.borderJoinStyle,\n              fill: o.fill ? o.fill : void 0 !== f.fill ? f.fill : c.fill,\n              steppedLine: o.steppedLine ? o.steppedLine : a.getValueOrDefault(f.steppedLine, c.stepped),\n              cubicInterpolationMode: o.cubicInterpolationMode ? o.cubicInterpolationMode : a.getValueOrDefault(f.cubicInterpolationMode, c.cubicInterpolationMode),\n              scaleTop: h.top,\n              scaleBottom: h.bottom,\n              scaleZero: h.getBasePixel()\n            }, s.pivot()), i = 0, n = d.length; n > i; ++i) {\n              r.updateElement(d[i], i, t);\n            }\n\n            for (g && 0 !== s._model.tension && r.updateBezierControlPoints(), i = 0, n = d.length; n > i; ++i) {\n              d[i].pivot();\n            }\n          },\n          getPointBackgroundColor: function getPointBackgroundColor(t, e) {\n            var i = this.chart.options.elements.point.backgroundColor,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.backgroundColor ? i = o.backgroundColor : n.pointBackgroundColor ? i = a.getValueAtIndexOrDefault(n.pointBackgroundColor, e, i) : n.backgroundColor && (i = n.backgroundColor), i;\n          },\n          getPointBorderColor: function getPointBorderColor(t, e) {\n            var i = this.chart.options.elements.point.borderColor,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.borderColor ? i = o.borderColor : n.pointBorderColor ? i = a.getValueAtIndexOrDefault(n.pointBorderColor, e, i) : n.borderColor && (i = n.borderColor), i;\n          },\n          getPointBorderWidth: function getPointBorderWidth(t, e) {\n            var i = this.chart.options.elements.point.borderWidth,\n                n = this.getDataset(),\n                o = t.custom || {};\n            return o.borderWidth ? i = o.borderWidth : n.pointBorderWidth ? i = a.getValueAtIndexOrDefault(n.pointBorderWidth, e, i) : n.borderWidth && (i = n.borderWidth), i;\n          },\n          updateElement: function updateElement(t, e, i) {\n            var n,\n                o,\n                r = this,\n                l = r.getMeta(),\n                s = t.custom || {},\n                d = r.getDataset(),\n                u = r.index,\n                c = d.data[e],\n                h = r.getScaleForId(l.yAxisID),\n                f = r.getScaleForId(l.xAxisID),\n                g = r.chart.options.elements.point,\n                p = r.chart.data.labels || [],\n                m = 1 === p.length || 1 === d.data.length || r.chart.isCombo;\n            void 0 !== d.radius && void 0 === d.pointRadius && (d.pointRadius = d.radius), void 0 !== d.hitRadius && void 0 === d.pointHitRadius && (d.pointHitRadius = d.hitRadius), n = f.getPixelForValue(\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(c) ? c : NaN, e, u, m), o = i ? h.getBasePixel() : r.calculatePointY(c, e, u), t._xScale = f, t._yScale = h, t._datasetIndex = u, t._index = e, t._model = {\n              x: n,\n              y: o,\n              skip: s.skip || isNaN(n) || isNaN(o),\n              radius: s.radius || a.getValueAtIndexOrDefault(d.pointRadius, e, g.radius),\n              pointStyle: s.pointStyle || a.getValueAtIndexOrDefault(d.pointStyle, e, g.pointStyle),\n              backgroundColor: r.getPointBackgroundColor(t, e),\n              borderColor: r.getPointBorderColor(t, e),\n              borderWidth: r.getPointBorderWidth(t, e),\n              tension: l.dataset._model ? l.dataset._model.tension : 0,\n              steppedLine: l.dataset._model ? l.dataset._model.steppedLine : !1,\n              hitRadius: s.hitRadius || a.getValueAtIndexOrDefault(d.pointHitRadius, e, g.hitRadius)\n            };\n          },\n          calculatePointY: function calculatePointY(t, e, a) {\n            var i,\n                n,\n                o,\n                r = this,\n                l = r.chart,\n                s = r.getMeta(),\n                d = r.getScaleForId(s.yAxisID),\n                u = 0,\n                c = 0;\n\n            if (d.options.stacked) {\n              for (i = 0; a > i; i++) {\n                if (n = l.data.datasets[i], o = l.getDatasetMeta(i), \"line\" === o.type && o.yAxisID === d.id && l.isDatasetVisible(i)) {\n                  var h = Number(d.getRightValue(n.data[e]));\n                  0 > h ? c += h || 0 : u += h || 0;\n                }\n              }\n\n              var f = Number(d.getRightValue(t));\n              return 0 > f ? d.getPixelForValue(c + f) : d.getPixelForValue(u + f);\n            }\n\n            return d.getPixelForValue(t);\n          },\n          updateBezierControlPoints: function updateBezierControlPoints() {\n            function t(t, e, a) {\n              return Math.max(Math.min(t, a), e);\n            }\n\n            var e,\n                i,\n                n,\n                o,\n                r,\n                l = this,\n                s = l.getMeta(),\n                d = l.chart.chartArea,\n                u = s.data || [];\n            if (s.dataset._model.spanGaps && (u = u.filter(function (t) {\n              return !t._model.skip;\n            })), \"monotone\" === s.dataset._model.cubicInterpolationMode) a.splineCurveMonotone(u);else for (e = 0, i = u.length; i > e; ++e) {\n              n = u[e], o = n._model, r = a.splineCurve(a.previousItem(u, e)._model, o, a.nextItem(u, e)._model, s.dataset._model.tension), o.controlPointPreviousX = r.previous.x, o.controlPointPreviousY = r.previous.y, o.controlPointNextX = r.next.x, o.controlPointNextY = r.next.y;\n            }\n            if (l.chart.options.elements.line.capBezierPoints) for (e = 0, i = u.length; i > e; ++e) {\n              o = u[e]._model, o.controlPointPreviousX = t(o.controlPointPreviousX, d.left, d.right), o.controlPointPreviousY = t(o.controlPointPreviousY, d.top, d.bottom), o.controlPointNextX = t(o.controlPointNextX, d.left, d.right), o.controlPointNextY = t(o.controlPointNextY, d.top, d.bottom);\n            }\n          },\n          draw: function draw(t) {\n            var a,\n                i,\n                n = this,\n                o = n.getMeta(),\n                r = o.data || [],\n                l = t || 1;\n\n            for (a = 0, i = r.length; i > a; ++a) {\n              r[a].transition(l);\n            }\n\n            for (e(n.getDataset(), n.chart.options) && o.dataset.transition(l).draw(), a = 0, i = r.length; i > a; ++a) {\n              r[a].draw();\n            }\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var e = this.chart.data.datasets[t._datasetIndex],\n                i = t._index,\n                n = t.custom || {},\n                o = t._model;\n            o.radius = n.hoverRadius || a.getValueAtIndexOrDefault(e.pointHoverRadius, i, this.chart.options.elements.point.hoverRadius), o.backgroundColor = n.hoverBackgroundColor || a.getValueAtIndexOrDefault(e.pointHoverBackgroundColor, i, a.getHoverColor(o.backgroundColor)), o.borderColor = n.hoverBorderColor || a.getValueAtIndexOrDefault(e.pointHoverBorderColor, i, a.getHoverColor(o.borderColor)), o.borderWidth = n.hoverBorderWidth || a.getValueAtIndexOrDefault(e.pointHoverBorderWidth, i, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var e = this,\n                i = e.chart.data.datasets[t._datasetIndex],\n                n = t._index,\n                o = t.custom || {},\n                r = t._model;\n            void 0 !== i.radius && void 0 === i.pointRadius && (i.pointRadius = i.radius), r.radius = o.radius || a.getValueAtIndexOrDefault(i.pointRadius, n, e.chart.options.elements.point.radius), r.backgroundColor = e.getPointBackgroundColor(t, n), r.borderColor = e.getPointBorderColor(t, n), r.borderWidth = e.getPointBorderWidth(t, n);\n          }\n        });\n      };\n    }, {}],\n    19: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.polarArea = {\n          scale: {\n            type: \"radialLinear\",\n            lineArc: !0,\n            ticks: {\n              beginAtZero: !0\n            }\n          },\n          animation: {\n            animateRotate: !0,\n            animateScale: !0\n          },\n          startAngle: -0.5 * Math.PI,\n          aspectRatio: 1,\n          legendCallback: function legendCallback(t) {\n            var e = [];\n            e.push('<ul className=\"' + t.id + '-legend\">');\n            var a = t.data,\n                i = a.datasets,\n                n = a.labels;\n            if (i.length) for (var o = 0; o < i[0].data.length; ++o) {\n              e.push('<li><span style=\"background-color:' + i[0].backgroundColor[o] + '\"></span>'), n[o] && e.push(n[o]), e.push(\"</li>\");\n            }\n            return e.push(\"</ul>\"), e.join(\"\");\n          },\n          legend: {\n            labels: {\n              generateLabels: function generateLabels(t) {\n                var a = t.data;\n                return a.labels.length && a.datasets.length ? a.labels.map(function (i, n) {\n                  var o = t.getDatasetMeta(0),\n                      r = a.datasets[0],\n                      l = o.data[n],\n                      s = l.custom || {},\n                      d = e.getValueAtIndexOrDefault,\n                      u = t.options.elements.arc,\n                      c = s.backgroundColor ? s.backgroundColor : d(r.backgroundColor, n, u.backgroundColor),\n                      h = s.borderColor ? s.borderColor : d(r.borderColor, n, u.borderColor),\n                      f = s.borderWidth ? s.borderWidth : d(r.borderWidth, n, u.borderWidth);\n                  return {\n                    text: i,\n                    fillStyle: c,\n                    strokeStyle: h,\n                    lineWidth: f,\n                    hidden: isNaN(r.data[n]) || o.data[n].hidden,\n                    index: n\n                  };\n                }) : [];\n              }\n            },\n            onClick: function onClick(t, e) {\n              var a,\n                  i,\n                  n,\n                  o = e.index,\n                  r = this.chart;\n\n              for (a = 0, i = (r.data.datasets || []).length; i > a; ++a) {\n                n = r.getDatasetMeta(a), n.data[o].hidden = !n.data[o].hidden;\n              }\n\n              r.update();\n            }\n          },\n          tooltips: {\n            callbacks: {\n              title: function title() {\n                return \"\";\n              },\n              label: function label(t, e) {\n                return e.labels[t.index] + \": \" + t.yLabel;\n              }\n            }\n          }\n        }, t.controllers.polarArea = t.DatasetController.extend({\n          dataElementType: t.elements.Arc,\n          linkScales: e.noop,\n          update: function update(t) {\n            var a = this,\n                i = a.chart,\n                n = i.chartArea,\n                o = a.getMeta(),\n                r = i.options,\n                l = r.elements.arc,\n                s = Math.min(n.right - n.left, n.bottom - n.top);\n            i.outerRadius = Math.max((s - l.borderWidth / 2) / 2, 0), i.innerRadius = Math.max(r.cutoutPercentage ? i.outerRadius / 100 * r.cutoutPercentage : 1, 0), i.radiusLength = (i.outerRadius - i.innerRadius) / i.getVisibleDatasetCount(), a.outerRadius = i.outerRadius - i.radiusLength * a.index, a.innerRadius = a.outerRadius - i.radiusLength, o.count = a.countVisibleElements(), e.each(o.data, function (e, i) {\n              a.updateElement(e, i, t);\n            });\n          },\n          updateElement: function updateElement(t, a, i) {\n            for (var n = this, o = n.chart, r = n.getDataset(), l = o.options, s = l.animation, d = o.scale, u = e.getValueAtIndexOrDefault, c = o.data.labels, h = n.calculateCircumference(r.data[a]), f = d.xCenter, g = d.yCenter, p = 0, m = n.getMeta(), b = 0; a > b; ++b) {\n              isNaN(r.data[b]) || m.data[b].hidden || ++p;\n            }\n\n            var v = l.startAngle,\n                x = t.hidden ? 0 : d.getDistanceFromCenterForValue(r.data[a]),\n                y = v + h * p,\n                k = y + (t.hidden ? 0 : h),\n                S = s.animateScale ? 0 : d.getDistanceFromCenterForValue(r.data[a]);\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _scale: d,\n              _model: {\n                x: f,\n                y: g,\n                innerRadius: 0,\n                outerRadius: i ? S : x,\n                startAngle: i && s.animateRotate ? v : y,\n                endAngle: i && s.animateRotate ? v : k,\n                label: u(c, a, c[a])\n              }\n            }), n.removeHoverStyle(t), t.pivot();\n          },\n          removeHoverStyle: function removeHoverStyle(e) {\n            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);\n          },\n          countVisibleElements: function countVisibleElements() {\n            var t = this.getDataset(),\n                a = this.getMeta(),\n                i = 0;\n            return e.each(a.data, function (e, a) {\n              isNaN(t.data[a]) || e.hidden || i++;\n            }), i;\n          },\n          calculateCircumference: function calculateCircumference(t) {\n            var e = this.getMeta().count;\n            return e > 0 && !isNaN(t) ? 2 * Math.PI / e : 0;\n          }\n        });\n      };\n    }, {}],\n    20: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.radar = {\n          aspectRatio: 1,\n          scale: {\n            type: \"radialLinear\"\n          },\n          elements: {\n            line: {\n              tension: 0\n            }\n          }\n        }, t.controllers.radar = t.DatasetController.extend({\n          datasetElementType: t.elements.Line,\n          dataElementType: t.elements.Point,\n          linkScales: e.noop,\n          update: function update(t) {\n            var a = this,\n                i = a.getMeta(),\n                n = i.dataset,\n                o = i.data,\n                r = n.custom || {},\n                l = a.getDataset(),\n                s = a.chart.options.elements.line,\n                d = a.chart.scale;\n            void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), e.extend(i.dataset, {\n              _datasetIndex: a.index,\n              _children: o,\n              _loop: !0,\n              _model: {\n                tension: r.tension ? r.tension : e.getValueOrDefault(l.lineTension, s.tension),\n                backgroundColor: r.backgroundColor ? r.backgroundColor : l.backgroundColor || s.backgroundColor,\n                borderWidth: r.borderWidth ? r.borderWidth : l.borderWidth || s.borderWidth,\n                borderColor: r.borderColor ? r.borderColor : l.borderColor || s.borderColor,\n                fill: r.fill ? r.fill : void 0 !== l.fill ? l.fill : s.fill,\n                borderCapStyle: r.borderCapStyle ? r.borderCapStyle : l.borderCapStyle || s.borderCapStyle,\n                borderDash: r.borderDash ? r.borderDash : l.borderDash || s.borderDash,\n                borderDashOffset: r.borderDashOffset ? r.borderDashOffset : l.borderDashOffset || s.borderDashOffset,\n                borderJoinStyle: r.borderJoinStyle ? r.borderJoinStyle : l.borderJoinStyle || s.borderJoinStyle,\n                scaleTop: d.top,\n                scaleBottom: d.bottom,\n                scaleZero: d.getBasePosition()\n              }\n            }), i.dataset.pivot(), e.each(o, function (e, i) {\n              a.updateElement(e, i, t);\n            }, a), a.updateBezierControlPoints();\n          },\n          updateElement: function updateElement(t, a, i) {\n            var n = this,\n                o = t.custom || {},\n                r = n.getDataset(),\n                l = n.chart.scale,\n                s = n.chart.options.elements.point,\n                d = l.getPointPositionForValue(a, r.data[a]);\n            e.extend(t, {\n              _datasetIndex: n.index,\n              _index: a,\n              _scale: l,\n              _model: {\n                x: i ? l.xCenter : d.x,\n                y: i ? l.yCenter : d.y,\n                tension: o.tension ? o.tension : e.getValueOrDefault(r.tension, n.chart.options.elements.line.tension),\n                radius: o.radius ? o.radius : e.getValueAtIndexOrDefault(r.pointRadius, a, s.radius),\n                backgroundColor: o.backgroundColor ? o.backgroundColor : e.getValueAtIndexOrDefault(r.pointBackgroundColor, a, s.backgroundColor),\n                borderColor: o.borderColor ? o.borderColor : e.getValueAtIndexOrDefault(r.pointBorderColor, a, s.borderColor),\n                borderWidth: o.borderWidth ? o.borderWidth : e.getValueAtIndexOrDefault(r.pointBorderWidth, a, s.borderWidth),\n                pointStyle: o.pointStyle ? o.pointStyle : e.getValueAtIndexOrDefault(r.pointStyle, a, s.pointStyle),\n                hitRadius: o.hitRadius ? o.hitRadius : e.getValueAtIndexOrDefault(r.hitRadius, a, s.hitRadius)\n              }\n            }), t._model.skip = o.skip ? o.skip : isNaN(t._model.x) || isNaN(t._model.y);\n          },\n          updateBezierControlPoints: function updateBezierControlPoints() {\n            var t = this.chart.chartArea,\n                a = this.getMeta();\n            e.each(a.data, function (i, n) {\n              var o = i._model,\n                  r = e.splineCurve(e.previousItem(a.data, n, !0)._model, o, e.nextItem(a.data, n, !0)._model, o.tension);\n              o.controlPointPreviousX = Math.max(Math.min(r.previous.x, t.right), t.left), o.controlPointPreviousY = Math.max(Math.min(r.previous.y, t.bottom), t.top), o.controlPointNextX = Math.max(Math.min(r.next.x, t.right), t.left), o.controlPointNextY = Math.max(Math.min(r.next.y, t.bottom), t.top), i.pivot();\n            });\n          },\n          draw: function draw(t) {\n            var a = this.getMeta(),\n                i = t || 1;\n            e.each(a.data, function (t) {\n              t.transition(i);\n            }), a.dataset.transition(i).draw(), e.each(a.data, function (t) {\n              t.draw();\n            });\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t.custom || {},\n                n = t._index,\n                o = t._model;\n            o.radius = i.hoverRadius ? i.hoverRadius : e.getValueAtIndexOrDefault(a.pointHoverRadius, n, this.chart.options.elements.point.hoverRadius), o.backgroundColor = i.hoverBackgroundColor ? i.hoverBackgroundColor : e.getValueAtIndexOrDefault(a.pointHoverBackgroundColor, n, e.getHoverColor(o.backgroundColor)), o.borderColor = i.hoverBorderColor ? i.hoverBorderColor : e.getValueAtIndexOrDefault(a.pointHoverBorderColor, n, e.getHoverColor(o.borderColor)), o.borderWidth = i.hoverBorderWidth ? i.hoverBorderWidth : e.getValueAtIndexOrDefault(a.pointHoverBorderWidth, n, o.borderWidth);\n          },\n          removeHoverStyle: function removeHoverStyle(t) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                i = t.custom || {},\n                n = t._index,\n                o = t._model,\n                r = this.chart.options.elements.point;\n            o.radius = i.radius ? i.radius : e.getValueAtIndexOrDefault(a.radius, n, r.radius), o.backgroundColor = i.backgroundColor ? i.backgroundColor : e.getValueAtIndexOrDefault(a.pointBackgroundColor, n, r.backgroundColor), o.borderColor = i.borderColor ? i.borderColor : e.getValueAtIndexOrDefault(a.pointBorderColor, n, r.borderColor), o.borderWidth = i.borderWidth ? i.borderWidth : e.getValueAtIndexOrDefault(a.pointBorderWidth, n, r.borderWidth);\n          }\n        });\n      };\n    }, {}],\n    21: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.global.animation = {\n          duration: 1e3,\n          easing: \"easeOutQuart\",\n          onProgress: e.noop,\n          onComplete: e.noop\n        }, t.Animation = t.Element.extend({\n          currentStep: null,\n          numSteps: 60,\n          easing: \"\",\n          render: null,\n          onAnimationProgress: null,\n          onAnimationComplete: null\n        }), t.animationService = {\n          frameDuration: 17,\n          animations: [],\n          dropFrames: 0,\n          request: null,\n          addAnimation: function addAnimation(t, e, a, i) {\n            var n = this;\n            i || (t.animating = !0);\n\n            for (var o = 0; o < n.animations.length; ++o) {\n              if (n.animations[o].chartInstance === t) return void (n.animations[o].animationObject = e);\n            }\n\n            n.animations.push({\n              chartInstance: t,\n              animationObject: e\n            }), 1 === n.animations.length && n.requestAnimationFrame();\n          },\n          cancelAnimation: function cancelAnimation(t) {\n            var a = e.findIndex(this.animations, function (e) {\n              return e.chartInstance === t;\n            });\n            -1 !== a && (this.animations.splice(a, 1), t.animating = !1);\n          },\n          requestAnimationFrame: function requestAnimationFrame() {\n            var t = this;\n            null === t.request && (t.request = e.requestAnimFrame.call(window, function () {\n              t.request = null, t.startDigest();\n            }));\n          },\n          startDigest: function startDigest() {\n            var t = this,\n                e = Date.now(),\n                a = 0;\n            t.dropFrames > 1 && (a = Math.floor(t.dropFrames), t.dropFrames = t.dropFrames % 1);\n\n            for (var i = 0; i < t.animations.length;) {\n              null === t.animations[i].animationObject.currentStep && (t.animations[i].animationObject.currentStep = 0), t.animations[i].animationObject.currentStep += 1 + a, t.animations[i].animationObject.currentStep > t.animations[i].animationObject.numSteps && (t.animations[i].animationObject.currentStep = t.animations[i].animationObject.numSteps), t.animations[i].animationObject.render(t.animations[i].chartInstance, t.animations[i].animationObject), t.animations[i].animationObject.onAnimationProgress && t.animations[i].animationObject.onAnimationProgress.call && t.animations[i].animationObject.onAnimationProgress.call(t.animations[i].chartInstance, t.animations[i]), t.animations[i].animationObject.currentStep === t.animations[i].animationObject.numSteps ? (t.animations[i].animationObject.onAnimationComplete && t.animations[i].animationObject.onAnimationComplete.call && t.animations[i].animationObject.onAnimationComplete.call(t.animations[i].chartInstance, t.animations[i]), t.animations[i].chartInstance.animating = !1, t.animations.splice(i, 1)) : ++i;\n            }\n\n            var n = Date.now(),\n                o = (n - e) / t.frameDuration;\n            t.dropFrames += o, t.animations.length > 0 && t.requestAnimationFrame();\n          }\n        };\n      };\n    }, {}],\n    22: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.canvasHelpers = {};\n\n        e.drawPoint = function (t, e, a, i, n) {\n          var o, r, l, s, d, u;\n          if (\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e) && (o = e.toString(), \"[object HTMLImageElement]\" === o || \"[object HTMLCanvasElement]\" === o)) return void t.drawImage(e, i - e.width / 2, n - e.height / 2);\n\n          if (!(isNaN(a) || 0 >= a)) {\n            switch (e) {\n              default:\n                t.beginPath(), t.arc(i, n, a, 0, 2 * Math.PI), t.closePath(), t.fill();\n                break;\n\n              case \"triangle\":\n                t.beginPath(), r = 3 * a / Math.sqrt(3), d = r * Math.sqrt(3) / 2, t.moveTo(i - r / 2, n + d / 3), t.lineTo(i + r / 2, n + d / 3), t.lineTo(i, n - 2 * d / 3), t.closePath(), t.fill();\n                break;\n\n              case \"rect\":\n                u = 1 / Math.SQRT2 * a, t.beginPath(), t.fillRect(i - u, n - u, 2 * u, 2 * u), t.strokeRect(i - u, n - u, 2 * u, 2 * u);\n                break;\n\n              case \"rectRot\":\n                u = 1 / Math.SQRT2 * a, t.beginPath(), t.moveTo(i - u, n), t.lineTo(i, n + u), t.lineTo(i + u, n), t.lineTo(i, n - u), t.closePath(), t.fill();\n                break;\n\n              case \"cross\":\n                t.beginPath(), t.moveTo(i, n + a), t.lineTo(i, n - a), t.moveTo(i - a, n), t.lineTo(i + a, n), t.closePath();\n                break;\n\n              case \"crossRot\":\n                t.beginPath(), l = Math.cos(Math.PI / 4) * a, s = Math.sin(Math.PI / 4) * a, t.moveTo(i - l, n - s), t.lineTo(i + l, n + s), t.moveTo(i - l, n + s), t.lineTo(i + l, n - s), t.closePath();\n                break;\n\n              case \"star\":\n                t.beginPath(), t.moveTo(i, n + a), t.lineTo(i, n - a), t.moveTo(i - a, n), t.lineTo(i + a, n), l = Math.cos(Math.PI / 4) * a, s = Math.sin(Math.PI / 4) * a, t.moveTo(i - l, n - s), t.lineTo(i + l, n + s), t.moveTo(i - l, n + s), t.lineTo(i + l, n - s), t.closePath();\n                break;\n\n              case \"line\":\n                t.beginPath(), t.moveTo(i - a, n), t.lineTo(i + a, n), t.closePath();\n                break;\n\n              case \"dash\":\n                t.beginPath(), t.moveTo(i, n), t.lineTo(i + a, n), t.closePath();\n            }\n\n            t.stroke();\n          }\n        };\n      };\n    }, {}],\n    23: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a = r.getStyle(t, e),\n              i = a && a.match(/(\\d+)px/);\n          return i ? Number(i[1]) : void 0;\n        }\n\n        function a(t, a) {\n          var i = t.style,\n              n = t.getAttribute(\"height\"),\n              o = t.getAttribute(\"width\");\n\n          if (t._chartjs = {\n            initial: {\n              height: n,\n              width: o,\n              style: {\n                display: i.display,\n                height: i.height,\n                width: i.width\n              }\n            }\n          }, i.display = i.display || \"block\", null === o || \"\" === o) {\n            var r = e(t, \"width\");\n            void 0 !== r && (t.width = r);\n          }\n\n          if (null === n || \"\" === n) if (\"\" === t.style.height) t.height = t.width / (a.options.aspectRatio || 2);else {\n            var l = e(t, \"height\");\n            void 0 !== r && (t.height = l);\n          }\n          return t;\n        }\n\n        function i(t) {\n          if (t._chartjs) {\n            var e = t._chartjs.initial;\n            [\"height\", \"width\"].forEach(function (a) {\n              var i = e[a];\n              void 0 === i || null === i ? t.removeAttribute(a) : t.setAttribute(a, i);\n            }), r.each(e.style || {}, function (e, a) {\n              t.style[a] = e;\n            }), t.width = t.width, delete t._chartjs;\n          }\n        }\n\n        function n(t, e) {\n          if (\"string\" == typeof t ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t instanceof HTMLCanvasElement) {\n            var i = t.getContext && t.getContext(\"2d\");\n            if (i instanceof CanvasRenderingContext2D) return a(t, e), i;\n          }\n\n          return null;\n        }\n\n        function o(e) {\n          e = e || {};\n          var a = e.data = e.data || {};\n          return a.datasets = a.datasets || [], a.labels = a.labels || [], e.options = r.configMerge(t.defaults.global, t.defaults[e.type], e.options || {}), e;\n        }\n\n        var r = t.helpers;\n        t.types = {}, t.instances = {}, t.controllers = {}, t.Controller = function (e, a, i) {\n          var l = this;\n          a = o(a);\n          var s = n(e, a),\n              d = s && s.canvas,\n              u = d && d.height,\n              c = d && d.width;\n          return i.ctx = s, i.canvas = d, i.config = a, i.width = c, i.height = u, i.aspectRatio = u ? c / u : null, l.id = r.uid(), l.chart = i, l.config = a, l.options = a.options, l._bufferedRender = !1, t.instances[l.id] = l, Object.defineProperty(l, \"data\", {\n            get: function get() {\n              return l.config.data;\n            }\n          }), s && d ? (r.retinaScale(i), l.options.responsive && (r.addResizeListener(d.parentNode, function () {\n            l.resize();\n          }), l.resize(!0)), l.initialize(), l) : (console.error(\"Failed to create chart: can't acquire context from the given item\"), l);\n        }, r.extend(t.Controller.prototype, {\n          initialize: function initialize() {\n            var e = this;\n            return t.plugins.notify(\"beforeInit\", [e]), e.bindEvents(), e.ensureScalesHaveIDs(), e.buildOrUpdateControllers(), e.buildScales(), e.updateLayout(), e.resetElements(), e.initToolTip(), e.update(), t.plugins.notify(\"afterInit\", [e]), e;\n          },\n          clear: function clear() {\n            return r.clear(this.chart), this;\n          },\n          stop: function stop() {\n            return t.animationService.cancelAnimation(this), this;\n          },\n          resize: function resize(e) {\n            var a = this,\n                i = a.chart,\n                n = a.options,\n                o = i.canvas,\n                l = n.maintainAspectRatio && i.aspectRatio || null,\n                s = Math.floor(r.getMaximumWidth(o)),\n                d = Math.floor(l ? s / l : r.getMaximumHeight(o));\n\n            if (i.width !== s || i.height !== d) {\n              o.width = i.width = s, o.height = i.height = d, o.style.width = s + \"px\", o.style.height = d + \"px\", r.retinaScale(i);\n              var u = {\n                width: s,\n                height: d\n              };\n              t.plugins.notify(\"resize\", [a, u]), a.options.onResize && a.options.onResize(a, u), e || (a.stop(), a.update(a.options.responsiveAnimationDuration));\n            }\n          },\n          ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n            var t = this.options,\n                e = t.scales || {},\n                a = t.scale;\n            r.each(e.xAxes, function (t, e) {\n              t.id = t.id || \"x-axis-\" + e;\n            }), r.each(e.yAxes, function (t, e) {\n              t.id = t.id || \"y-axis-\" + e;\n            }), a && (a.id = a.id || \"scale\");\n          },\n          buildScales: function buildScales() {\n            var e = this,\n                a = e.options,\n                i = e.scales = {},\n                n = [];\n            a.scales && (n = n.concat((a.scales.xAxes || []).map(function (t) {\n              return {\n                options: t,\n                dtype: \"category\"\n              };\n            }), (a.scales.yAxes || []).map(function (t) {\n              return {\n                options: t,\n                dtype: \"linear\"\n              };\n            }))), a.scale && n.push({\n              options: a.scale,\n              dtype: \"radialLinear\",\n              isDefault: !0\n            }), r.each(n, function (a) {\n              var n = a.options,\n                  o = r.getValueOrDefault(n.type, a.dtype),\n                  l = t.scaleService.getScaleConstructor(o);\n\n              if (l) {\n                var s = new l({\n                  id: n.id,\n                  options: n,\n                  ctx: e.chart.ctx,\n                  chart: e\n                });\n                i[s.id] = s, a.isDefault && (e.scale = s);\n              }\n            }), t.scaleService.addScalesToLayout(this);\n          },\n          updateLayout: function updateLayout() {\n            t.layoutService.update(this, this.chart.width, this.chart.height);\n          },\n          buildOrUpdateControllers: function buildOrUpdateControllers() {\n            var e = this,\n                a = [],\n                i = [];\n            if (r.each(e.data.datasets, function (n, o) {\n              var r = e.getDatasetMeta(o);\n              r.type || (r.type = n.type || e.config.type), a.push(r.type), r.controller ? r.controller.updateIndex(o) : (r.controller = new t.controllers[r.type](e, o), i.push(r.controller));\n            }, e), a.length > 1) for (var n = 1; n < a.length; n++) {\n              if (a[n] !== a[n - 1]) {\n                e.isCombo = !0;\n                break;\n              }\n            }\n            return i;\n          },\n          resetElements: function resetElements() {\n            var t = this;\n            r.each(t.data.datasets, function (e, a) {\n              t.getDatasetMeta(a).controller.reset();\n            }, t);\n          },\n          reset: function reset() {\n            this.resetElements(), this.tooltip.initialize();\n          },\n          update: function update(e, a) {\n            var i = this;\n            t.plugins.notify(\"beforeUpdate\", [i]), i.tooltip._data = i.data;\n            var n = i.buildOrUpdateControllers();\n            r.each(i.data.datasets, function (t, e) {\n              i.getDatasetMeta(e).controller.buildOrUpdateElements();\n            }, i), t.layoutService.update(i, i.chart.width, i.chart.height), t.plugins.notify(\"afterScaleUpdate\", [i]), r.each(n, function (t) {\n              t.reset();\n            }), i.updateDatasets(), t.plugins.notify(\"afterUpdate\", [i]), i._bufferedRender ? i._bufferedRequest = {\n              lazy: a,\n              duration: e\n            } : i.render(e, a);\n          },\n          updateDatasets: function updateDatasets() {\n            var e,\n                a,\n                i = this;\n\n            if (t.plugins.notify(\"beforeDatasetsUpdate\", [i])) {\n              for (e = 0, a = i.data.datasets.length; a > e; ++e) {\n                i.getDatasetMeta(e).controller.update();\n              }\n\n              t.plugins.notify(\"afterDatasetsUpdate\", [i]);\n            }\n          },\n          render: function render(e, a) {\n            var i = this;\n            t.plugins.notify(\"beforeRender\", [i]);\n            var n = i.options.animation;\n\n            if (n && (\"undefined\" != typeof e && 0 !== e || \"undefined\" == typeof e && 0 !== n.duration)) {\n              var o = new t.Animation();\n              o.numSteps = (e || n.duration) / 16.66, o.easing = n.easing, o.render = function (t, e) {\n                var a = r.easingEffects[e.easing],\n                    i = e.currentStep / e.numSteps,\n                    n = a(i);\n                t.draw(n, i, e.currentStep);\n              }, o.onAnimationProgress = n.onProgress, o.onAnimationComplete = n.onComplete, t.animationService.addAnimation(i, o, e, a);\n            } else i.draw(), n && n.onComplete && n.onComplete.call && n.onComplete.call(i);\n\n            return i;\n          },\n          draw: function draw(e) {\n            var a = this,\n                i = e || 1;\n            a.clear(), t.plugins.notify(\"beforeDraw\", [a, i]), r.each(a.boxes, function (t) {\n              t.draw(a.chartArea);\n            }, a), a.scale && a.scale.draw(), t.plugins.notify(\"beforeDatasetsDraw\", [a, i]), r.each(a.data.datasets, function (t, i) {\n              a.isDatasetVisible(i) && a.getDatasetMeta(i).controller.draw(e);\n            }, a, !0), t.plugins.notify(\"afterDatasetsDraw\", [a, i]), a.tooltip.transition(i).draw(), t.plugins.notify(\"afterDraw\", [a, i]);\n          },\n          getElementAtEvent: function getElementAtEvent(e) {\n            return t.Interaction.modes.single(this, e);\n          },\n          getElementsAtEvent: function getElementsAtEvent(e) {\n            return t.Interaction.modes.label(this, e, {\n              intersect: !0\n            });\n          },\n          getElementsAtXAxis: function getElementsAtXAxis(e) {\n            return t.Interaction.modes[\"x-axis\"](this, e, {\n              intersect: !0\n            });\n          },\n          getElementsAtEventForMode: function getElementsAtEventForMode(e, a, i) {\n            var n = t.Interaction.modes[a];\n            return \"function\" == typeof n ? n(this, e, i) : [];\n          },\n          getDatasetAtEvent: function getDatasetAtEvent(e) {\n            return t.Interaction.modes.dataset(this, e);\n          },\n          getDatasetMeta: function getDatasetMeta(t) {\n            var e = this,\n                a = e.data.datasets[t];\n            a._meta || (a._meta = {});\n            var i = a._meta[e.id];\n            return i || (i = a._meta[e.id] = {\n              type: null,\n              data: [],\n              dataset: null,\n              controller: null,\n              hidden: null,\n              xAxisID: null,\n              yAxisID: null\n            }), i;\n          },\n          getVisibleDatasetCount: function getVisibleDatasetCount() {\n            for (var t = 0, e = 0, a = this.data.datasets.length; a > e; ++e) {\n              this.isDatasetVisible(e) && t++;\n            }\n\n            return t;\n          },\n          isDatasetVisible: function isDatasetVisible(t) {\n            var e = this.getDatasetMeta(t);\n            return \"boolean\" == typeof e.hidden ? !e.hidden : !this.data.datasets[t].hidden;\n          },\n          generateLegend: function generateLegend() {\n            return this.options.legendCallback(this);\n          },\n          destroy: function destroy() {\n            var e,\n                a,\n                n,\n                o = this,\n                l = o.chart.canvas;\n\n            for (o.stop(), a = 0, n = o.data.datasets.length; n > a; ++a) {\n              e = o.getDatasetMeta(a), e.controller && (e.controller.destroy(), e.controller = null);\n            }\n\n            l && (r.unbindEvents(o, o.events), r.removeResizeListener(l.parentNode), r.clear(o.chart), i(l), o.chart.canvas = null, o.chart.ctx = null), t.plugins.notify(\"destroy\", [o]), delete t.instances[o.id];\n          },\n          toBase64Image: function toBase64Image() {\n            return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n          },\n          initToolTip: function initToolTip() {\n            var e = this;\n            e.tooltip = new t.Tooltip({\n              _chart: e.chart,\n              _chartInstance: e,\n              _data: e.data,\n              _options: e.options.tooltips\n            }, e), e.tooltip.initialize();\n          },\n          bindEvents: function bindEvents() {\n            var t = this;\n            r.bindEvents(t, t.options.events, function (e) {\n              t.eventHandler(e);\n            });\n          },\n          updateHoverStyle: function updateHoverStyle(t, e, a) {\n            var i,\n                n,\n                o,\n                r = a ? \"setHoverStyle\" : \"removeHoverStyle\";\n\n            for (n = 0, o = t.length; o > n; ++n) {\n              i = t[n], i && this.getDatasetMeta(i._datasetIndex).controller[r](i);\n            }\n          },\n          eventHandler: function eventHandler(t) {\n            var e = this,\n                a = e.legend,\n                i = e.tooltip,\n                n = e.options.hover;\n            e._bufferedRender = !0, e._bufferedRequest = null;\n            var o = e.handleEvent(t);\n            o |= a && a.handleEvent(t), o |= i && i.handleEvent(t);\n            var r = e._bufferedRequest;\n            return r ? e.render(r.duration, r.lazy) : o && !e.animating && (e.stop(), e.render(n.animationDuration, !0)), e._bufferedRender = !1, e._bufferedRequest = null, e;\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                a = e.options || {},\n                i = a.hover,\n                n = !1;\n            return e.lastActive = e.lastActive || [], \"mouseout\" === t.type ? e.active = [] : e.active = e.getElementsAtEventForMode(t, i.mode, i), i.onHover && i.onHover.call(e, e.active), (\"mouseup\" === t.type || \"click\" === t.type) && a.onClick && a.onClick.call(e, t, e.active), e.lastActive.length && e.updateHoverStyle(e.lastActive, i.mode, !1), e.active.length && i.mode && e.updateHoverStyle(e.active, i.mode, !0), n = !r.arrayEquals(e.active, e.lastActive), e.lastActive = e.active, n;\n          }\n        });\n      };\n    }, {}],\n    24: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return t._chartjs ? void t._chartjs.listeners.push(e) : (Object.defineProperty(t, \"_chartjs\", {\n            configurable: !0,\n            enumerable: !1,\n            value: {\n              listeners: [e]\n            }\n          }), void n.forEach(function (e) {\n            var a = \"onData\" + e.charAt(0).toUpperCase() + e.slice(1),\n                n = t[e];\n            Object.defineProperty(t, e, {\n              configurable: !0,\n              enumerable: !1,\n              value: function value() {\n                var e = Array.prototype.slice.call(arguments),\n                    o = n.apply(this, e);\n                return i.each(t._chartjs.listeners, function (t) {\n                  \"function\" == typeof t[a] && t[a].apply(t, e);\n                }), o;\n              }\n            });\n          }));\n        }\n\n        function a(t, e) {\n          var a = t._chartjs;\n\n          if (a) {\n            var i = a.listeners,\n                o = i.indexOf(e);\n            -1 !== o && i.splice(o, 1), i.length > 0 || (n.forEach(function (e) {\n              delete t[e];\n            }), delete t._chartjs);\n          }\n        }\n\n        var i = t.helpers,\n            n = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n        t.DatasetController = function (t, e) {\n          this.initialize(t, e);\n        }, i.extend(t.DatasetController.prototype, {\n          datasetElementType: null,\n          dataElementType: null,\n          initialize: function initialize(t, e) {\n            var a = this;\n            a.chart = t, a.index = e, a.linkScales(), a.addElements();\n          },\n          updateIndex: function updateIndex(t) {\n            this.index = t;\n          },\n          linkScales: function linkScales() {\n            var t = this,\n                e = t.getMeta(),\n                a = t.getDataset();\n            null === e.xAxisID && (e.xAxisID = a.xAxisID || t.chart.options.scales.xAxes[0].id), null === e.yAxisID && (e.yAxisID = a.yAxisID || t.chart.options.scales.yAxes[0].id);\n          },\n          getDataset: function getDataset() {\n            return this.chart.data.datasets[this.index];\n          },\n          getMeta: function getMeta() {\n            return this.chart.getDatasetMeta(this.index);\n          },\n          getScaleForId: function getScaleForId(t) {\n            return this.chart.scales[t];\n          },\n          reset: function reset() {\n            this.update(!0);\n          },\n          destroy: function destroy() {\n            this._data && a(this._data, this);\n          },\n          createMetaDataset: function createMetaDataset() {\n            var t = this,\n                e = t.datasetElementType;\n            return e && new e({\n              _chart: t.chart.chart,\n              _datasetIndex: t.index\n            });\n          },\n          createMetaData: function createMetaData(t) {\n            var e = this,\n                a = e.dataElementType;\n            return a && new a({\n              _chart: e.chart.chart,\n              _datasetIndex: e.index,\n              _index: t\n            });\n          },\n          addElements: function addElements() {\n            var t,\n                e,\n                a = this,\n                i = a.getMeta(),\n                n = a.getDataset().data || [],\n                o = i.data;\n\n            for (t = 0, e = n.length; e > t; ++t) {\n              o[t] = o[t] || a.createMetaData(t);\n            }\n\n            i.dataset = i.dataset || a.createMetaDataset();\n          },\n          addElementAndReset: function addElementAndReset(t) {\n            var e = this.createMetaData(t);\n            this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0);\n          },\n          buildOrUpdateElements: function buildOrUpdateElements() {\n            var t = this,\n                i = t.getDataset(),\n                n = i.data || (i.data = []);\n            t._data !== n && (t._data && a(t._data, t), e(n, t), t._data = n), t.resyncElements();\n          },\n          update: i.noop,\n          draw: function draw(t) {\n            var e,\n                a,\n                i = t || 1,\n                n = this.getMeta().data;\n\n            for (e = 0, a = n.length; a > e; ++e) {\n              n[e].transition(i).draw();\n            }\n          },\n          removeHoverStyle: function removeHoverStyle(t, e) {\n            var a = this.chart.data.datasets[t._datasetIndex],\n                n = t._index,\n                o = t.custom || {},\n                r = i.getValueAtIndexOrDefault,\n                l = t._model;\n            l.backgroundColor = o.backgroundColor ? o.backgroundColor : r(a.backgroundColor, n, e.backgroundColor), l.borderColor = o.borderColor ? o.borderColor : r(a.borderColor, n, e.borderColor), l.borderWidth = o.borderWidth ? o.borderWidth : r(a.borderWidth, n, e.borderWidth);\n          },\n          setHoverStyle: function setHoverStyle(t) {\n            var e = this.chart.data.datasets[t._datasetIndex],\n                a = t._index,\n                n = t.custom || {},\n                o = i.getValueAtIndexOrDefault,\n                r = i.getHoverColor,\n                l = t._model;\n            l.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : o(e.hoverBackgroundColor, a, r(l.backgroundColor)), l.borderColor = n.hoverBorderColor ? n.hoverBorderColor : o(e.hoverBorderColor, a, r(l.borderColor)), l.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : o(e.hoverBorderWidth, a, l.borderWidth);\n          },\n          resyncElements: function resyncElements() {\n            var t = this,\n                e = t.getMeta(),\n                a = t.getDataset().data,\n                i = e.data.length,\n                n = a.length;\n            i > n ? e.data.splice(n, i - n) : n > i && t.insertElements(i, n - i);\n          },\n          insertElements: function insertElements(t, e) {\n            for (var a = 0; e > a; ++a) {\n              this.addElementAndReset(t + a);\n            }\n          },\n          onDataPush: function onDataPush() {\n            this.insertElements(this.getDataset().data.length - 1, arguments.length);\n          },\n          onDataPop: function onDataPop() {\n            this.getMeta().data.pop();\n          },\n          onDataShift: function onDataShift() {\n            this.getMeta().data.shift();\n          },\n          onDataSplice: function onDataSplice(t, e) {\n            this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2);\n          },\n          onDataUnshift: function onDataUnshift() {\n            this.insertElements(0, arguments.length);\n          }\n        }), t.DatasetController.extend = i.inherits;\n      };\n    }, {}],\n    25: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.elements = {}, t.Element = function (t) {\n          e.extend(this, t), this.initialize.apply(this, arguments);\n        }, e.extend(t.Element.prototype, {\n          initialize: function initialize() {\n            this.hidden = !1;\n          },\n          pivot: function pivot() {\n            var t = this;\n            return t._view || (t._view = e.clone(t._model)), t._start = e.clone(t._view), t;\n          },\n          transition: function transition(t) {\n            var a = this;\n            return a._view || (a._view = e.clone(a._model)), 1 === t ? (a._view = a._model, a._start = null, a) : (a._start || a.pivot(), e.each(a._model, function (i, n) {\n              if (\"_\" === n[0]) ;else if (a._view.hasOwnProperty(n)) {\n                if (i === a._view[n]) ;else if (\"string\" == typeof i) try {\n                  var o = e.color(a._model[n]).mix(e.color(a._start[n]), t);\n                  a._view[n] = o.rgbString();\n                } catch (r) {\n                  a._view[n] = i;\n                } else if (\"number\" == typeof i) {\n                  var l = void 0 !== a._start[n] && isNaN(a._start[n]) === !1 ? a._start[n] : 0;\n                  a._view[n] = (a._model[n] - l) * t + l;\n                } else a._view[n] = i;\n              } else \"number\" != typeof i || isNaN(a._view[n]) ? a._view[n] = i : a._view[n] = i * t;\n            }, a), a);\n          },\n          tooltipPosition: function tooltipPosition() {\n            return {\n              x: this._model.x,\n              y: this._model.y\n            };\n          },\n          hasValue: function hasValue() {\n            return e.isNumber(this._model.x) && e.isNumber(this._model.y);\n          }\n        }), t.Element.extend = e.inherits;\n      };\n    }, {}],\n    26: [function (t, e, a) {\n      \"use strict\";\n\n      var i = t(3);\n\n      e.exports = function (t) {\n        function e(t, e, a) {\n          var i;\n          return \"string\" == typeof t ? (i = parseInt(t, 10), -1 !== t.indexOf(\"%\") && (i = i / 100 * e.parentNode[a])) : i = t, i;\n        }\n\n        function a(t) {\n          return void 0 !== t && null !== t && \"none\" !== t;\n        }\n\n        function n(t, i, n) {\n          var o = document.defaultView,\n              r = t.parentNode,\n              l = o.getComputedStyle(t)[i],\n              s = o.getComputedStyle(r)[i],\n              d = a(l),\n              u = a(s),\n              c = Number.POSITIVE_INFINITY;\n          return d || u ? Math.min(d ? e(l, t, n) : c, u ? e(s, r, n) : c) : \"none\";\n        }\n\n        var o = t.helpers = {};\n        o.each = function (t, e, a, i) {\n          var n, r;\n          if (o.isArray(t)) {\n            if (r = t.length, i) for (n = r - 1; n >= 0; n--) {\n              e.call(a, t[n], n);\n            } else for (n = 0; r > n; n++) {\n              e.call(a, t[n], n);\n            }\n          } else if (\"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t)) {\n            var l = Object.keys(t);\n\n            for (r = l.length, n = 0; r > n; n++) {\n              e.call(a, t[l[n]], l[n]);\n            }\n          }\n        }, o.clone = function (t) {\n          var e = {};\n          return o.each(t, function (t, a) {\n            o.isArray(t) ? e[a] = t.slice(0) : \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t) && null !== t ? e[a] = o.clone(t) : e[a] = t;\n          }), e;\n        }, o.extend = function (t) {\n          for (var e = function e(_e, a) {\n            t[a] = _e;\n          }, a = 1, i = arguments.length; i > a; a++) {\n            o.each(arguments[a], e);\n          }\n\n          return t;\n        }, o.configMerge = function (e) {\n          var a = o.clone(e);\n          return o.each(Array.prototype.slice.call(arguments, 1), function (e) {\n            o.each(e, function (e, i) {\n              var n = a.hasOwnProperty(i),\n                  r = n ? a[i] : {};\n              \"scales\" === i ? a[i] = o.scaleMerge(r, e) : \"scale\" === i ? a[i] = o.configMerge(r, t.scaleService.getScaleDefaults(e.type), e) : !n || \"object\" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(r) || o.isArray(r) || null === r || \"object\" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e) || o.isArray(e) ? a[i] = e : a[i] = o.configMerge(r, e);\n            });\n          }), a;\n        }, o.scaleMerge = function (e, a) {\n          var i = o.clone(e);\n          return o.each(a, function (e, a) {\n            \"xAxes\" === a || \"yAxes\" === a ? i.hasOwnProperty(a) ? o.each(e, function (e, n) {\n              var r = o.getValueOrDefault(e.type, \"xAxes\" === a ? \"category\" : \"linear\"),\n                  l = t.scaleService.getScaleDefaults(r);\n              n >= i[a].length || !i[a][n].type ? i[a].push(o.configMerge(l, e)) : e.type && e.type !== i[a][n].type ? i[a][n] = o.configMerge(i[a][n], l, e) : i[a][n] = o.configMerge(i[a][n], e);\n            }) : (i[a] = [], o.each(e, function (e) {\n              var n = o.getValueOrDefault(e.type, \"xAxes\" === a ? \"category\" : \"linear\");\n              i[a].push(o.configMerge(t.scaleService.getScaleDefaults(n), e));\n            })) : i.hasOwnProperty(a) && \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(i[a]) && null !== i[a] && \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e) ? i[a] = o.configMerge(i[a], e) : i[a] = e;\n          }), i;\n        }, o.getValueAtIndexOrDefault = function (t, e, a) {\n          return void 0 === t || null === t ? a : o.isArray(t) ? e < t.length ? t[e] : a : t;\n        }, o.getValueOrDefault = function (t, e) {\n          return void 0 === t ? e : t;\n        }, o.indexOf = Array.prototype.indexOf ? function (t, e) {\n          return t.indexOf(e);\n        } : function (t, e) {\n          for (var a = 0, i = t.length; i > a; ++a) {\n            if (t[a] === e) return a;\n          }\n\n          return -1;\n        }, o.where = function (t, e) {\n          if (o.isArray(t) && Array.prototype.filter) return t.filter(e);\n          var a = [];\n          return o.each(t, function (t) {\n            e(t) && a.push(t);\n          }), a;\n        }, o.findIndex = Array.prototype.findIndex ? function (t, e, a) {\n          return t.findIndex(e, a);\n        } : function (t, e, a) {\n          a = void 0 === a ? t : a;\n\n          for (var i = 0, n = t.length; n > i; ++i) {\n            if (e.call(a, t[i], i, t)) return i;\n          }\n\n          return -1;\n        }, o.findNextWhere = function (t, e, a) {\n          (void 0 === a || null === a) && (a = -1);\n\n          for (var i = a + 1; i < t.length; i++) {\n            var n = t[i];\n            if (e(n)) return n;\n          }\n        }, o.findPreviousWhere = function (t, e, a) {\n          (void 0 === a || null === a) && (a = t.length);\n\n          for (var i = a - 1; i >= 0; i--) {\n            var n = t[i];\n            if (e(n)) return n;\n          }\n        }, o.inherits = function (t) {\n          var e = this,\n              a = t && t.hasOwnProperty(\"constructor\") ? t.constructor : function () {\n            return e.apply(this, arguments);\n          },\n              i = function i() {\n            this.constructor = a;\n          };\n\n          return i.prototype = e.prototype, a.prototype = new i(), a.extend = o.inherits, t && o.extend(a.prototype, t), a.__super__ = e.prototype, a;\n        }, o.noop = function () {}, o.uid = function () {\n          var t = 0;\n          return function () {\n            return t++;\n          };\n        }(), o.isNumber = function (t) {\n          return !isNaN(parseFloat(t)) && isFinite(t);\n        }, o.almostEquals = function (t, e, a) {\n          return Math.abs(t - e) < a;\n        }, o.max = function (t) {\n          return t.reduce(function (t, e) {\n            return isNaN(e) ? t : Math.max(t, e);\n          }, Number.NEGATIVE_INFINITY);\n        }, o.min = function (t) {\n          return t.reduce(function (t, e) {\n            return isNaN(e) ? t : Math.min(t, e);\n          }, Number.POSITIVE_INFINITY);\n        }, o.sign = Math.sign ? function (t) {\n          return Math.sign(t);\n        } : function (t) {\n          return t = +t, 0 === t || isNaN(t) ? t : t > 0 ? 1 : -1;\n        }, o.log10 = Math.log10 ? function (t) {\n          return Math.log10(t);\n        } : function (t) {\n          return Math.log(t) / Math.LN10;\n        }, o.toRadians = function (t) {\n          return t * (Math.PI / 180);\n        }, o.toDegrees = function (t) {\n          return t * (180 / Math.PI);\n        }, o.getAngleFromPoint = function (t, e) {\n          var a = e.x - t.x,\n              i = e.y - t.y,\n              n = Math.sqrt(a * a + i * i),\n              o = Math.atan2(i, a);\n          return o < -0.5 * Math.PI && (o += 2 * Math.PI), {\n            angle: o,\n            distance: n\n          };\n        }, o.distanceBetweenPoints = function (t, e) {\n          return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));\n        }, o.aliasPixel = function (t) {\n          return t % 2 === 0 ? 0 : 0.5;\n        }, o.splineCurve = function (t, e, a, i) {\n          var n = t.skip ? e : t,\n              o = e,\n              r = a.skip ? e : a,\n              l = Math.sqrt(Math.pow(o.x - n.x, 2) + Math.pow(o.y - n.y, 2)),\n              s = Math.sqrt(Math.pow(r.x - o.x, 2) + Math.pow(r.y - o.y, 2)),\n              d = l / (l + s),\n              u = s / (l + s);\n          d = isNaN(d) ? 0 : d, u = isNaN(u) ? 0 : u;\n          var c = i * d,\n              h = i * u;\n          return {\n            previous: {\n              x: o.x - c * (r.x - n.x),\n              y: o.y - c * (r.y - n.y)\n            },\n            next: {\n              x: o.x + h * (r.x - n.x),\n              y: o.y + h * (r.y - n.y)\n            }\n          };\n        }, o.EPSILON = Number.EPSILON || 1e-14, o.splineCurveMonotone = function (t) {\n          var e,\n              a,\n              i,\n              n,\n              r = (t || []).map(function (t) {\n            return {\n              model: t._model,\n              deltaK: 0,\n              mK: 0\n            };\n          }),\n              l = r.length;\n\n          for (e = 0; l > e; ++e) {\n            i = r[e], i.model.skip || (a = e > 0 ? r[e - 1] : null, n = l - 1 > e ? r[e + 1] : null, n && !n.model.skip && (i.deltaK = (n.model.y - i.model.y) / (n.model.x - i.model.x)), !a || a.model.skip ? i.mK = i.deltaK : !n || n.model.skip ? i.mK = a.deltaK : this.sign(a.deltaK) !== this.sign(i.deltaK) ? i.mK = 0 : i.mK = (a.deltaK + i.deltaK) / 2);\n          }\n\n          var s, d, u, c;\n\n          for (e = 0; l - 1 > e; ++e) {\n            i = r[e], n = r[e + 1], i.model.skip || n.model.skip || (o.almostEquals(i.deltaK, 0, this.EPSILON) ? i.mK = n.mK = 0 : (s = i.mK / i.deltaK, d = n.mK / i.deltaK, c = Math.pow(s, 2) + Math.pow(d, 2), 9 >= c || (u = 3 / Math.sqrt(c), i.mK = s * u * i.deltaK, n.mK = d * u * i.deltaK)));\n          }\n\n          var h;\n\n          for (e = 0; l > e; ++e) {\n            i = r[e], i.model.skip || (a = e > 0 ? r[e - 1] : null, n = l - 1 > e ? r[e + 1] : null, a && !a.model.skip && (h = (i.model.x - a.model.x) / 3, i.model.controlPointPreviousX = i.model.x - h, i.model.controlPointPreviousY = i.model.y - h * i.mK), n && !n.model.skip && (h = (n.model.x - i.model.x) / 3, i.model.controlPointNextX = i.model.x + h, i.model.controlPointNextY = i.model.y + h * i.mK));\n          }\n        }, o.nextItem = function (t, e, a) {\n          return a ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1];\n        }, o.previousItem = function (t, e, a) {\n          return a ? 0 >= e ? t[t.length - 1] : t[e - 1] : 0 >= e ? t[0] : t[e - 1];\n        }, o.niceNum = function (t, e) {\n          var a,\n              i = Math.floor(o.log10(t)),\n              n = t / Math.pow(10, i);\n          return a = e ? 1.5 > n ? 1 : 3 > n ? 2 : 7 > n ? 5 : 10 : 1 >= n ? 1 : 2 >= n ? 2 : 5 >= n ? 5 : 10, a * Math.pow(10, i);\n        };\n        var r = o.easingEffects = {\n          linear: function linear(t) {\n            return t;\n          },\n          easeInQuad: function easeInQuad(t) {\n            return t * t;\n          },\n          easeOutQuad: function easeOutQuad(t) {\n            return -1 * t * (t - 2);\n          },\n          easeInOutQuad: function easeInOutQuad(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);\n          },\n          easeInCubic: function easeInCubic(t) {\n            return t * t * t;\n          },\n          easeOutCubic: function easeOutCubic(t) {\n            return 1 * ((t = t / 1 - 1) * t * t + 1);\n          },\n          easeInOutCubic: function easeInOutCubic(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2);\n          },\n          easeInQuart: function easeInQuart(t) {\n            return t * t * t * t;\n          },\n          easeOutQuart: function easeOutQuart(t) {\n            return -1 * ((t = t / 1 - 1) * t * t * t - 1);\n          },\n          easeInOutQuart: function easeInOutQuart(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2);\n          },\n          easeInQuint: function easeInQuint(t) {\n            return 1 * (t /= 1) * t * t * t * t;\n          },\n          easeOutQuint: function easeOutQuint(t) {\n            return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n          },\n          easeInOutQuint: function easeInOutQuint(t) {\n            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2);\n          },\n          easeInSine: function easeInSine(t) {\n            return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n          },\n          easeOutSine: function easeOutSine(t) {\n            return 1 * Math.sin(t / 1 * (Math.PI / 2));\n          },\n          easeInOutSine: function easeInOutSine(t) {\n            return -0.5 * (Math.cos(Math.PI * t / 1) - 1);\n          },\n          easeInExpo: function easeInExpo(t) {\n            return 0 === t ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n          },\n          easeOutExpo: function easeOutExpo(t) {\n            return 1 === t ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n          },\n          easeInOutExpo: function easeInOutExpo(t) {\n            return 0 === t ? 0 : 1 === t ? 1 : (t /= 0.5) < 1 ? 0.5 * Math.pow(2, 10 * (t - 1)) : 0.5 * (-Math.pow(2, -10 * --t) + 2);\n          },\n          easeInCirc: function easeInCirc(t) {\n            return t >= 1 ? t : -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n          },\n          easeOutCirc: function easeOutCirc(t) {\n            return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n          },\n          easeInOutCirc: function easeInOutCirc(t) {\n            return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n          },\n          easeInElastic: function easeInElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 1 === (t /= 1) ? 1 : (a || (a = 0.3), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), -(i * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a)));\n          },\n          easeOutElastic: function easeOutElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 1 === (t /= 1) ? 1 : (a || (a = 0.3), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), i * Math.pow(2, -10 * t) * Math.sin((1 * t - e) * (2 * Math.PI) / a) + 1);\n          },\n          easeInOutElastic: function easeInOutElastic(t) {\n            var e = 1.70158,\n                a = 0,\n                i = 1;\n            return 0 === t ? 0 : 2 === (t /= 0.5) ? 1 : (a || (a = 1 * (0.3 * 1.5)), i < Math.abs(1) ? (i = 1, e = a / 4) : e = a / (2 * Math.PI) * Math.asin(1 / i), 1 > t ? -0.5 * (i * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a)) : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((1 * t - e) * (2 * Math.PI) / a) * 0.5 + 1);\n          },\n          easeInBack: function easeInBack(t) {\n            var e = 1.70158;\n            return 1 * (t /= 1) * t * ((e + 1) * t - e);\n          },\n          easeOutBack: function easeOutBack(t) {\n            var e = 1.70158;\n            return 1 * ((t = t / 1 - 1) * t * ((e + 1) * t + e) + 1);\n          },\n          easeInOutBack: function easeInOutBack(t) {\n            var e = 1.70158;\n            return (t /= 0.5) < 1 ? 0.5 * (t * t * (((e *= 1.525) + 1) * t - e)) : 0.5 * ((t -= 2) * t * (((e *= 1.525) + 1) * t + e) + 2);\n          },\n          easeInBounce: function easeInBounce(t) {\n            return 1 - r.easeOutBounce(1 - t);\n          },\n          easeOutBounce: function easeOutBounce(t) {\n            return (t /= 1) < 1 / 2.75 ? 1 * (7.5625 * t * t) : 2 / 2.75 > t ? 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) : 2.5 / 2.75 > t ? 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) : 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);\n          },\n          easeInOutBounce: function easeInOutBounce(t) {\n            return 0.5 > t ? 0.5 * r.easeInBounce(2 * t) : 0.5 * r.easeOutBounce(2 * t - 1) + 0.5;\n          }\n        };\n        o.requestAnimFrame = function () {\n          return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n            return window.setTimeout(t, 1e3 / 60);\n          };\n        }(), o.cancelAnimFrame = function () {\n          return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (t) {\n            return window.clearTimeout(t, 1e3 / 60);\n          };\n        }(), o.getRelativePosition = function (t, e) {\n          var a,\n              i,\n              n = t.originalEvent || t,\n              r = t.currentTarget || t.srcElement,\n              l = r.getBoundingClientRect(),\n              s = n.touches;\n          s && s.length > 0 ? (a = s[0].clientX, i = s[0].clientY) : (a = n.clientX, i = n.clientY);\n          var d = parseFloat(o.getStyle(r, \"padding-left\")),\n              u = parseFloat(o.getStyle(r, \"padding-top\")),\n              c = parseFloat(o.getStyle(r, \"padding-right\")),\n              h = parseFloat(o.getStyle(r, \"padding-bottom\")),\n              f = l.right - l.left - d - c,\n              g = l.bottom - l.top - u - h;\n          return a = Math.round((a - l.left - d) / f * r.width / e.currentDevicePixelRatio), i = Math.round((i - l.top - u) / g * r.height / e.currentDevicePixelRatio), {\n            x: a,\n            y: i\n          };\n        }, o.addEvent = function (t, e, a) {\n          t.addEventListener ? t.addEventListener(e, a) : t.attachEvent ? t.attachEvent(\"on\" + e, a) : t[\"on\" + e] = a;\n        }, o.removeEvent = function (t, e, a) {\n          t.removeEventListener ? t.removeEventListener(e, a, !1) : t.detachEvent ? t.detachEvent(\"on\" + e, a) : t[\"on\" + e] = o.noop;\n        }, o.bindEvents = function (t, e, a) {\n          var i = t.events = t.events || {};\n          o.each(e, function (e) {\n            i[e] = function () {\n              a.apply(t, arguments);\n            }, o.addEvent(t.chart.canvas, e, i[e]);\n          });\n        }, o.unbindEvents = function (t, e) {\n          var a = t.chart.canvas;\n          o.each(e, function (t, e) {\n            o.removeEvent(a, e, t);\n          });\n        }, o.getConstraintWidth = function (t) {\n          return n(t, \"max-width\", \"clientWidth\");\n        }, o.getConstraintHeight = function (t) {\n          return n(t, \"maxHeight\", \"clientHeight\");\n        }, o.getMaximumWidth = function (t) {\n          var e = t.parentNode,\n              a = parseInt(o.getStyle(e, \"padding-left\"), 10),\n              i = parseInt(o.getStyle(e, \"padding-right\"), 10),\n              n = e.clientWidth - a - i,\n              r = o.getConstraintWidth(t);\n          return isNaN(r) ? n : Math.min(n, r);\n        }, o.getMaximumHeight = function (t) {\n          var e = t.parentNode,\n              a = parseInt(o.getStyle(e, \"padding-top\"), 10),\n              i = parseInt(o.getStyle(e, \"padding-bottom\"), 10),\n              n = e.clientHeight - a - i,\n              r = o.getConstraintHeight(t);\n          return isNaN(r) ? n : Math.min(n, r);\n        }, o.getStyle = function (t, e) {\n          return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e);\n        }, o.retinaScale = function (t) {\n          var e = t.currentDevicePixelRatio = window.devicePixelRatio || 1;\n\n          if (1 !== e) {\n            var a = t.canvas,\n                i = t.height,\n                n = t.width;\n            a.height = i * e, a.width = n * e, t.ctx.scale(e, e), a.style.height = i + \"px\", a.style.width = n + \"px\";\n          }\n        }, o.clear = function (t) {\n          t.ctx.clearRect(0, 0, t.width, t.height);\n        }, o.fontString = function (t, e, a) {\n          return e + \" \" + t + \"px \" + a;\n        }, o.longestText = function (t, e, a, i) {\n          i = i || {};\n          var n = i.data = i.data || {},\n              r = i.garbageCollect = i.garbageCollect || [];\n          i.font !== e && (n = i.data = {}, r = i.garbageCollect = [], i.font = e), t.font = e;\n          var l = 0;\n          o.each(a, function (e) {\n            void 0 !== e && null !== e && o.isArray(e) !== !0 ? l = o.measureText(t, n, r, l, e) : o.isArray(e) && o.each(e, function (e) {\n              void 0 === e || null === e || o.isArray(e) || (l = o.measureText(t, n, r, l, e));\n            });\n          });\n          var s = r.length / 2;\n\n          if (s > a.length) {\n            for (var d = 0; s > d; d++) {\n              delete n[r[d]];\n            }\n\n            r.splice(0, s);\n          }\n\n          return l;\n        }, o.measureText = function (t, e, a, i, n) {\n          var o = e[n];\n          return o || (o = e[n] = t.measureText(n).width, a.push(n)), o > i && (i = o), i;\n        }, o.numberOfLabelLines = function (t) {\n          var e = 1;\n          return o.each(t, function (t) {\n            o.isArray(t) && t.length > e && (e = t.length);\n          }), e;\n        }, o.drawRoundedRectangle = function (t, e, a, i, n, o) {\n          t.beginPath(), t.moveTo(e + o, a), t.lineTo(e + i - o, a), t.quadraticCurveTo(e + i, a, e + i, a + o), t.lineTo(e + i, a + n - o), t.quadraticCurveTo(e + i, a + n, e + i - o, a + n), t.lineTo(e + o, a + n), t.quadraticCurveTo(e, a + n, e, a + n - o), t.lineTo(e, a + o), t.quadraticCurveTo(e, a, e + o, a), t.closePath();\n        }, o.color = function (e) {\n          return i ? i(e instanceof CanvasGradient ? t.defaults.global.defaultColor : e) : (console.error(\"Color.js not found!\"), e);\n        }, o.addResizeListener = function (t, e) {\n          var a = document.createElement(\"iframe\");\n          a.className = \"chartjs-hidden-iframe\", a.style.cssText = \"display:block;overflow:hidden;border:0;margin:0;top:0;left:0;bottom:0;right:0;height:100%;width:100%;position:absolute;pointer-events:none;z-index:-1;\", a.tabIndex = -1;\n\n          var i = t._chartjs = {\n            resizer: a,\n            ticking: !1\n          },\n              n = function n() {\n            i.ticking || (i.ticking = !0, o.requestAnimFrame.call(window, function () {\n              return i.resizer ? (i.ticking = !1, e()) : void 0;\n            }));\n          };\n\n          o.addEvent(a, \"load\", function () {\n            o.addEvent(a.contentWindow || a, \"resize\", n), n();\n          }), t.insertBefore(a, t.firstChild);\n        }, o.removeResizeListener = function (t) {\n          if (t && t._chartjs) {\n            var e = t._chartjs.resizer;\n            e && (e.parentNode.removeChild(e), t._chartjs.resizer = null), delete t._chartjs;\n          }\n        }, o.isArray = Array.isArray ? function (t) {\n          return Array.isArray(t);\n        } : function (t) {\n          return \"[object Array]\" === Object.prototype.toString.call(t);\n        }, o.arrayEquals = function (t, e) {\n          var a, i, n, r;\n          if (!t || !e || t.length !== e.length) return !1;\n\n          for (a = 0, i = t.length; i > a; ++a) {\n            if (n = t[a], r = e[a], n instanceof Array && r instanceof Array) {\n              if (!o.arrayEquals(n, r)) return !1;\n            } else if (n !== r) return !1;\n          }\n\n          return !0;\n        }, o.callCallback = function (t, e, a) {\n          t && \"function\" == typeof t.call && t.apply(a, e);\n        }, o.getHoverColor = function (t) {\n          return t instanceof CanvasPattern ? t : o.color(t).saturate(0.5).darken(0.1).rgbString();\n        };\n      };\n    }, {\n      3: 3\n    }],\n    27: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a,\n              i,\n              n,\n              o,\n              r,\n              l = t.data.datasets;\n\n          for (i = 0, o = l.length; o > i; ++i) {\n            if (t.isDatasetVisible(i)) for (a = t.getDatasetMeta(i), n = 0, r = a.data.length; r > n; ++n) {\n              var s = a.data[n];\n              s._view.skip || e(s);\n            }\n          }\n        }\n\n        function a(t, a) {\n          var i = [];\n          return e(t, function (t) {\n            t.inRange(a.x, a.y) && i.push(t);\n          }), i;\n        }\n\n        function i(t, a, i, n) {\n          var r = Number.POSITIVE_INFINITY,\n              l = [];\n          return n || (n = o.distanceBetweenPoints), e(t, function (t) {\n            if (!i || t.inRange(a.x, a.y)) {\n              var e = t.getCenterPoint(),\n                  o = n(a, e);\n              r > o ? (l = [t], r = o) : o === r && l.push(t);\n            }\n          }), l;\n        }\n\n        function n(t, e, n) {\n          var r = o.getRelativePosition(e, t.chart),\n              l = function l(t, e) {\n            return Math.abs(t.x - e.x);\n          },\n              s = n.intersect ? a(t, r) : i(t, r, !1, l),\n              d = [];\n\n          return s.length ? (t.data.datasets.forEach(function (e, a) {\n            if (t.isDatasetVisible(a)) {\n              var i = t.getDatasetMeta(a),\n                  n = i.data[s[0]._index];\n              n && !n._view.skip && d.push(n);\n            }\n          }), d) : [];\n        }\n\n        var o = t.helpers;\n        t.Interaction = {\n          modes: {\n            single: function single(t, a) {\n              var i = o.getRelativePosition(a, t.chart),\n                  n = [];\n              return e(t, function (t) {\n                return t.inRange(i.x, i.y) ? (n.push(t), n) : void 0;\n              }), n.slice(0, 1);\n            },\n            label: n,\n            index: n,\n            dataset: function dataset(t, e, n) {\n              var r = o.getRelativePosition(e, t.chart),\n                  l = n.intersect ? a(t, r) : i(t, r, !1);\n              return l.length > 0 && (l = t.getDatasetMeta(l[0]._datasetIndex).data), l;\n            },\n            \"x-axis\": function xAxis(t, e) {\n              return n(t, e, !0);\n            },\n            point: function point(t, e) {\n              var i = o.getRelativePosition(e, t.chart);\n              return a(t, i);\n            },\n            nearest: function nearest(t, e, a) {\n              var n = o.getRelativePosition(e, t.chart),\n                  r = i(t, n, a.intersect);\n              return r.length > 1 && r.sort(function (t, e) {\n                var a = t.getArea(),\n                    i = e.getArea(),\n                    n = a - i;\n                return 0 === n && (n = t._datasetIndex - e._datasetIndex), n;\n              }), r.slice(0, 1);\n            },\n            x: function x(t, a, i) {\n              var n = o.getRelativePosition(a, t.chart),\n                  r = [],\n                  l = !1;\n              return e(t, function (t) {\n                t.inXRange(n.x) && r.push(t), t.inRange(n.x, n.y) && (l = !0);\n              }), i.intersect && !l && (r = []), r;\n            },\n            y: function y(t, a, i) {\n              var n = o.getRelativePosition(a, t.chart),\n                  r = [],\n                  l = !1;\n              return e(t, function (t) {\n                t.inYRange(n.y) && r.push(t), t.inRange(n.x, n.y) && (l = !0);\n              }), i.intersect && !l && (r = []), r;\n            }\n          }\n        };\n      };\n    }, {}],\n    28: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function () {\n        var t = function t(e, a) {\n          return this.controller = new t.Controller(e, a, this), this.controller;\n        };\n\n        return t.defaults = {\n          global: {\n            responsive: !0,\n            responsiveAnimationDuration: 0,\n            maintainAspectRatio: !0,\n            events: [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"],\n            hover: {\n              onHover: null,\n              mode: \"nearest\",\n              intersect: !0,\n              animationDuration: 400\n            },\n            onClick: null,\n            defaultColor: \"rgba(0,0,0,0.1)\",\n            defaultFontColor: \"#666\",\n            defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            defaultFontSize: 12,\n            defaultFontStyle: \"normal\",\n            showLines: !0,\n            elements: {},\n            legendCallback: function legendCallback(t) {\n              var e = [];\n              e.push('<ul className=\"' + t.id + '-legend\">');\n\n              for (var a = 0; a < t.data.datasets.length; a++) {\n                e.push('<li><span style=\"background-color:' + t.data.datasets[a].backgroundColor + '\"></span>'), t.data.datasets[a].label && e.push(t.data.datasets[a].label), e.push(\"</li>\");\n              }\n\n              return e.push(\"</ul>\"), e.join(\"\");\n            }\n          }\n        }, t.Chart = t, t;\n      };\n    }, {}],\n    29: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.layoutService = {\n          defaults: {},\n          addBox: function addBox(t, e) {\n            t.boxes || (t.boxes = []), t.boxes.push(e);\n          },\n          removeBox: function removeBox(t, e) {\n            t.boxes && t.boxes.splice(t.boxes.indexOf(e), 1);\n          },\n          update: function update(t, a, i) {\n            function n(t) {\n              var e,\n                  a = t.isHorizontal();\n              a ? (e = t.update(t.options.fullWidth ? x : C, M), D -= e.height) : (e = t.update(w, S), C -= e.width), I.push({\n                horizontal: a,\n                minSize: e,\n                box: t\n              });\n            }\n\n            function o(t) {\n              var a = e.findNextWhere(I, function (e) {\n                return e.box === t;\n              });\n              if (a) if (t.isHorizontal()) {\n                var i = {\n                  left: A,\n                  right: T,\n                  top: 0,\n                  bottom: 0\n                };\n                t.update(t.options.fullWidth ? x : C, y / 2, i);\n              } else t.update(a.minSize.width, D);\n            }\n\n            function r(t) {\n              var a = e.findNextWhere(I, function (e) {\n                return e.box === t;\n              }),\n                  i = {\n                left: 0,\n                right: 0,\n                top: P,\n                bottom: F\n              };\n              a && t.update(a.minSize.width, D, i);\n            }\n\n            function l(t) {\n              t.isHorizontal() ? (t.left = t.options.fullWidth ? u : A, t.right = t.options.fullWidth ? a - c : A + C, t.top = L, t.bottom = L + t.height, L = t.bottom) : (t.left = V, t.right = V + t.width, t.top = P, t.bottom = P + D, V = t.right);\n            }\n\n            if (t) {\n              var s = t.options.layout,\n                  d = s ? s.padding : null,\n                  u = 0,\n                  c = 0,\n                  h = 0,\n                  f = 0;\n              isNaN(d) ? (u = d.left || 0, c = d.right || 0, h = d.top || 0, f = d.bottom || 0) : (u = d, c = d, h = d, f = d);\n              var g = e.where(t.boxes, function (t) {\n                return \"left\" === t.options.position;\n              }),\n                  p = e.where(t.boxes, function (t) {\n                return \"right\" === t.options.position;\n              }),\n                  m = e.where(t.boxes, function (t) {\n                return \"top\" === t.options.position;\n              }),\n                  b = e.where(t.boxes, function (t) {\n                return \"bottom\" === t.options.position;\n              }),\n                  v = e.where(t.boxes, function (t) {\n                return \"chartArea\" === t.options.position;\n              });\n              m.sort(function (t, e) {\n                return (e.options.fullWidth ? 1 : 0) - (t.options.fullWidth ? 1 : 0);\n              }), b.sort(function (t, e) {\n                return (t.options.fullWidth ? 1 : 0) - (e.options.fullWidth ? 1 : 0);\n              });\n              var x = a - u - c,\n                  y = i - h - f,\n                  k = x / 2,\n                  S = y / 2,\n                  w = (a - k) / (g.length + p.length),\n                  M = (i - S) / (m.length + b.length),\n                  C = x,\n                  D = y,\n                  I = [];\n              e.each(g.concat(p, m, b), n);\n              var A = u,\n                  T = c,\n                  P = h,\n                  F = f;\n              e.each(g.concat(p), o), e.each(g, function (t) {\n                A += t.width;\n              }), e.each(p, function (t) {\n                T += t.width;\n              }), e.each(m.concat(b), o), e.each(m, function (t) {\n                P += t.height;\n              }), e.each(b, function (t) {\n                F += t.height;\n              }), e.each(g.concat(p), r), A = u, T = c, P = h, F = f, e.each(g, function (t) {\n                A += t.width;\n              }), e.each(p, function (t) {\n                T += t.width;\n              }), e.each(m, function (t) {\n                P += t.height;\n              }), e.each(b, function (t) {\n                F += t.height;\n              });\n\n              var _ = i - P - F,\n                  R = a - A - T;\n\n              (R !== C || _ !== D) && (e.each(g, function (t) {\n                t.height = _;\n              }), e.each(p, function (t) {\n                t.height = _;\n              }), e.each(m, function (t) {\n                t.options.fullWidth || (t.width = R);\n              }), e.each(b, function (t) {\n                t.options.fullWidth || (t.width = R);\n              }), D = _, C = R);\n              var V = u,\n                  L = h;\n              e.each(g.concat(m), l), V += C, L += D, e.each(p, l), e.each(b, l), t.chartArea = {\n                left: A,\n                top: P,\n                right: A + C,\n                bottom: P + D\n              }, e.each(v, function (e) {\n                e.left = t.chartArea.left, e.top = t.chartArea.top, e.right = t.chartArea.right, e.bottom = t.chartArea.bottom, e.update(C, D);\n              });\n            }\n          }\n        };\n      };\n    }, {}],\n    30: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          return t.usePointStyle ? e * Math.SQRT2 : t.boxWidth;\n        }\n\n        var a = t.helpers,\n            i = a.noop;\n        t.defaults.global.legend = {\n          display: !0,\n          position: \"top\",\n          fullWidth: !0,\n          reverse: !1,\n          onClick: function onClick(t, e) {\n            var a = e.datasetIndex,\n                i = this.chart,\n                n = i.getDatasetMeta(a);\n            n.hidden = null === n.hidden ? !i.data.datasets[a].hidden : null, i.update();\n          },\n          onHover: null,\n          labels: {\n            boxWidth: 40,\n            padding: 10,\n            generateLabels: function generateLabels(t) {\n              var e = t.data;\n              return a.isArray(e.datasets) ? e.datasets.map(function (e, i) {\n                return {\n                  text: e.label,\n                  fillStyle: a.isArray(e.backgroundColor) ? e.backgroundColor[0] : e.backgroundColor,\n                  hidden: !t.isDatasetVisible(i),\n                  lineCap: e.borderCapStyle,\n                  lineDash: e.borderDash,\n                  lineDashOffset: e.borderDashOffset,\n                  lineJoin: e.borderJoinStyle,\n                  lineWidth: e.borderWidth,\n                  strokeStyle: e.borderColor,\n                  pointStyle: e.pointStyle,\n                  datasetIndex: i\n                };\n              }, this) : [];\n            }\n          }\n        }, t.Legend = t.Element.extend({\n          initialize: function initialize(t) {\n            a.extend(this, t), this.legendHitBoxes = [], this.doughnutMode = !1;\n          },\n          beforeUpdate: i,\n          update: function update(t, e, a) {\n            var i = this;\n            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = a, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n          },\n          afterUpdate: i,\n          beforeSetDimensions: i,\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n              width: 0,\n              height: 0\n            };\n          },\n          afterSetDimensions: i,\n          beforeBuildLabels: i,\n          buildLabels: function buildLabels() {\n            var t = this;\n            t.legendItems = t.options.labels.generateLabels.call(t, t.chart), t.options.reverse && t.legendItems.reverse();\n          },\n          afterBuildLabels: i,\n          beforeFit: i,\n          fit: function fit() {\n            var i = this,\n                n = i.options,\n                o = n.labels,\n                r = n.display,\n                l = i.ctx,\n                s = t.defaults.global,\n                d = a.getValueOrDefault,\n                u = d(o.fontSize, s.defaultFontSize),\n                c = d(o.fontStyle, s.defaultFontStyle),\n                h = d(o.fontFamily, s.defaultFontFamily),\n                f = a.fontString(u, c, h),\n                g = i.legendHitBoxes = [],\n                p = i.minSize,\n                m = i.isHorizontal();\n            if (m ? (p.width = i.maxWidth, p.height = r ? 10 : 0) : (p.width = r ? 10 : 0, p.height = i.maxHeight), r) if (l.font = f, m) {\n              var b = i.lineWidths = [0],\n                  v = i.legendItems.length ? u + o.padding : 0;\n              l.textAlign = \"left\", l.textBaseline = \"top\", a.each(i.legendItems, function (t, a) {\n                var n = e(o, u),\n                    r = n + u / 2 + l.measureText(t.text).width;\n                b[b.length - 1] + r + o.padding >= i.width && (v += u + o.padding, b[b.length] = i.left), g[a] = {\n                  left: 0,\n                  top: 0,\n                  width: r,\n                  height: u\n                }, b[b.length - 1] += r + o.padding;\n              }), p.height += v;\n            } else {\n              var x = o.padding,\n                  y = i.columnWidths = [],\n                  k = o.padding,\n                  S = 0,\n                  w = 0,\n                  M = u + x;\n              a.each(i.legendItems, function (t, a) {\n                var i = e(o, u),\n                    n = i + u / 2 + l.measureText(t.text).width;\n                w + M > p.height && (k += S + o.padding, y.push(S), S = 0, w = 0), S = Math.max(S, n), w += M, g[a] = {\n                  left: 0,\n                  top: 0,\n                  width: n,\n                  height: u\n                };\n              }), k += S, y.push(S), p.width += k;\n            }\n            i.width = p.width, i.height = p.height;\n          },\n          afterFit: i,\n          isHorizontal: function isHorizontal() {\n            return \"top\" === this.options.position || \"bottom\" === this.options.position;\n          },\n          draw: function draw() {\n            var i = this,\n                n = i.options,\n                o = n.labels,\n                r = t.defaults.global,\n                l = r.elements.line,\n                s = i.width,\n                d = i.lineWidths;\n\n            if (n.display) {\n              var u,\n                  c = i.ctx,\n                  h = a.getValueOrDefault,\n                  f = h(o.fontColor, r.defaultFontColor),\n                  g = h(o.fontSize, r.defaultFontSize),\n                  p = h(o.fontStyle, r.defaultFontStyle),\n                  m = h(o.fontFamily, r.defaultFontFamily),\n                  b = a.fontString(g, p, m);\n              c.textAlign = \"left\", c.textBaseline = \"top\", c.lineWidth = 0.5, c.strokeStyle = f, c.fillStyle = f, c.font = b;\n\n              var v = e(o, g),\n                  x = i.legendHitBoxes,\n                  y = function y(e, a, i) {\n                if (!(isNaN(v) || 0 >= v)) {\n                  c.save(), c.fillStyle = h(i.fillStyle, r.defaultColor), c.lineCap = h(i.lineCap, l.borderCapStyle), c.lineDashOffset = h(i.lineDashOffset, l.borderDashOffset), c.lineJoin = h(i.lineJoin, l.borderJoinStyle), c.lineWidth = h(i.lineWidth, l.borderWidth), c.strokeStyle = h(i.strokeStyle, r.defaultColor);\n                  var o = 0 === h(i.lineWidth, l.borderWidth);\n\n                  if (c.setLineDash && c.setLineDash(h(i.lineDash, l.borderDash)), n.labels && n.labels.usePointStyle) {\n                    var s = g * Math.SQRT2 / 2,\n                        d = s / Math.SQRT2,\n                        u = e + d,\n                        f = a + d;\n                    t.canvasHelpers.drawPoint(c, i.pointStyle, s, u, f);\n                  } else o || c.strokeRect(e, a, v, g), c.fillRect(e, a, v, g);\n\n                  c.restore();\n                }\n              },\n                  k = function k(t, e, a, i) {\n                c.fillText(a.text, v + g / 2 + t, e), a.hidden && (c.beginPath(), c.lineWidth = 2, c.moveTo(v + g / 2 + t, e + g / 2), c.lineTo(v + g / 2 + t + i, e + g / 2), c.stroke());\n              },\n                  S = i.isHorizontal();\n\n              u = S ? {\n                x: i.left + (s - d[0]) / 2,\n                y: i.top + o.padding,\n                line: 0\n              } : {\n                x: i.left + o.padding,\n                y: i.top + o.padding,\n                line: 0\n              };\n              var w = g + o.padding;\n              a.each(i.legendItems, function (t, e) {\n                var a = c.measureText(t.text).width,\n                    n = v + g / 2 + a,\n                    r = u.x,\n                    l = u.y;\n                S ? r + n >= s && (l = u.y += w, u.line++, r = u.x = i.left + (s - d[u.line]) / 2) : l + w > i.bottom && (r = u.x = r + i.columnWidths[u.line] + o.padding, l = u.y = i.top, u.line++), y(r, l, t), x[e].left = r, x[e].top = l, k(r, l, t, a), S ? u.x += n + o.padding : u.y += w;\n              });\n            }\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                i = e.options,\n                n = \"mouseup\" === t.type ? \"click\" : t.type,\n                o = !1;\n\n            if (\"mousemove\" === n) {\n              if (!i.onHover) return;\n            } else {\n              if (\"click\" !== n) return;\n              if (!i.onClick) return;\n            }\n\n            var r = a.getRelativePosition(t, e.chart.chart),\n                l = r.x,\n                s = r.y;\n            if (l >= e.left && l <= e.right && s >= e.top && s <= e.bottom) for (var d = e.legendHitBoxes, u = 0; u < d.length; ++u) {\n              var c = d[u];\n\n              if (l >= c.left && l <= c.left + c.width && s >= c.top && s <= c.top + c.height) {\n                if (\"click\" === n) {\n                  i.onClick.call(e, t, e.legendItems[u]), o = !0;\n                  break;\n                }\n\n                if (\"mousemove\" === n) {\n                  i.onHover.call(e, t, e.legendItems[u]), o = !0;\n                  break;\n                }\n              }\n            }\n            return o;\n          }\n        }), t.plugins.register({\n          beforeInit: function beforeInit(e) {\n            var a = e.options,\n                i = a.legend;\n            i && (e.legend = new t.Legend({\n              ctx: e.chart.ctx,\n              options: i,\n              chart: e\n            }), t.layoutService.addBox(e, e.legend));\n          }\n        });\n      };\n    }, {}],\n    31: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers.noop;\n        t.plugins = {\n          _plugins: [],\n          register: function register(t) {\n            var e = this._plugins;\n            [].concat(t).forEach(function (t) {\n              -1 === e.indexOf(t) && e.push(t);\n            });\n          },\n          unregister: function unregister(t) {\n            var e = this._plugins;\n            [].concat(t).forEach(function (t) {\n              var a = e.indexOf(t);\n              -1 !== a && e.splice(a, 1);\n            });\n          },\n          clear: function clear() {\n            this._plugins = [];\n          },\n          count: function count() {\n            return this._plugins.length;\n          },\n          getAll: function getAll() {\n            return this._plugins;\n          },\n          notify: function notify(t, e) {\n            var a,\n                i,\n                n = this._plugins,\n                o = n.length;\n\n            for (a = 0; o > a; ++a) {\n              if (i = n[a], \"function\" == typeof i[t] && i[t].apply(i, e || []) === !1) return !1;\n            }\n\n            return !0;\n          }\n        }, t.PluginBase = t.Element.extend({\n          beforeInit: e,\n          afterInit: e,\n          beforeUpdate: e,\n          afterUpdate: e,\n          beforeDraw: e,\n          afterDraw: e,\n          destroy: e\n        }), t.pluginService = t.plugins;\n      };\n    }, {}],\n    32: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.scale = {\n          display: !0,\n          position: \"left\",\n          gridLines: {\n            display: !0,\n            color: \"rgba(0, 0, 0, 0.1)\",\n            lineWidth: 1,\n            drawBorder: !0,\n            drawOnChartArea: !0,\n            drawTicks: !0,\n            tickMarkLength: 10,\n            zeroLineWidth: 1,\n            zeroLineColor: \"rgba(0,0,0,0.25)\",\n            offsetGridLines: !1,\n            borderDash: [],\n            borderDashOffset: 0\n          },\n          scaleLabel: {\n            labelString: \"\",\n            display: !1\n          },\n          ticks: {\n            beginAtZero: !1,\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: !1,\n            padding: 10,\n            reverse: !1,\n            display: !0,\n            autoSkip: !0,\n            autoSkipPadding: 0,\n            labelOffset: 0,\n            callback: t.Ticks.formatters.values\n          }\n        }, t.Scale = t.Element.extend({\n          beforeUpdate: function beforeUpdate() {\n            e.callCallback(this.options.beforeUpdate, [this]);\n          },\n          update: function update(t, a, i) {\n            var n = this;\n            return n.beforeUpdate(), n.maxWidth = t, n.maxHeight = a, n.margins = e.extend({\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }, i), n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n.beforeDataLimits(), n.determineDataLimits(), n.afterDataLimits(), n.beforeBuildTicks(), n.buildTicks(), n.afterBuildTicks(), n.beforeTickToLabelConversion(), n.convertTicksToLabels(), n.afterTickToLabelConversion(), n.beforeCalculateTickRotation(), n.calculateTickRotation(), n.afterCalculateTickRotation(), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate(), n.minSize;\n          },\n          afterUpdate: function afterUpdate() {\n            e.callCallback(this.options.afterUpdate, [this]);\n          },\n          beforeSetDimensions: function beforeSetDimensions() {\n            e.callCallback(this.options.beforeSetDimensions, [this]);\n          },\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;\n          },\n          afterSetDimensions: function afterSetDimensions() {\n            e.callCallback(this.options.afterSetDimensions, [this]);\n          },\n          beforeDataLimits: function beforeDataLimits() {\n            e.callCallback(this.options.beforeDataLimits, [this]);\n          },\n          determineDataLimits: e.noop,\n          afterDataLimits: function afterDataLimits() {\n            e.callCallback(this.options.afterDataLimits, [this]);\n          },\n          beforeBuildTicks: function beforeBuildTicks() {\n            e.callCallback(this.options.beforeBuildTicks, [this]);\n          },\n          buildTicks: e.noop,\n          afterBuildTicks: function afterBuildTicks() {\n            e.callCallback(this.options.afterBuildTicks, [this]);\n          },\n          beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n            e.callCallback(this.options.beforeTickToLabelConversion, [this]);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var t = this,\n                e = t.options.ticks;\n            t.ticks = t.ticks.map(e.userCallback || e.callback);\n          },\n          afterTickToLabelConversion: function afterTickToLabelConversion() {\n            e.callCallback(this.options.afterTickToLabelConversion, [this]);\n          },\n          beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n            e.callCallback(this.options.beforeCalculateTickRotation, [this]);\n          },\n          calculateTickRotation: function calculateTickRotation() {\n            var a = this,\n                i = a.ctx,\n                n = t.defaults.global,\n                o = a.options.ticks,\n                r = e.getValueOrDefault(o.fontSize, n.defaultFontSize),\n                l = e.getValueOrDefault(o.fontStyle, n.defaultFontStyle),\n                s = e.getValueOrDefault(o.fontFamily, n.defaultFontFamily),\n                d = e.fontString(r, l, s);\n            i.font = d;\n            var u,\n                c = i.measureText(a.ticks[0]).width,\n                h = i.measureText(a.ticks[a.ticks.length - 1]).width;\n\n            if (a.labelRotation = o.minRotation || 0, a.paddingRight = 0, a.paddingLeft = 0, a.options.display && a.isHorizontal()) {\n              a.paddingRight = h / 2 + 3, a.paddingLeft = c / 2 + 3, a.longestTextCache || (a.longestTextCache = {});\n\n              for (var f, g, p = e.longestText(i, d, a.ticks, a.longestTextCache), m = p, b = a.getPixelForTick(1) - a.getPixelForTick(0) - 6; m > b && a.labelRotation < o.maxRotation;) {\n                if (f = Math.cos(e.toRadians(a.labelRotation)), g = Math.sin(e.toRadians(a.labelRotation)), u = f * c, u + r / 2 > a.yLabelWidth && (a.paddingLeft = u + r / 2), a.paddingRight = r / 2, g * p > a.maxHeight) {\n                  a.labelRotation--;\n                  break;\n                }\n\n                a.labelRotation++, m = f * p;\n              }\n            }\n\n            a.margins && (a.paddingLeft = Math.max(a.paddingLeft - a.margins.left, 0), a.paddingRight = Math.max(a.paddingRight - a.margins.right, 0));\n          },\n          afterCalculateTickRotation: function afterCalculateTickRotation() {\n            e.callCallback(this.options.afterCalculateTickRotation, [this]);\n          },\n          beforeFit: function beforeFit() {\n            e.callCallback(this.options.beforeFit, [this]);\n          },\n          fit: function fit() {\n            var a = this,\n                i = a.minSize = {\n              width: 0,\n              height: 0\n            },\n                n = a.options,\n                o = t.defaults.global,\n                r = n.ticks,\n                l = n.scaleLabel,\n                s = n.gridLines,\n                d = n.display,\n                u = a.isHorizontal(),\n                c = e.getValueOrDefault(r.fontSize, o.defaultFontSize),\n                h = e.getValueOrDefault(r.fontStyle, o.defaultFontStyle),\n                f = e.getValueOrDefault(r.fontFamily, o.defaultFontFamily),\n                g = e.fontString(c, h, f),\n                p = e.getValueOrDefault(l.fontSize, o.defaultFontSize),\n                m = n.gridLines.tickMarkLength;\n\n            if (u ? i.width = a.isFullWidth() ? a.maxWidth - a.margins.left - a.margins.right : a.maxWidth : i.width = d && s.drawTicks ? m : 0, u ? i.height = d && s.drawTicks ? m : 0 : i.height = a.maxHeight, l.display && d && (u ? i.height += 1.5 * p : i.width += 1.5 * p), r.display && d) {\n              a.longestTextCache || (a.longestTextCache = {});\n              var b = e.longestText(a.ctx, g, a.ticks, a.longestTextCache),\n                  v = e.numberOfLabelLines(a.ticks),\n                  x = 0.5 * c;\n\n              if (u) {\n                a.longestLabelWidth = b;\n                var y = Math.sin(e.toRadians(a.labelRotation)) * a.longestLabelWidth + c * v + x * v;\n                i.height = Math.min(a.maxHeight, i.height + y), a.ctx.font = g;\n                var k = a.ctx.measureText(a.ticks[0]).width,\n                    S = a.ctx.measureText(a.ticks[a.ticks.length - 1]).width,\n                    w = Math.cos(e.toRadians(a.labelRotation)),\n                    M = Math.sin(e.toRadians(a.labelRotation));\n                a.paddingLeft = 0 !== a.labelRotation ? w * k + 3 : k / 2 + 3, a.paddingRight = 0 !== a.labelRotation ? M * (c / 2) + 3 : S / 2 + 3;\n              } else {\n                var C = a.maxWidth - i.width,\n                    D = r.mirror;\n                D ? b = 0 : b += a.options.ticks.padding, C > b ? i.width += b : i.width = a.maxWidth, a.paddingTop = c / 2, a.paddingBottom = c / 2;\n              }\n            }\n\n            a.margins && (a.paddingLeft = Math.max(a.paddingLeft - a.margins.left, 0), a.paddingTop = Math.max(a.paddingTop - a.margins.top, 0), a.paddingRight = Math.max(a.paddingRight - a.margins.right, 0), a.paddingBottom = Math.max(a.paddingBottom - a.margins.bottom, 0)), a.width = i.width, a.height = i.height;\n          },\n          afterFit: function afterFit() {\n            e.callCallback(this.options.afterFit, [this]);\n          },\n          isHorizontal: function isHorizontal() {\n            return \"top\" === this.options.position || \"bottom\" === this.options.position;\n          },\n          isFullWidth: function isFullWidth() {\n            return this.options.fullWidth;\n          },\n          getRightValue: function getRightValue(t) {\n            return null === t || \"undefined\" == typeof t ? NaN : \"number\" != typeof t || isFinite(t) ? \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(t) ? t instanceof Date || t.isValid ? t : this.getRightValue(this.isHorizontal() ? t.x : t.y) : t : NaN;\n          },\n          getLabelForIndex: e.noop,\n          getPixelForValue: e.noop,\n          getValueForPixel: e.noop,\n          getPixelForTick: function getPixelForTick(t, e) {\n            var a = this;\n\n            if (a.isHorizontal()) {\n              var i = a.width - (a.paddingLeft + a.paddingRight),\n                  n = i / Math.max(a.ticks.length - (a.options.gridLines.offsetGridLines ? 0 : 1), 1),\n                  o = n * t + a.paddingLeft;\n              e && (o += n / 2);\n              var r = a.left + Math.round(o);\n              return r += a.isFullWidth() ? a.margins.left : 0;\n            }\n\n            var l = a.height - (a.paddingTop + a.paddingBottom);\n            return a.top + t * (l / (a.ticks.length - 1));\n          },\n          getPixelForDecimal: function getPixelForDecimal(t) {\n            var e = this;\n\n            if (e.isHorizontal()) {\n              var a = e.width - (e.paddingLeft + e.paddingRight),\n                  i = a * t + e.paddingLeft,\n                  n = e.left + Math.round(i);\n              return n += e.isFullWidth() ? e.margins.left : 0;\n            }\n\n            return e.top + t * e.height;\n          },\n          getBasePixel: function getBasePixel() {\n            var t = this,\n                e = t.min,\n                a = t.max;\n            return t.getPixelForValue(t.beginAtZero ? 0 : 0 > e && 0 > a ? a : e > 0 && a > 0 ? e : 0);\n          },\n          draw: function draw(a) {\n            var i = this,\n                n = i.options;\n\n            if (n.display) {\n              var o,\n                  r,\n                  l = i.ctx,\n                  s = t.defaults.global,\n                  d = n.ticks,\n                  u = n.gridLines,\n                  c = n.scaleLabel,\n                  h = 0 !== i.labelRotation,\n                  f = d.autoSkip,\n                  g = i.isHorizontal();\n              d.maxTicksLimit && (r = d.maxTicksLimit);\n              var p = e.getValueOrDefault(d.fontColor, s.defaultFontColor),\n                  m = e.getValueOrDefault(d.fontSize, s.defaultFontSize),\n                  b = e.getValueOrDefault(d.fontStyle, s.defaultFontStyle),\n                  v = e.getValueOrDefault(d.fontFamily, s.defaultFontFamily),\n                  x = e.fontString(m, b, v),\n                  y = u.tickMarkLength,\n                  k = e.getValueOrDefault(u.borderDash, s.borderDash),\n                  S = e.getValueOrDefault(u.borderDashOffset, s.borderDashOffset),\n                  w = e.getValueOrDefault(c.fontColor, s.defaultFontColor),\n                  M = e.getValueOrDefault(c.fontSize, s.defaultFontSize),\n                  C = e.getValueOrDefault(c.fontStyle, s.defaultFontStyle),\n                  D = e.getValueOrDefault(c.fontFamily, s.defaultFontFamily),\n                  I = e.fontString(M, C, D),\n                  A = e.toRadians(i.labelRotation),\n                  T = Math.cos(A),\n                  P = i.longestLabelWidth * T;\n              l.fillStyle = p;\n              var F = [];\n\n              if (g) {\n                if (o = !1, h && (P /= 2), (P + d.autoSkipPadding) * i.ticks.length > i.width - (i.paddingLeft + i.paddingRight) && (o = 1 + Math.floor((P + d.autoSkipPadding) * i.ticks.length / (i.width - (i.paddingLeft + i.paddingRight)))), r && i.ticks.length > r) for (; !o || i.ticks.length / (o || 1) > r;) {\n                  o || (o = 1), o += 1;\n                }\n                f || (o = !1);\n              }\n\n              var _ = \"right\" === n.position ? i.left : i.right - y,\n                  R = \"right\" === n.position ? i.left + y : i.right,\n                  V = \"bottom\" === n.position ? i.top : i.bottom - y,\n                  L = \"bottom\" === n.position ? i.top + y : i.bottom;\n\n              if (e.each(i.ticks, function (t, r) {\n                if (void 0 !== t && null !== t) {\n                  var l = i.ticks.length === r + 1,\n                      s = o > 1 && r % o > 0 || r % o === 0 && r + o >= i.ticks.length;\n\n                  if ((!s || l) && void 0 !== t && null !== t) {\n                    var c, f;\n                    r === (\"undefined\" != typeof i.zeroLineIndex ? i.zeroLineIndex : 0) ? (c = u.zeroLineWidth, f = u.zeroLineColor) : (c = e.getValueAtIndexOrDefault(u.lineWidth, r), f = e.getValueAtIndexOrDefault(u.color, r));\n                    var p,\n                        m,\n                        b,\n                        v,\n                        x,\n                        w,\n                        M,\n                        C,\n                        D,\n                        I,\n                        T = \"middle\",\n                        P = \"middle\";\n\n                    if (g) {\n                      h || (P = \"top\" === n.position ? \"bottom\" : \"top\"), T = h ? \"right\" : \"center\";\n                      var O = i.getPixelForTick(r) + e.aliasPixel(c);\n                      D = i.getPixelForTick(r, u.offsetGridLines) + d.labelOffset, I = h ? i.top + 12 : \"top\" === n.position ? i.bottom - y : i.top + y, p = b = x = M = O, m = V, v = L, w = a.top, C = a.bottom;\n                    } else {\n                      \"left\" === n.position ? d.mirror ? (D = i.right + d.padding, T = \"left\") : (D = i.right - d.padding, T = \"right\") : d.mirror ? (D = i.left - d.padding, T = \"right\") : (D = i.left + d.padding, T = \"left\");\n                      var B = i.getPixelForTick(r);\n                      B += e.aliasPixel(c), I = i.getPixelForTick(r, u.offsetGridLines), p = _, b = R, x = a.left, M = a.right, m = v = w = C = B;\n                    }\n\n                    F.push({\n                      tx1: p,\n                      ty1: m,\n                      tx2: b,\n                      ty2: v,\n                      x1: x,\n                      y1: w,\n                      x2: M,\n                      y2: C,\n                      labelX: D,\n                      labelY: I,\n                      glWidth: c,\n                      glColor: f,\n                      glBorderDash: k,\n                      glBorderDashOffset: S,\n                      rotation: -1 * A,\n                      label: t,\n                      textBaseline: P,\n                      textAlign: T\n                    });\n                  }\n                }\n              }), e.each(F, function (t) {\n                if (u.display && (l.save(), l.lineWidth = t.glWidth, l.strokeStyle = t.glColor, l.setLineDash && (l.setLineDash(t.glBorderDash), l.lineDashOffset = t.glBorderDashOffset), l.beginPath(), u.drawTicks && (l.moveTo(t.tx1, t.ty1), l.lineTo(t.tx2, t.ty2)), u.drawOnChartArea && (l.moveTo(t.x1, t.y1), l.lineTo(t.x2, t.y2)), l.stroke(), l.restore()), d.display) {\n                  l.save(), l.translate(t.labelX, t.labelY), l.rotate(t.rotation), l.font = x, l.textBaseline = t.textBaseline, l.textAlign = t.textAlign;\n                  var a = t.label;\n                  if (e.isArray(a)) for (var i = 0, n = -(a.length - 1) * m * 0.75; i < a.length; ++i) {\n                    l.fillText(\"\" + a[i], 0, n), n += 1.5 * m;\n                  } else l.fillText(a, 0, 0);\n                  l.restore();\n                }\n              }), c.display) {\n                var O,\n                    B,\n                    W = 0;\n                if (g) O = i.left + (i.right - i.left) / 2, B = \"bottom\" === n.position ? i.bottom - M / 2 : i.top + M / 2;else {\n                  var z = \"left\" === n.position;\n                  O = z ? i.left + M / 2 : i.right - M / 2, B = i.top + (i.bottom - i.top) / 2, W = z ? -0.5 * Math.PI : 0.5 * Math.PI;\n                }\n                l.save(), l.translate(O, B), l.rotate(W), l.textAlign = \"center\", l.textBaseline = \"middle\", l.fillStyle = w, l.font = I, l.fillText(c.labelString, 0, 0), l.restore();\n              }\n\n              if (u.drawBorder) {\n                l.lineWidth = e.getValueAtIndexOrDefault(u.lineWidth, 0), l.strokeStyle = e.getValueAtIndexOrDefault(u.color, 0);\n                var N = i.left,\n                    E = i.right,\n                    H = i.top,\n                    U = i.bottom,\n                    j = e.aliasPixel(l.lineWidth);\n                g ? (H = U = \"top\" === n.position ? i.bottom : i.top, H += j, U += j) : (N = E = \"left\" === n.position ? i.right : i.left, N += j, E += j), l.beginPath(), l.moveTo(N, H), l.lineTo(E, U), l.stroke();\n              }\n            }\n          }\n        });\n      };\n    }, {}],\n    33: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.scaleService = {\n          constructors: {},\n          defaults: {},\n          registerScaleType: function registerScaleType(t, a, i) {\n            this.constructors[t] = a, this.defaults[t] = e.clone(i);\n          },\n          getScaleConstructor: function getScaleConstructor(t) {\n            return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0;\n          },\n          getScaleDefaults: function getScaleDefaults(a) {\n            return this.defaults.hasOwnProperty(a) ? e.scaleMerge(t.defaults.scale, this.defaults[a]) : {};\n          },\n          updateScaleDefaults: function updateScaleDefaults(t, a) {\n            var i = this.defaults;\n            i.hasOwnProperty(t) && (i[t] = e.extend(i[t], a));\n          },\n          addScalesToLayout: function addScalesToLayout(a) {\n            e.each(a.scales, function (e) {\n              t.layoutService.addBox(a, e);\n            });\n          }\n        };\n      };\n    }, {}],\n    34: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.Ticks = {\n          generators: {\n            linear: function linear(t, a) {\n              var i,\n                  n = [];\n              if (t.stepSize && t.stepSize > 0) i = t.stepSize;else {\n                var o = e.niceNum(a.max - a.min, !1);\n                i = e.niceNum(o / (t.maxTicks - 1), !0);\n              }\n              var r = Math.floor(a.min / i) * i,\n                  l = Math.ceil(a.max / i) * i;\n\n              if (t.min && t.max && t.stepSize) {\n                var s = (t.max - t.min) % t.stepSize === 0;\n                s && (r = t.min, l = t.max);\n              }\n\n              var d = (l - r) / i;\n              d = e.almostEquals(d, Math.round(d), i / 1e3) ? Math.round(d) : Math.ceil(d), n.push(void 0 !== t.min ? t.min : r);\n\n              for (var u = 1; d > u; ++u) {\n                n.push(r + u * i);\n              }\n\n              return n.push(void 0 !== t.max ? t.max : l), n;\n            },\n            logarithmic: function logarithmic(t, a) {\n              for (var i = [], n = e.getValueOrDefault, o = n(t.min, Math.pow(10, Math.floor(e.log10(a.min)))); o < a.max;) {\n                i.push(o);\n                var r, l;\n                0 === o ? (r = Math.floor(e.log10(a.minNotZero)), l = Math.round(a.minNotZero / Math.pow(10, r))) : (r = Math.floor(e.log10(o)), l = Math.floor(o / Math.pow(10, r)) + 1), 10 === l && (l = 1, ++r), o = l * Math.pow(10, r);\n              }\n\n              var s = n(t.max, o);\n              return i.push(s), i;\n            }\n          },\n          formatters: {\n            values: function values(t) {\n              return e.isArray(t) ? t : \"\" + t;\n            },\n            linear: function linear(t, a, i) {\n              var n = i.length > 3 ? i[2] - i[1] : i[1] - i[0];\n              Math.abs(n) > 1 && t !== Math.floor(t) && (n = t - Math.floor(t));\n              var o = e.log10(Math.abs(n)),\n                  r = \"\";\n\n              if (0 !== t) {\n                var l = -1 * Math.floor(o);\n                l = Math.max(Math.min(l, 20), 0), r = t.toFixed(l);\n              } else r = \"0\";\n\n              return r;\n            },\n            logarithmic: function logarithmic(t, a, i) {\n              var n = t / Math.pow(10, Math.floor(e.log10(t)));\n              return 0 === t ? \"0\" : 1 === n || 2 === n || 5 === n || 0 === a || a === i.length - 1 ? t.toExponential() : \"\";\n            }\n          }\n        };\n      };\n    }, {}],\n    35: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers;\n        t.defaults.global.title = {\n          display: !1,\n          position: \"top\",\n          fullWidth: !0,\n          fontStyle: \"bold\",\n          padding: 10,\n          text: \"\"\n        };\n        var a = e.noop;\n        t.Title = t.Element.extend({\n          initialize: function initialize(a) {\n            var i = this;\n            e.extend(i, a), i.options = e.configMerge(t.defaults.global.title, a.options), i.legendHitBoxes = [];\n          },\n          beforeUpdate: function beforeUpdate() {\n            var a = this.chart.options;\n            a && a.title && (this.options = e.configMerge(t.defaults.global.title, a.title));\n          },\n          update: function update(t, e, a) {\n            var i = this;\n            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = a, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n          },\n          afterUpdate: a,\n          beforeSetDimensions: a,\n          setDimensions: function setDimensions() {\n            var t = this;\n            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n              width: 0,\n              height: 0\n            };\n          },\n          afterSetDimensions: a,\n          beforeBuildLabels: a,\n          buildLabels: a,\n          afterBuildLabels: a,\n          beforeFit: a,\n          fit: function fit() {\n            var a = this,\n                i = e.getValueOrDefault,\n                n = a.options,\n                o = t.defaults.global,\n                r = n.display,\n                l = i(n.fontSize, o.defaultFontSize),\n                s = a.minSize;\n            a.isHorizontal() ? (s.width = a.maxWidth, s.height = r ? l + 2 * n.padding : 0) : (s.width = r ? l + 2 * n.padding : 0, s.height = a.maxHeight), a.width = s.width, a.height = s.height;\n          },\n          afterFit: a,\n          isHorizontal: function isHorizontal() {\n            var t = this.options.position;\n            return \"top\" === t || \"bottom\" === t;\n          },\n          draw: function draw() {\n            var a = this,\n                i = a.ctx,\n                n = e.getValueOrDefault,\n                o = a.options,\n                r = t.defaults.global;\n\n            if (o.display) {\n              var l,\n                  s,\n                  d,\n                  u = n(o.fontSize, r.defaultFontSize),\n                  c = n(o.fontStyle, r.defaultFontStyle),\n                  h = n(o.fontFamily, r.defaultFontFamily),\n                  f = e.fontString(u, c, h),\n                  g = 0,\n                  p = a.top,\n                  m = a.left,\n                  b = a.bottom,\n                  v = a.right;\n              i.fillStyle = n(o.fontColor, r.defaultFontColor), i.font = f, a.isHorizontal() ? (l = m + (v - m) / 2, s = p + (b - p) / 2, d = v - m) : (l = \"left\" === o.position ? m + u / 2 : v - u / 2, s = p + (b - p) / 2, d = b - p, g = Math.PI * (\"left\" === o.position ? -0.5 : 0.5)), i.save(), i.translate(l, s), i.rotate(g), i.textAlign = \"center\", i.textBaseline = \"middle\", i.fillText(o.text, 0, 0, d), i.restore();\n            }\n          }\n        }), t.plugins.register({\n          beforeInit: function beforeInit(e) {\n            var a = e.options,\n                i = a.title;\n            i && (e.titleBlock = new t.Title({\n              ctx: e.chart.ctx,\n              options: i,\n              chart: e\n            }), t.layoutService.addBox(e, e.titleBlock));\n          }\n        });\n      };\n    }, {}],\n    36: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t, e) {\n          var a = s.color(t);\n          return a.alpha(e * a.alpha()).rgbaString();\n        }\n\n        function a(t, e) {\n          return e && (s.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;\n        }\n\n        function i(t) {\n          var e = t._xScale,\n              a = t._yScale || t._scale,\n              i = t._index,\n              n = t._datasetIndex;\n          return {\n            xLabel: e ? e.getLabelForIndex(i, n) : \"\",\n            yLabel: a ? a.getLabelForIndex(i, n) : \"\",\n            index: i,\n            datasetIndex: n,\n            x: t._model.x,\n            y: t._model.y\n          };\n        }\n\n        function n(e) {\n          var a = t.defaults.global,\n              i = s.getValueOrDefault;\n          return {\n            xPadding: e.xPadding,\n            yPadding: e.yPadding,\n            xAlign: e.xAlign,\n            yAlign: e.yAlign,\n            bodyFontColor: e.bodyFontColor,\n            _bodyFontFamily: i(e.bodyFontFamily, a.defaultFontFamily),\n            _bodyFontStyle: i(e.bodyFontStyle, a.defaultFontStyle),\n            _bodyAlign: e.bodyAlign,\n            bodyFontSize: i(e.bodyFontSize, a.defaultFontSize),\n            bodySpacing: e.bodySpacing,\n            titleFontColor: e.titleFontColor,\n            _titleFontFamily: i(e.titleFontFamily, a.defaultFontFamily),\n            _titleFontStyle: i(e.titleFontStyle, a.defaultFontStyle),\n            titleFontSize: i(e.titleFontSize, a.defaultFontSize),\n            _titleAlign: e.titleAlign,\n            titleSpacing: e.titleSpacing,\n            titleMarginBottom: e.titleMarginBottom,\n            footerFontColor: e.footerFontColor,\n            _footerFontFamily: i(e.footerFontFamily, a.defaultFontFamily),\n            _footerFontStyle: i(e.footerFontStyle, a.defaultFontStyle),\n            footerFontSize: i(e.footerFontSize, a.defaultFontSize),\n            _footerAlign: e.footerAlign,\n            footerSpacing: e.footerSpacing,\n            footerMarginTop: e.footerMarginTop,\n            caretSize: e.caretSize,\n            cornerRadius: e.cornerRadius,\n            backgroundColor: e.backgroundColor,\n            opacity: 0,\n            legendColorBackground: e.multiKeyBackground,\n            displayColors: e.displayColors\n          };\n        }\n\n        function o(t, e) {\n          var a = t._chart.ctx,\n              i = 2 * e.yPadding,\n              n = 0,\n              o = e.body,\n              r = o.reduce(function (t, e) {\n            return t + e.before.length + e.lines.length + e.after.length;\n          }, 0);\n          r += e.beforeBody.length + e.afterBody.length;\n          var l = e.title.length,\n              d = e.footer.length,\n              u = e.titleFontSize,\n              c = e.bodyFontSize,\n              h = e.footerFontSize;\n          i += l * u, i += l ? (l - 1) * e.titleSpacing : 0, i += l ? e.titleMarginBottom : 0, i += r * c, i += r ? (r - 1) * e.bodySpacing : 0, i += d ? e.footerMarginTop : 0, i += d * h, i += d ? (d - 1) * e.footerSpacing : 0;\n\n          var f = 0,\n              g = function g(t) {\n            n = Math.max(n, a.measureText(t).width + f);\n          };\n\n          return a.font = s.fontString(u, e._titleFontStyle, e._titleFontFamily), s.each(e.title, g), a.font = s.fontString(c, e._bodyFontStyle, e._bodyFontFamily), s.each(e.beforeBody.concat(e.afterBody), g), f = e.displayColors ? c + 2 : 0, s.each(o, function (t) {\n            s.each(t.before, g), s.each(t.lines, g), s.each(t.after, g);\n          }), f = 0, a.font = s.fontString(h, e._footerFontStyle, e._footerFontFamily), s.each(e.footer, g), n += 2 * e.xPadding, {\n            width: n,\n            height: i\n          };\n        }\n\n        function r(t, e) {\n          var a = t._model,\n              i = t._chart,\n              n = t._chartInstance.chartArea,\n              o = \"center\",\n              r = \"center\";\n          a.y < e.height ? r = \"top\" : a.y > i.height - e.height && (r = \"bottom\");\n          var l,\n              s,\n              d,\n              u,\n              c,\n              h = (n.left + n.right) / 2,\n              f = (n.top + n.bottom) / 2;\n          \"center\" === r ? (l = function l(t) {\n            return h >= t;\n          }, s = function s(t) {\n            return t > h;\n          }) : (l = function l(t) {\n            return t <= e.width / 2;\n          }, s = function s(t) {\n            return t >= i.width - e.width / 2;\n          }), d = function d(t) {\n            return t + e.width > i.width;\n          }, u = function u(t) {\n            return t - e.width < 0;\n          }, c = function c(t) {\n            return f >= t ? \"top\" : \"bottom\";\n          }, l(a.x) ? (o = \"left\", d(a.x) && (o = \"center\", r = c(a.y))) : s(a.x) && (o = \"right\", u(a.x) && (o = \"center\", r = c(a.y)));\n          var g = t._options;\n          return {\n            xAlign: g.xAlign ? g.xAlign : o,\n            yAlign: g.yAlign ? g.yAlign : r\n          };\n        }\n\n        function l(t, e, a) {\n          var i = t.x,\n              n = t.y,\n              o = t.caretSize,\n              r = t.caretPadding,\n              l = t.cornerRadius,\n              s = a.xAlign,\n              d = a.yAlign,\n              u = o + r,\n              c = l + r;\n          return \"right\" === s ? i -= e.width : \"center\" === s && (i -= e.width / 2), \"top\" === d ? n += u : n -= \"bottom\" === d ? e.height + u : e.height / 2, \"center\" === d ? \"left\" === s ? i += u : \"right\" === s && (i -= u) : \"left\" === s ? i -= c : \"right\" === s && (i += c), {\n            x: i,\n            y: n\n          };\n        }\n\n        var s = t.helpers;\n        t.defaults.global.tooltips = {\n          enabled: !0,\n          custom: null,\n          mode: \"nearest\",\n          position: \"average\",\n          intersect: !0,\n          backgroundColor: \"rgba(0,0,0,0.8)\",\n          titleFontStyle: \"bold\",\n          titleSpacing: 2,\n          titleMarginBottom: 6,\n          titleFontColor: \"#fff\",\n          titleAlign: \"left\",\n          bodySpacing: 2,\n          bodyFontColor: \"#fff\",\n          bodyAlign: \"left\",\n          footerFontStyle: \"bold\",\n          footerSpacing: 2,\n          footerMarginTop: 6,\n          footerFontColor: \"#fff\",\n          footerAlign: \"left\",\n          yPadding: 6,\n          xPadding: 6,\n          caretSize: 5,\n          cornerRadius: 6,\n          multiKeyBackground: \"#fff\",\n          displayColors: !0,\n          callbacks: {\n            beforeTitle: s.noop,\n            title: function title(t, e) {\n              var a = \"\",\n                  i = e.labels,\n                  n = i ? i.length : 0;\n\n              if (t.length > 0) {\n                var o = t[0];\n                o.xLabel ? a = o.xLabel : n > 0 && o.index < n && (a = i[o.index]);\n              }\n\n              return a;\n            },\n            afterTitle: s.noop,\n            beforeBody: s.noop,\n            beforeLabel: s.noop,\n            label: function label(t, e) {\n              var a = e.datasets[t.datasetIndex].label || \"\";\n              return a + \": \" + t.yLabel;\n            },\n            labelColor: function labelColor(t, e) {\n              var a = e.getDatasetMeta(t.datasetIndex),\n                  i = a.data[t.index],\n                  n = i._view;\n              return {\n                borderColor: n.borderColor,\n                backgroundColor: n.backgroundColor\n              };\n            },\n            afterLabel: s.noop,\n            afterBody: s.noop,\n            beforeFooter: s.noop,\n            footer: s.noop,\n            afterFooter: s.noop\n          }\n        }, t.Tooltip = t.Element.extend({\n          initialize: function initialize() {\n            this._model = n(this._options);\n          },\n          getTitle: function getTitle() {\n            var t = this,\n                e = t._options,\n                i = e.callbacks,\n                n = i.beforeTitle.apply(t, arguments),\n                o = i.title.apply(t, arguments),\n                r = i.afterTitle.apply(t, arguments),\n                l = [];\n            return l = a(l, n), l = a(l, o), l = a(l, r);\n          },\n          getBeforeBody: function getBeforeBody() {\n            var t = this._options.callbacks.beforeBody.apply(this, arguments);\n\n            return s.isArray(t) ? t : void 0 !== t ? [t] : [];\n          },\n          getBody: function getBody(t, e) {\n            var i = this,\n                n = i._options.callbacks,\n                o = [];\n            return s.each(t, function (t) {\n              var r = {\n                before: [],\n                lines: [],\n                after: []\n              };\n              a(r.before, n.beforeLabel.call(i, t, e)), a(r.lines, n.label.call(i, t, e)), a(r.after, n.afterLabel.call(i, t, e)), o.push(r);\n            }), o;\n          },\n          getAfterBody: function getAfterBody() {\n            var t = this._options.callbacks.afterBody.apply(this, arguments);\n\n            return s.isArray(t) ? t : void 0 !== t ? [t] : [];\n          },\n          getFooter: function getFooter() {\n            var t = this,\n                e = t._options.callbacks,\n                i = e.beforeFooter.apply(t, arguments),\n                n = e.footer.apply(t, arguments),\n                o = e.afterFooter.apply(t, arguments),\n                r = [];\n            return r = a(r, i), r = a(r, n), r = a(r, o);\n          },\n          update: function update(e) {\n            var a,\n                d,\n                u = this,\n                c = u._options,\n                h = u._model,\n                f = u._model = n(c),\n                g = u._active,\n                p = u._data,\n                m = u._chartInstance,\n                b = {\n              xAlign: h.xAlign,\n              yAlign: h.yAlign\n            },\n                v = {\n              x: h.x,\n              y: h.y\n            },\n                x = {\n              width: h.width,\n              height: h.height\n            },\n                y = {\n              x: h.caretX,\n              y: h.caretY\n            };\n\n            if (g.length) {\n              f.opacity = 1;\n              var k = [];\n              y = t.Tooltip.positioners[c.position](g, u._eventPosition);\n              var S = [];\n\n              for (a = 0, d = g.length; d > a; ++a) {\n                S.push(i(g[a]));\n              }\n\n              c.filter && (S = S.filter(function (t) {\n                return c.filter(t, p);\n              })), c.itemSort && (S = S.sort(function (t, e) {\n                return c.itemSort(t, e, p);\n              })), s.each(S, function (t) {\n                k.push(c.callbacks.labelColor.call(u, t, m));\n              }), f.title = u.getTitle(S, p), f.beforeBody = u.getBeforeBody(S, p), f.body = u.getBody(S, p), f.afterBody = u.getAfterBody(S, p), f.footer = u.getFooter(S, p), f.x = Math.round(y.x), f.y = Math.round(y.y), f.caretPadding = s.getValueOrDefault(y.padding, 2), f.labelColors = k, f.dataPoints = S, x = o(this, f), b = r(this, x), v = l(f, x, b);\n            } else f.opacity = 0;\n\n            return f.xAlign = b.xAlign, f.yAlign = b.yAlign, f.x = v.x, f.y = v.y, f.width = x.width, f.height = x.height, f.caretX = y.x, f.caretY = y.y, u._model = f, e && c.custom && c.custom.call(u, f), u;\n          },\n          drawCaret: function drawCaret(t, a, i) {\n            var n,\n                o,\n                r,\n                l,\n                s,\n                d,\n                u = this._view,\n                c = this._chart.ctx,\n                h = u.caretSize,\n                f = u.cornerRadius,\n                g = u.xAlign,\n                p = u.yAlign,\n                m = t.x,\n                b = t.y,\n                v = a.width,\n                x = a.height;\n            \"center\" === p ? (\"left\" === g ? (n = m, o = n - h, r = n) : (n = m + v, o = n + h, r = n), s = b + x / 2, l = s - h, d = s + h) : (\"left\" === g ? (n = m + f, o = n + h, r = o + h) : \"right\" === g ? (n = m + v - f, o = n - h, r = o - h) : (o = m + v / 2, n = o - h, r = o + h), \"top\" === p ? (l = b, s = l - h, d = l) : (l = b + x, s = l + h, d = l)), c.fillStyle = e(u.backgroundColor, i), c.beginPath(), c.moveTo(n, l), c.lineTo(o, s), c.lineTo(r, d), c.closePath(), c.fill();\n          },\n          drawTitle: function drawTitle(t, a, i, n) {\n            var o = a.title;\n\n            if (o.length) {\n              i.textAlign = a._titleAlign, i.textBaseline = \"top\";\n              var r = a.titleFontSize,\n                  l = a.titleSpacing;\n              i.fillStyle = e(a.titleFontColor, n), i.font = s.fontString(r, a._titleFontStyle, a._titleFontFamily);\n              var d, u;\n\n              for (d = 0, u = o.length; u > d; ++d) {\n                i.fillText(o[d], t.x, t.y), t.y += r + l, d + 1 === o.length && (t.y += a.titleMarginBottom - l);\n              }\n            }\n          },\n          drawBody: function drawBody(t, a, i, n) {\n            var o = a.bodyFontSize,\n                r = a.bodySpacing,\n                l = a.body;\n            i.textAlign = a._bodyAlign, i.textBaseline = \"top\";\n            var d = e(a.bodyFontColor, n);\n            i.fillStyle = d, i.font = s.fontString(o, a._bodyFontStyle, a._bodyFontFamily);\n\n            var u = 0,\n                c = function c(e) {\n              i.fillText(e, t.x + u, t.y), t.y += o + r;\n            };\n\n            s.each(a.beforeBody, c);\n            var h = a.displayColors;\n            u = h ? o + 2 : 0, s.each(l, function (r, l) {\n              s.each(r.before, c), s.each(r.lines, function (r) {\n                h && (i.fillStyle = e(a.legendColorBackground, n), i.fillRect(t.x, t.y, o, o), i.strokeStyle = e(a.labelColors[l].borderColor, n), i.strokeRect(t.x, t.y, o, o), i.fillStyle = e(a.labelColors[l].backgroundColor, n), i.fillRect(t.x + 1, t.y + 1, o - 2, o - 2), i.fillStyle = d), c(r);\n              }), s.each(r.after, c);\n            }), u = 0, s.each(a.afterBody, c), t.y -= r;\n          },\n          drawFooter: function drawFooter(t, a, i, n) {\n            var o = a.footer;\n            o.length && (t.y += a.footerMarginTop, i.textAlign = a._footerAlign, i.textBaseline = \"top\", i.fillStyle = e(a.footerFontColor, n), i.font = s.fontString(a.footerFontSize, a._footerFontStyle, a._footerFontFamily), s.each(o, function (e) {\n              i.fillText(e, t.x, t.y), t.y += a.footerFontSize + a.footerSpacing;\n            }));\n          },\n          drawBackground: function drawBackground(t, a, i, n, o) {\n            i.fillStyle = e(a.backgroundColor, o), s.drawRoundedRectangle(i, t.x, t.y, n.width, n.height, a.cornerRadius), i.fill();\n          },\n          draw: function draw() {\n            var t = this._chart.ctx,\n                e = this._view;\n\n            if (0 !== e.opacity) {\n              var a = {\n                width: e.width,\n                height: e.height\n              },\n                  i = {\n                x: e.x,\n                y: e.y\n              },\n                  n = Math.abs(e.opacity < 0.001) ? 0 : e.opacity;\n              this._options.enabled && (this.drawBackground(i, e, t, a, n), this.drawCaret(i, a, n), i.x += e.xPadding, i.y += e.yPadding, this.drawTitle(i, e, t, n), this.drawBody(i, e, t, n), this.drawFooter(i, e, t, n));\n            }\n          },\n          handleEvent: function handleEvent(t) {\n            var e = this,\n                a = e._options,\n                i = !1;\n\n            if (e._lastActive = e._lastActive || [], \"mouseout\" === t.type ? e._active = [] : e._active = e._chartInstance.getElementsAtEventForMode(t, a.mode, a), i = !s.arrayEquals(e._active, e._lastActive), e._lastActive = e._active, a.enabled || a.custom) {\n              e._eventPosition = s.getRelativePosition(t, e._chart);\n              var n = e._model;\n              e.update(!0), e.pivot(), i |= n.x !== e._model.x || n.y !== e._model.y;\n            }\n\n            return i;\n          }\n        }), t.Tooltip.positioners = {\n          average: function average(t) {\n            if (!t.length) return !1;\n            var e,\n                a,\n                i = 0,\n                n = 0,\n                o = 0;\n\n            for (e = 0, a = t.length; a > e; ++e) {\n              var r = t[e];\n\n              if (r && r.hasValue()) {\n                var l = r.tooltipPosition();\n                i += l.x, n += l.y, ++o;\n              }\n            }\n\n            return {\n              x: Math.round(i / o),\n              y: Math.round(n / o)\n            };\n          },\n          nearest: function nearest(t, e) {\n            var a,\n                i,\n                n,\n                o = e.x,\n                r = e.y,\n                l = Number.POSITIVE_INFINITY;\n\n            for (i = 0, n = t.length; n > i; ++i) {\n              var d = t[i];\n\n              if (d && d.hasValue()) {\n                var u = d.getCenterPoint(),\n                    c = s.distanceBetweenPoints(e, u);\n                l > c && (l = c, a = d);\n              }\n            }\n\n            if (a) {\n              var h = a.tooltipPosition();\n              o = h.x, r = h.y;\n            }\n\n            return {\n              x: o,\n              y: r\n            };\n          }\n        };\n      };\n    }, {}],\n    37: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global;\n        a.elements.arc = {\n          backgroundColor: a.defaultColor,\n          borderColor: \"#fff\",\n          borderWidth: 2\n        }, t.elements.Arc = t.Element.extend({\n          inLabelRange: function inLabelRange(t) {\n            var e = this._view;\n            return e ? Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2) : !1;\n          },\n          inRange: function inRange(t, a) {\n            var i = this._view;\n\n            if (i) {\n              for (var n = e.getAngleFromPoint(i, {\n                x: t,\n                y: a\n              }), o = n.angle, r = n.distance, l = i.startAngle, s = i.endAngle; l > s;) {\n                s += 2 * Math.PI;\n              }\n\n              for (; o > s;) {\n                o -= 2 * Math.PI;\n              }\n\n              for (; l > o;) {\n                o += 2 * Math.PI;\n              }\n\n              var d = o >= l && s >= o,\n                  u = r >= i.innerRadius && r <= i.outerRadius;\n              return d && u;\n            }\n\n            return !1;\n          },\n          getCenterPoint: function getCenterPoint() {\n            var t = this._view,\n                e = (t.startAngle + t.endAngle) / 2,\n                a = (t.innerRadius + t.outerRadius) / 2;\n            return {\n              x: t.x + Math.cos(e) * a,\n              y: t.y + Math.sin(e) * a\n            };\n          },\n          getArea: function getArea() {\n            var t = this._view;\n            return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2));\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view,\n                e = t.startAngle + (t.endAngle - t.startAngle) / 2,\n                a = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius;\n            return {\n              x: t.x + Math.cos(e) * a,\n              y: t.y + Math.sin(e) * a\n            };\n          },\n          draw: function draw() {\n            var t = this._chart.ctx,\n                e = this._view,\n                a = e.startAngle,\n                i = e.endAngle;\n            t.beginPath(), t.arc(e.x, e.y, e.outerRadius, a, i), t.arc(e.x, e.y, e.innerRadius, i, a, !0), t.closePath(), t.strokeStyle = e.borderColor, t.lineWidth = e.borderWidth, t.fillStyle = e.backgroundColor, t.fill(), t.lineJoin = \"bevel\", e.borderWidth && t.stroke();\n          }\n        });\n      };\n    }, {}],\n    38: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global;\n        t.defaults.global.elements.line = {\n          tension: 0.4,\n          backgroundColor: a.defaultColor,\n          borderWidth: 3,\n          borderColor: a.defaultColor,\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0,\n          borderJoinStyle: \"miter\",\n          capBezierPoints: !0,\n          fill: !0\n        }, t.elements.Line = t.Element.extend({\n          draw: function draw() {\n            function t(t, e) {\n              var a = e._view;\n              e._view.steppedLine === !0 ? (s.lineTo(a.x, t._view.y), s.lineTo(a.x, a.y)) : 0 === e._view.tension ? s.lineTo(a.x, a.y) : s.bezierCurveTo(t._view.controlPointNextX, t._view.controlPointNextY, a.controlPointPreviousX, a.controlPointPreviousY, a.x, a.y);\n            }\n\n            var i = this,\n                n = i._view,\n                o = n.spanGaps,\n                r = n.scaleZero,\n                l = i._loop;\n            l || (\"top\" === n.fill ? r = n.scaleTop : \"bottom\" === n.fill && (r = n.scaleBottom));\n            var s = i._chart.ctx;\n            s.save();\n\n            var d = i._children.slice(),\n                u = -1;\n\n            l && d.length && d.push(d[0]);\n            var c, h, f, g;\n\n            if (d.length && n.fill) {\n              for (s.beginPath(), c = 0; c < d.length; ++c) {\n                h = d[c], f = e.previousItem(d, c), g = h._view, 0 === c ? (l ? s.moveTo(r.x, r.y) : s.moveTo(g.x, r), g.skip || (u = c, s.lineTo(g.x, g.y))) : (f = -1 === u ? f : d[u], g.skip ? o || u !== c - 1 || (l ? s.lineTo(r.x, r.y) : s.lineTo(f._view.x, r)) : (u !== c - 1 ? o && -1 !== u ? t(f, h) : l ? s.lineTo(g.x, g.y) : (s.lineTo(g.x, r), s.lineTo(g.x, g.y)) : t(f, h), u = c));\n              }\n\n              l || -1 === u || s.lineTo(d[u]._view.x, r), s.fillStyle = n.backgroundColor || a.defaultColor, s.closePath(), s.fill();\n            }\n\n            var p = a.elements.line;\n\n            for (s.lineCap = n.borderCapStyle || p.borderCapStyle, s.setLineDash && s.setLineDash(n.borderDash || p.borderDash), s.lineDashOffset = n.borderDashOffset || p.borderDashOffset, s.lineJoin = n.borderJoinStyle || p.borderJoinStyle, s.lineWidth = n.borderWidth || p.borderWidth, s.strokeStyle = n.borderColor || a.defaultColor, s.beginPath(), u = -1, c = 0; c < d.length; ++c) {\n              h = d[c], f = e.previousItem(d, c), g = h._view, 0 === c ? g.skip || (s.moveTo(g.x, g.y), u = c) : (f = -1 === u ? f : d[u], g.skip || (u !== c - 1 && !o || -1 === u ? s.moveTo(g.x, g.y) : t(f, h), u = c));\n            }\n\n            s.stroke(), s.restore();\n          }\n        });\n      };\n    }, {}],\n    39: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t) {\n          var e = this._view;\n          return e ? Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hitRadius, 2) : !1;\n        }\n\n        function a(t) {\n          var e = this._view;\n          return e ? Math.pow(t - e.y, 2) < Math.pow(e.radius + e.hitRadius, 2) : !1;\n        }\n\n        var i = t.helpers,\n            n = t.defaults.global,\n            o = n.defaultColor;\n        n.elements.point = {\n          radius: 3,\n          pointStyle: \"circle\",\n          backgroundColor: o,\n          borderWidth: 1,\n          borderColor: o,\n          hitRadius: 1,\n          hoverRadius: 4,\n          hoverBorderWidth: 1\n        }, t.elements.Point = t.Element.extend({\n          inRange: function inRange(t, e) {\n            var a = this._view;\n            return a ? Math.pow(t - a.x, 2) + Math.pow(e - a.y, 2) < Math.pow(a.hitRadius + a.radius, 2) : !1;\n          },\n          inLabelRange: e,\n          inXRange: e,\n          inYRange: a,\n          getCenterPoint: function getCenterPoint() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y\n            };\n          },\n          getArea: function getArea() {\n            return Math.PI * Math.pow(this._view.radius, 2);\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y,\n              padding: t.radius + t.borderWidth\n            };\n          },\n          draw: function draw() {\n            var e = this._view,\n                a = this._chart.ctx,\n                r = e.pointStyle,\n                l = e.radius,\n                s = e.x,\n                d = e.y;\n            e.skip || (a.strokeStyle = e.borderColor || o, a.lineWidth = i.getValueOrDefault(e.borderWidth, n.elements.point.borderWidth), a.fillStyle = e.backgroundColor || o, t.canvasHelpers.drawPoint(a, r, l, s, d));\n          }\n        });\n      };\n    }, {}],\n    40: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        function e(t) {\n          return void 0 !== t._view.width;\n        }\n\n        function a(t) {\n          var a,\n              i,\n              n,\n              o,\n              r = t._view;\n\n          if (e(t)) {\n            var l = r.width / 2;\n            a = r.x - l, i = r.x + l, n = Math.min(r.y, r.base), o = Math.max(r.y, r.base);\n          } else {\n            var s = r.height / 2;\n            a = Math.min(r.x, r.base), i = Math.max(r.x, r.base), n = r.y - s, o = r.y + s;\n          }\n\n          return {\n            left: a,\n            top: n,\n            right: i,\n            bottom: o\n          };\n        }\n\n        var i = t.defaults.global;\n        i.elements.rectangle = {\n          backgroundColor: i.defaultColor,\n          borderWidth: 0,\n          borderColor: i.defaultColor,\n          borderSkipped: \"bottom\"\n        }, t.elements.Rectangle = t.Element.extend({\n          draw: function draw() {\n            function t(t) {\n              return s[(u + t) % 4];\n            }\n\n            var e = this._chart.ctx,\n                a = this._view,\n                i = a.width / 2,\n                n = a.x - i,\n                o = a.x + i,\n                r = a.base - (a.base - a.y),\n                l = a.borderWidth / 2;\n            a.borderWidth && (n += l, o -= l, r += l), e.beginPath(), e.fillStyle = a.backgroundColor, e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth;\n            var s = [[n, a.base], [n, r], [o, r], [o, a.base]],\n                d = [\"bottom\", \"left\", \"top\", \"right\"],\n                u = d.indexOf(a.borderSkipped, 0);\n            -1 === u && (u = 0);\n            var c = t(0);\n            e.moveTo(c[0], c[1]);\n\n            for (var h = 1; 4 > h; h++) {\n              c = t(h), e.lineTo(c[0], c[1]);\n            }\n\n            e.fill(), a.borderWidth && e.stroke();\n          },\n          height: function height() {\n            var t = this._view;\n            return t.base - t.y;\n          },\n          inRange: function inRange(t, e) {\n            var i = !1;\n\n            if (this._view) {\n              var n = a(this);\n              i = t >= n.left && t <= n.right && e >= n.top && e <= n.bottom;\n            }\n\n            return i;\n          },\n          inLabelRange: function inLabelRange(t, i) {\n            var n = this;\n            if (!n._view) return !1;\n            var o = !1,\n                r = a(n);\n            return o = e(n) ? t >= r.left && t <= r.right : i >= r.top && i <= r.bottom;\n          },\n          inXRange: function inXRange(t) {\n            var e = a(this);\n            return t >= e.left && t <= e.right;\n          },\n          inYRange: function inYRange(t) {\n            var e = a(this);\n            return t >= e.top && t <= e.bottom;\n          },\n          getCenterPoint: function getCenterPoint() {\n            var t,\n                a,\n                i = this._view;\n            return e(this) ? (t = i.x, a = (i.y + i.base) / 2) : (t = (i.x + i.base) / 2, a = i.y), {\n              x: t,\n              y: a\n            };\n          },\n          getArea: function getArea() {\n            var t = this._view;\n            return t.width * Math.abs(t.y - t.base);\n          },\n          tooltipPosition: function tooltipPosition() {\n            var t = this._view;\n            return {\n              x: t.x,\n              y: t.y\n            };\n          }\n        });\n      };\n    }, {}],\n    41: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"bottom\"\n        },\n            i = t.Scale.extend({\n          getLabels: function getLabels() {\n            var t = this.chart.data;\n            return (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels;\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this,\n                a = t.getLabels();\n            t.minIndex = 0, t.maxIndex = a.length - 1;\n            var i;\n            void 0 !== t.options.ticks.min && (i = e.indexOf(a, t.options.ticks.min), t.minIndex = -1 !== i ? i : t.minIndex), void 0 !== t.options.ticks.max && (i = e.indexOf(a, t.options.ticks.max), t.maxIndex = -1 !== i ? i : t.maxIndex), t.min = a[t.minIndex], t.max = a[t.maxIndex];\n          },\n          buildTicks: function buildTicks() {\n            var t = this,\n                e = t.getLabels();\n            t.ticks = 0 === t.minIndex && t.maxIndex === e.length - 1 ? e : e.slice(t.minIndex, t.maxIndex + 1);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            var a = this,\n                i = a.chart.data,\n                n = a.isHorizontal();\n            return i.xLabels && n || i.yLabels && !n ? a.getRightValue(i.datasets[e].data[t]) : a.ticks[t];\n          },\n          getPixelForValue: function getPixelForValue(t, e, a, i) {\n            var n = this,\n                o = Math.max(n.maxIndex + 1 - n.minIndex - (n.options.gridLines.offsetGridLines ? 0 : 1), 1);\n\n            if (void 0 !== t && isNaN(e)) {\n              var r = n.getLabels(),\n                  l = r.indexOf(t);\n              e = -1 !== l ? l : e;\n            }\n\n            if (n.isHorizontal()) {\n              var s = n.width - (n.paddingLeft + n.paddingRight),\n                  d = s / o,\n                  u = d * (e - n.minIndex) + n.paddingLeft;\n              return (n.options.gridLines.offsetGridLines && i || n.maxIndex === n.minIndex && i) && (u += d / 2), n.left + Math.round(u);\n            }\n\n            var c = n.height - (n.paddingTop + n.paddingBottom),\n                h = c / o,\n                f = h * (e - n.minIndex) + n.paddingTop;\n            return n.options.gridLines.offsetGridLines && i && (f += h / 2), n.top + Math.round(f);\n          },\n          getPixelForTick: function getPixelForTick(t, e) {\n            return this.getPixelForValue(this.ticks[t], t + this.minIndex, null, e);\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e,\n                a = this,\n                i = Math.max(a.ticks.length - (a.options.gridLines.offsetGridLines ? 0 : 1), 1),\n                n = a.isHorizontal(),\n                o = n ? a.width - (a.paddingLeft + a.paddingRight) : a.height - (a.paddingTop + a.paddingBottom),\n                r = o / i;\n            return t -= n ? a.left : a.top, a.options.gridLines.offsetGridLines && (t -= r / 2), t -= n ? a.paddingLeft : a.paddingTop, e = 0 >= t ? 0 : Math.round(t / r);\n          },\n          getBasePixel: function getBasePixel() {\n            return this.bottom;\n          }\n        });\n        t.scaleService.registerScaleType(\"category\", i, a);\n      };\n    }, {}],\n    42: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"left\",\n          ticks: {\n            callback: t.Ticks.formatters.linear\n          }\n        },\n            i = t.LinearScaleBase.extend({\n          determineDataLimits: function determineDataLimits() {\n            function t(t) {\n              return l ? t.xAxisID === a.id : t.yAxisID === a.id;\n            }\n\n            var a = this,\n                i = a.options,\n                n = a.chart,\n                o = n.data,\n                r = o.datasets,\n                l = a.isHorizontal();\n\n            if (a.min = null, a.max = null, i.stacked) {\n              var s = {};\n              e.each(r, function (o, r) {\n                var l = n.getDatasetMeta(r);\n                void 0 === s[l.type] && (s[l.type] = {\n                  positiveValues: [],\n                  negativeValues: []\n                });\n                var d = s[l.type].positiveValues,\n                    u = s[l.type].negativeValues;\n                n.isDatasetVisible(r) && t(l) && e.each(o.data, function (t, e) {\n                  var n = +a.getRightValue(t);\n                  isNaN(n) || l.data[e].hidden || (d[e] = d[e] || 0, u[e] = u[e] || 0, i.relativePoints ? d[e] = 100 : 0 > n ? u[e] += n : d[e] += n);\n                });\n              }), e.each(s, function (t) {\n                var i = t.positiveValues.concat(t.negativeValues),\n                    n = e.min(i),\n                    o = e.max(i);\n                a.min = null === a.min ? n : Math.min(a.min, n), a.max = null === a.max ? o : Math.max(a.max, o);\n              });\n            } else e.each(r, function (i, o) {\n              var r = n.getDatasetMeta(o);\n              n.isDatasetVisible(o) && t(r) && e.each(i.data, function (t, e) {\n                var i = +a.getRightValue(t);\n                isNaN(i) || r.data[e].hidden || (null === a.min ? a.min = i : i < a.min && (a.min = i), null === a.max ? a.max = i : i > a.max && (a.max = i));\n              });\n            });\n\n            this.handleTickRangeOptions();\n          },\n          getTickLimit: function getTickLimit() {\n            var a,\n                i = this,\n                n = i.options.ticks;\n            if (i.isHorizontal()) a = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(i.width / 50));else {\n              var o = e.getValueOrDefault(n.fontSize, t.defaults.global.defaultFontSize);\n              a = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(i.height / (2 * o)));\n            }\n            return a;\n          },\n          handleDirectionalChanges: function handleDirectionalChanges() {\n            this.isHorizontal() || this.ticks.reverse();\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          getPixelForValue: function getPixelForValue(t) {\n            var e,\n                a,\n                i = this,\n                n = i.paddingLeft,\n                o = i.paddingBottom,\n                r = i.start,\n                l = +i.getRightValue(t),\n                s = i.end - r;\n            return i.isHorizontal() ? (a = i.width - (n + i.paddingRight), e = i.left + a / s * (l - r), Math.round(e + n)) : (a = i.height - (i.paddingTop + o), e = i.bottom - o - a / s * (l - r), Math.round(e));\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e = this,\n                a = e.isHorizontal(),\n                i = e.paddingLeft,\n                n = e.paddingBottom,\n                o = a ? e.width - (i + e.paddingRight) : e.height - (e.paddingTop + n),\n                r = (a ? t - e.left - i : e.bottom - n - t) / o;\n            return e.start + (e.end - e.start) * r;\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.ticksAsNumbers[t]);\n          }\n        });\n        t.scaleService.registerScaleType(\"linear\", i, a);\n      };\n    }, {}],\n    43: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = e.noop;\n        t.LinearScaleBase = t.Scale.extend({\n          handleTickRangeOptions: function handleTickRangeOptions() {\n            var t = this,\n                a = t.options,\n                i = a.ticks;\n\n            if (i.beginAtZero) {\n              var n = e.sign(t.min),\n                  o = e.sign(t.max);\n              0 > n && 0 > o ? t.max = 0 : n > 0 && o > 0 && (t.min = 0);\n            }\n\n            void 0 !== i.min ? t.min = i.min : void 0 !== i.suggestedMin && (t.min = Math.min(t.min, i.suggestedMin)), void 0 !== i.max ? t.max = i.max : void 0 !== i.suggestedMax && (t.max = Math.max(t.max, i.suggestedMax)), t.min === t.max && (t.max++, i.beginAtZero || t.min--);\n          },\n          getTickLimit: a,\n          handleDirectionalChanges: a,\n          buildTicks: function buildTicks() {\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = a.getTickLimit();\n            o = Math.max(2, o);\n            var r = {\n              maxTicks: o,\n              min: n.min,\n              max: n.max,\n              stepSize: e.getValueOrDefault(n.fixedStepSize, n.stepSize)\n            },\n                l = a.ticks = t.Ticks.generators.linear(r, a);\n            a.handleDirectionalChanges(), a.max = e.max(l), a.min = e.min(l), n.reverse ? (l.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var e = this;\n            e.ticksAsNumbers = e.ticks.slice(), e.zeroLineIndex = e.ticks.indexOf(0), t.Scale.prototype.convertTicksToLabels.call(e);\n          }\n        });\n      };\n    }, {}],\n    44: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          position: \"left\",\n          ticks: {\n            callback: t.Ticks.formatters.logarithmic\n          }\n        },\n            i = t.Scale.extend({\n          determineDataLimits: function determineDataLimits() {\n            function t(t) {\n              return d ? t.xAxisID === a.id : t.yAxisID === a.id;\n            }\n\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = a.chart,\n                r = o.data,\n                l = r.datasets,\n                s = e.getValueOrDefault,\n                d = a.isHorizontal();\n\n            if (a.min = null, a.max = null, a.minNotZero = null, i.stacked) {\n              var u = {};\n              e.each(l, function (n, r) {\n                var l = o.getDatasetMeta(r);\n                o.isDatasetVisible(r) && t(l) && (void 0 === u[l.type] && (u[l.type] = []), e.each(n.data, function (t, e) {\n                  var n = u[l.type],\n                      o = +a.getRightValue(t);\n                  isNaN(o) || l.data[e].hidden || (n[e] = n[e] || 0, i.relativePoints ? n[e] = 100 : n[e] += o);\n                }));\n              }), e.each(u, function (t) {\n                var i = e.min(t),\n                    n = e.max(t);\n                a.min = null === a.min ? i : Math.min(a.min, i), a.max = null === a.max ? n : Math.max(a.max, n);\n              });\n            } else e.each(l, function (i, n) {\n              var r = o.getDatasetMeta(n);\n              o.isDatasetVisible(n) && t(r) && e.each(i.data, function (t, e) {\n                var i = +a.getRightValue(t);\n                isNaN(i) || r.data[e].hidden || (null === a.min ? a.min = i : i < a.min && (a.min = i), null === a.max ? a.max = i : i > a.max && (a.max = i), 0 !== i && (null === a.minNotZero || i < a.minNotZero) && (a.minNotZero = i));\n              });\n            });\n\n            a.min = s(n.min, a.min), a.max = s(n.max, a.max), a.min === a.max && (0 !== a.min && null !== a.min ? (a.min = Math.pow(10, Math.floor(e.log10(a.min)) - 1), a.max = Math.pow(10, Math.floor(e.log10(a.max)) + 1)) : (a.min = 1, a.max = 10));\n          },\n          buildTicks: function buildTicks() {\n            var a = this,\n                i = a.options,\n                n = i.ticks,\n                o = {\n              min: n.min,\n              max: n.max\n            },\n                r = a.ticks = t.Ticks.generators.logarithmic(o, a);\n            a.isHorizontal() || r.reverse(), a.max = e.max(r), a.min = e.min(r), n.reverse ? (r.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max);\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            this.tickValues = this.ticks.slice(), t.Scale.prototype.convertTicksToLabels.call(this);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.tickValues[t]);\n          },\n          getPixelForValue: function getPixelForValue(t) {\n            var a,\n                i,\n                n,\n                o = this,\n                r = o.start,\n                l = +o.getRightValue(t),\n                s = o.paddingTop,\n                d = o.paddingBottom,\n                u = o.paddingLeft,\n                c = o.options,\n                h = c.ticks;\n            return o.isHorizontal() ? (n = e.log10(o.end) - e.log10(r), 0 === l ? i = o.left + u : (a = o.width - (u + o.paddingRight), i = o.left + a / n * (e.log10(l) - e.log10(r)), i += u)) : (a = o.height - (s + d), 0 !== r || h.reverse ? 0 === o.end && h.reverse ? (n = e.log10(o.start) - e.log10(o.minNotZero), i = l === o.end ? o.top + s : l === o.minNotZero ? o.top + s + 0.02 * a : o.top + s + 0.02 * a + 0.98 * a / n * (e.log10(l) - e.log10(o.minNotZero))) : (n = e.log10(o.end) - e.log10(r), a = o.height - (s + d), i = o.bottom - d - a / n * (e.log10(l) - e.log10(r))) : (n = e.log10(o.end) - e.log10(o.minNotZero), i = l === r ? o.bottom - d : l === o.minNotZero ? o.bottom - d - 0.02 * a : o.bottom - d - 0.02 * a - 0.98 * a / n * (e.log10(l) - e.log10(o.minNotZero)))), i;\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var a,\n                i,\n                n = this,\n                o = e.log10(n.end) - e.log10(n.start);\n            return n.isHorizontal() ? (i = n.width - (n.paddingLeft + n.paddingRight), a = n.start * Math.pow(10, (t - n.left - n.paddingLeft) * o / i)) : (i = n.height - (n.paddingTop + n.paddingBottom), a = Math.pow(10, (n.bottom - n.paddingBottom - t) * o / i) / n.start), a;\n          }\n        });\n        t.scaleService.registerScaleType(\"logarithmic\", i, a);\n      };\n    }, {}],\n    45: [function (t, e, a) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        var e = t.helpers,\n            a = t.defaults.global,\n            i = {\n          display: !0,\n          animate: !0,\n          lineArc: !1,\n          position: \"chartArea\",\n          angleLines: {\n            display: !0,\n            color: \"rgba(0, 0, 0, 0.1)\",\n            lineWidth: 1\n          },\n          ticks: {\n            showLabelBackdrop: !0,\n            backdropColor: \"rgba(255,255,255,0.75)\",\n            backdropPaddingY: 2,\n            backdropPaddingX: 2,\n            callback: t.Ticks.formatters.linear\n          },\n          pointLabels: {\n            fontSize: 10,\n            callback: function callback(t) {\n              return t;\n            }\n          }\n        },\n            n = t.LinearScaleBase.extend({\n          getValueCount: function getValueCount() {\n            return this.chart.data.labels.length;\n          },\n          setDimensions: function setDimensions() {\n            var t = this,\n                i = t.options,\n                n = i.ticks;\n            t.width = t.maxWidth, t.height = t.maxHeight, t.xCenter = Math.round(t.width / 2), t.yCenter = Math.round(t.height / 2);\n            var o = e.min([t.height, t.width]),\n                r = e.getValueOrDefault(n.fontSize, a.defaultFontSize);\n            t.drawingArea = i.display ? o / 2 - (r / 2 + n.backdropPaddingY) : o / 2;\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this,\n                a = t.chart;\n            t.min = null, t.max = null, e.each(a.data.datasets, function (i, n) {\n              if (a.isDatasetVisible(n)) {\n                var o = a.getDatasetMeta(n);\n                e.each(i.data, function (e, a) {\n                  var i = +t.getRightValue(e);\n                  isNaN(i) || o.data[a].hidden || (null === t.min ? t.min = i : i < t.min && (t.min = i), null === t.max ? t.max = i : i > t.max && (t.max = i));\n                });\n              }\n            }), t.handleTickRangeOptions();\n          },\n          getTickLimit: function getTickLimit() {\n            var t = this.options.ticks,\n                i = e.getValueOrDefault(t.fontSize, a.defaultFontSize);\n            return Math.min(t.maxTicksLimit ? t.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * i)));\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var e = this;\n            t.LinearScaleBase.prototype.convertTicksToLabels.call(e), e.pointLabels = e.chart.data.labels.map(e.options.pointLabels.callback, e);\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n          },\n          fit: function fit() {\n            var t,\n                i,\n                n,\n                o,\n                r,\n                l,\n                s,\n                d,\n                u,\n                c,\n                h,\n                f,\n                g = this.options.pointLabels,\n                p = e.getValueOrDefault(g.fontSize, a.defaultFontSize),\n                m = e.getValueOrDefault(g.fontStyle, a.defaultFontStyle),\n                b = e.getValueOrDefault(g.fontFamily, a.defaultFontFamily),\n                v = e.fontString(p, m, b),\n                x = e.min([this.height / 2 - p - 5, this.width / 2]),\n                y = this.width,\n                k = 0;\n\n            for (this.ctx.font = v, i = 0; i < this.getValueCount(); i++) {\n              t = this.getPointPosition(i, x), n = this.ctx.measureText(this.pointLabels[i] ? this.pointLabels[i] : \"\").width + 5;\n              var S = this.getIndexAngle(i) + Math.PI / 2,\n                  w = 360 * S / (2 * Math.PI) % 360;\n              0 === w || 180 === w ? (o = n / 2, t.x + o > y && (y = t.x + o, r = i), t.x - o < k && (k = t.x - o, s = i)) : 180 > w ? t.x + n > y && (y = t.x + n, r = i) : t.x - n < k && (k = t.x - n, s = i);\n            }\n\n            u = k, c = Math.ceil(y - this.width), l = this.getIndexAngle(r), d = this.getIndexAngle(s), h = c / Math.sin(l + Math.PI / 2), f = u / Math.sin(d + Math.PI / 2), h = e.isNumber(h) ? h : 0, f = e.isNumber(f) ? f : 0, this.drawingArea = Math.round(x - (f + h) / 2), this.setCenterPoint(f, h);\n          },\n          setCenterPoint: function setCenterPoint(t, e) {\n            var a = this,\n                i = a.width - e - a.drawingArea,\n                n = t + a.drawingArea;\n            a.xCenter = Math.round((n + i) / 2 + a.left), a.yCenter = Math.round(a.height / 2 + a.top);\n          },\n          getIndexAngle: function getIndexAngle(t) {\n            var e = 2 * Math.PI / this.getValueCount(),\n                a = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0,\n                i = a * Math.PI * 2 / 360;\n            return t * e - Math.PI / 2 + i;\n          },\n          getDistanceFromCenterForValue: function getDistanceFromCenterForValue(t) {\n            var e = this;\n            if (null === t) return 0;\n            var a = e.drawingArea / (e.max - e.min);\n            return e.options.reverse ? (e.max - t) * a : (t - e.min) * a;\n          },\n          getPointPosition: function getPointPosition(t, e) {\n            var a = this,\n                i = a.getIndexAngle(t);\n            return {\n              x: Math.round(Math.cos(i) * e) + a.xCenter,\n              y: Math.round(Math.sin(i) * e) + a.yCenter\n            };\n          },\n          getPointPositionForValue: function getPointPositionForValue(t, e) {\n            return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n          },\n          getBasePosition: function getBasePosition() {\n            var t = this,\n                e = t.min,\n                a = t.max;\n            return t.getPointPositionForValue(0, t.beginAtZero ? 0 : 0 > e && 0 > a ? a : e > 0 && a > 0 ? e : 0);\n          },\n          draw: function draw() {\n            var t = this,\n                i = t.options,\n                n = i.gridLines,\n                o = i.ticks,\n                r = i.angleLines,\n                l = i.pointLabels,\n                s = e.getValueOrDefault;\n\n            if (i.display) {\n              var d = t.ctx,\n                  u = s(o.fontSize, a.defaultFontSize),\n                  c = s(o.fontStyle, a.defaultFontStyle),\n                  h = s(o.fontFamily, a.defaultFontFamily),\n                  f = e.fontString(u, c, h);\n\n              if (e.each(t.ticks, function (r, l) {\n                if (l > 0 || i.reverse) {\n                  var c = t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]),\n                      h = t.yCenter - c;\n                  if (n.display && 0 !== l) if (d.strokeStyle = e.getValueAtIndexOrDefault(n.color, l - 1), d.lineWidth = e.getValueAtIndexOrDefault(n.lineWidth, l - 1), i.lineArc) d.beginPath(), d.arc(t.xCenter, t.yCenter, c, 0, 2 * Math.PI), d.closePath(), d.stroke();else {\n                    d.beginPath();\n\n                    for (var g = 0; g < t.getValueCount(); g++) {\n                      var p = t.getPointPosition(g, c);\n                      0 === g ? d.moveTo(p.x, p.y) : d.lineTo(p.x, p.y);\n                    }\n\n                    d.closePath(), d.stroke();\n                  }\n\n                  if (o.display) {\n                    var m = s(o.fontColor, a.defaultFontColor);\n\n                    if (d.font = f, o.showLabelBackdrop) {\n                      var b = d.measureText(r).width;\n                      d.fillStyle = o.backdropColor, d.fillRect(t.xCenter - b / 2 - o.backdropPaddingX, h - u / 2 - o.backdropPaddingY, b + 2 * o.backdropPaddingX, u + 2 * o.backdropPaddingY);\n                    }\n\n                    d.textAlign = \"center\", d.textBaseline = \"middle\", d.fillStyle = m, d.fillText(r, t.xCenter, h);\n                  }\n                }\n              }), !i.lineArc) {\n                d.lineWidth = r.lineWidth, d.strokeStyle = r.color;\n\n                for (var g = t.getDistanceFromCenterForValue(i.reverse ? t.min : t.max), p = s(l.fontSize, a.defaultFontSize), m = s(l.fontStyle, a.defaultFontStyle), b = s(l.fontFamily, a.defaultFontFamily), v = e.fontString(p, m, b), x = t.getValueCount() - 1; x >= 0; x--) {\n                  if (r.display) {\n                    var y = t.getPointPosition(x, g);\n                    d.beginPath(), d.moveTo(t.xCenter, t.yCenter), d.lineTo(y.x, y.y), d.stroke(), d.closePath();\n                  }\n\n                  var k = t.getPointPosition(x, g + 5),\n                      S = s(l.fontColor, a.defaultFontColor);\n                  d.font = v, d.fillStyle = S;\n                  var w = t.pointLabels,\n                      M = this.getIndexAngle(x) + Math.PI / 2,\n                      C = 360 * M / (2 * Math.PI) % 360;\n                  0 === C || 180 === C ? d.textAlign = \"center\" : 180 > C ? d.textAlign = \"left\" : d.textAlign = \"right\", 90 === C || 270 === C ? d.textBaseline = \"middle\" : C > 270 || 90 > C ? d.textBaseline = \"bottom\" : d.textBaseline = \"top\", d.fillText(w[x] ? w[x] : \"\", k.x, k.y);\n                }\n              }\n            }\n          }\n        });\n        t.scaleService.registerScaleType(\"radialLinear\", n, i);\n      };\n    }, {}],\n    46: [function (t, e, a) {\n      \"use strict\";\n\n      var i = t(1);\n      i = \"function\" == typeof i ? i : window.moment, e.exports = function (t) {\n        var e = t.helpers,\n            a = {\n          units: [{\n            name: \"millisecond\",\n            steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n          }, {\n            name: \"second\",\n            steps: [1, 2, 5, 10, 30]\n          }, {\n            name: \"minute\",\n            steps: [1, 2, 5, 10, 30]\n          }, {\n            name: \"hour\",\n            steps: [1, 2, 3, 6, 12]\n          }, {\n            name: \"day\",\n            steps: [1, 2, 5]\n          }, {\n            name: \"week\",\n            maxStep: 4\n          }, {\n            name: \"month\",\n            maxStep: 3\n          }, {\n            name: \"quarter\",\n            maxStep: 4\n          }, {\n            name: \"year\",\n            maxStep: !1\n          }]\n        },\n            n = {\n          position: \"bottom\",\n          time: {\n            parser: !1,\n            format: !1,\n            unit: !1,\n            round: !1,\n            displayFormat: !1,\n            isoWeekday: !1,\n            minUnit: \"millisecond\",\n            displayFormats: {\n              millisecond: \"h:mm:ss.SSS a\",\n              second: \"h:mm:ss a\",\n              minute: \"h:mm:ss a\",\n              hour: \"MMM D, hA\",\n              day: \"ll\",\n              week: \"ll\",\n              month: \"MMM YYYY\",\n              quarter: \"[Q]Q - YYYY\",\n              year: \"YYYY\"\n            }\n          },\n          ticks: {\n            autoSkip: !1\n          }\n        },\n            o = t.Scale.extend({\n          initialize: function initialize() {\n            if (!i) throw new Error(\"Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com\");\n            t.Scale.prototype.initialize.call(this);\n          },\n          getLabelMoment: function getLabelMoment(t, e) {\n            return null === t || null === e ? null : \"undefined\" != typeof this.labelMoments[t] ? this.labelMoments[t][e] : null;\n          },\n          getLabelDiff: function getLabelDiff(t, e) {\n            var a = this;\n            return null === t || null === e ? null : (void 0 === a.labelDiffs && a.buildLabelDiffs(), \"undefined\" != typeof a.labelDiffs[t] ? a.labelDiffs[t][e] : null);\n          },\n          getMomentStartOf: function getMomentStartOf(t) {\n            var e = this;\n            return \"week\" === e.options.time.unit && e.options.time.isoWeekday !== !1 ? t.clone().startOf(\"isoWeek\").isoWeekday(e.options.time.isoWeekday) : t.clone().startOf(e.tickUnit);\n          },\n          determineDataLimits: function determineDataLimits() {\n            var t = this;\n            t.labelMoments = [];\n            var a = [];\n            t.chart.data.labels && t.chart.data.labels.length > 0 ? (e.each(t.chart.data.labels, function (e) {\n              var i = t.parseTime(e);\n              i.isValid() && (t.options.time.round && i.startOf(t.options.time.round), a.push(i));\n            }, t), t.firstTick = i.min.call(t, a), t.lastTick = i.max.call(t, a)) : (t.firstTick = null, t.lastTick = null), e.each(t.chart.data.datasets, function (n, o) {\n              var r = [],\n                  l = t.chart.isDatasetVisible(o);\n              \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(n.data[0]) && null !== n.data[0] ? e.each(n.data, function (e) {\n                var a = t.parseTime(t.getRightValue(e));\n                a.isValid() && (t.options.time.round && a.startOf(t.options.time.round), r.push(a), l && (t.firstTick = null !== t.firstTick ? i.min(t.firstTick, a) : a, t.lastTick = null !== t.lastTick ? i.max(t.lastTick, a) : a));\n              }, t) : r = a, t.labelMoments.push(r);\n            }, t), t.options.time.min && (t.firstTick = t.parseTime(t.options.time.min)), t.options.time.max && (t.lastTick = t.parseTime(t.options.time.max)), t.firstTick = (t.firstTick || i()).clone(), t.lastTick = (t.lastTick || i()).clone();\n          },\n          buildLabelDiffs: function buildLabelDiffs() {\n            var t = this;\n            t.labelDiffs = [];\n            var a = [];\n            t.chart.data.labels && t.chart.data.labels.length > 0 && e.each(t.chart.data.labels, function (e) {\n              var i = t.parseTime(e);\n              i.isValid() && (t.options.time.round && i.startOf(t.options.time.round), a.push(i.diff(t.firstTick, t.tickUnit, !0)));\n            }, t), e.each(t.chart.data.datasets, function (i) {\n              var n = [];\n              \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(i.data[0]) && null !== i.data[0] ? e.each(i.data, function (e) {\n                var a = t.parseTime(t.getRightValue(e));\n                a.isValid() && (t.options.time.round && a.startOf(t.options.time.round), n.push(a.diff(t.firstTick, t.tickUnit, !0)));\n              }, t) : n = a, t.labelDiffs.push(n);\n            }, t);\n          },\n          buildTicks: function buildTicks() {\n            var i = this;\n            i.ctx.save();\n            var n = e.getValueOrDefault(i.options.ticks.fontSize, t.defaults.global.defaultFontSize),\n                o = e.getValueOrDefault(i.options.ticks.fontStyle, t.defaults.global.defaultFontStyle),\n                r = e.getValueOrDefault(i.options.ticks.fontFamily, t.defaults.global.defaultFontFamily),\n                l = e.fontString(n, o, r);\n            if (i.ctx.font = l, i.ticks = [], i.unitScale = 1, i.scaleSizeInUnits = 0, i.options.time.unit) i.tickUnit = i.options.time.unit || \"day\", i.displayFormat = i.options.time.displayFormats[i.tickUnit], i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0), i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, 1);else {\n              var s = i.isHorizontal() ? i.width - (i.paddingLeft + i.paddingRight) : i.height - (i.paddingTop + i.paddingBottom),\n                  d = i.tickFormatFunction(i.firstTick, 0, []),\n                  u = i.ctx.measureText(d).width,\n                  c = Math.cos(e.toRadians(i.options.ticks.maxRotation)),\n                  h = Math.sin(e.toRadians(i.options.ticks.maxRotation));\n              u = u * c + n * h;\n              var f = s / u;\n              i.tickUnit = i.options.time.minUnit, i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0), i.displayFormat = i.options.time.displayFormats[i.tickUnit];\n\n              for (var g = 0, p = a.units[g]; g < a.units.length;) {\n                if (i.unitScale = 1, e.isArray(p.steps) && Math.ceil(i.scaleSizeInUnits / f) < e.max(p.steps)) {\n                  for (var m = 0; m < p.steps.length; ++m) {\n                    if (p.steps[m] >= Math.ceil(i.scaleSizeInUnits / f)) {\n                      i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, p.steps[m]);\n                      break;\n                    }\n                  }\n\n                  break;\n                }\n\n                if (p.maxStep === !1 || Math.ceil(i.scaleSizeInUnits / f) < p.maxStep) {\n                  i.unitScale = e.getValueOrDefault(i.options.time.unitStepSize, Math.ceil(i.scaleSizeInUnits / f));\n                  break;\n                }\n\n                ++g, p = a.units[g], i.tickUnit = p.name;\n                var b = i.firstTick.diff(i.getMomentStartOf(i.firstTick), i.tickUnit, !0),\n                    v = i.getMomentStartOf(i.lastTick.clone().add(1, i.tickUnit)).diff(i.lastTick, i.tickUnit, !0);\n                i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0) + b + v, i.displayFormat = i.options.time.displayFormats[p.name];\n              }\n            }\n            var x;\n\n            if (i.options.time.min ? x = i.getMomentStartOf(i.firstTick) : (i.firstTick = i.getMomentStartOf(i.firstTick), x = i.firstTick), !i.options.time.max) {\n              var y = i.getMomentStartOf(i.lastTick),\n                  k = y.diff(i.lastTick, i.tickUnit, !0);\n              0 > k ? i.lastTick = i.getMomentStartOf(i.lastTick.add(1, i.tickUnit)) : k >= 0 && (i.lastTick = y), i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0);\n            }\n\n            i.options.time.displayFormat && (i.displayFormat = i.options.time.displayFormat), i.ticks.push(i.firstTick.clone());\n\n            for (var S = 1; S <= i.scaleSizeInUnits; ++S) {\n              var w = x.clone().add(S, i.tickUnit);\n              if (i.options.time.max && w.diff(i.lastTick, i.tickUnit, !0) >= 0) break;\n              S % i.unitScale === 0 && i.ticks.push(w);\n            }\n\n            var M = i.ticks[i.ticks.length - 1].diff(i.lastTick, i.tickUnit);\n            (0 !== M || 0 === i.scaleSizeInUnits) && (i.options.time.max ? (i.ticks.push(i.lastTick.clone()), i.scaleSizeInUnits = i.lastTick.diff(i.ticks[0], i.tickUnit, !0)) : (i.ticks.push(i.lastTick.clone()), i.scaleSizeInUnits = i.lastTick.diff(i.firstTick, i.tickUnit, !0))), i.ctx.restore(), i.labelDiffs = void 0;\n          },\n          getLabelForIndex: function getLabelForIndex(t, e) {\n            var a = this,\n                i = a.chart.data.labels && t < a.chart.data.labels.length ? a.chart.data.labels[t] : \"\";\n            return \"object\" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(a.chart.data.datasets[e].data[0]) && (i = a.getRightValue(a.chart.data.datasets[e].data[t])), a.options.time.tooltipFormat && (i = a.parseTime(i).format(a.options.time.tooltipFormat)), i;\n          },\n          tickFormatFunction: function tickFormatFunction(t, a, i) {\n            var n = t.format(this.displayFormat),\n                o = this.options.ticks,\n                r = e.getValueOrDefault(o.callback, o.userCallback);\n            return r ? r(n, a, i) : n;\n          },\n          convertTicksToLabels: function convertTicksToLabels() {\n            var t = this;\n            t.tickMoments = t.ticks, t.ticks = t.ticks.map(t.tickFormatFunction, t);\n          },\n          getPixelForValue: function getPixelForValue(t, e, a) {\n            var i = this,\n                n = null;\n\n            if (void 0 !== e && void 0 !== a && (n = i.getLabelDiff(a, e)), null === n && (t && t.isValid || (t = i.parseTime(i.getRightValue(t))), t && t.isValid && t.isValid() && (n = t.diff(i.firstTick, i.tickUnit, !0))), null !== n) {\n              var o = 0 !== n ? n / i.scaleSizeInUnits : n;\n\n              if (i.isHorizontal()) {\n                var r = i.width - (i.paddingLeft + i.paddingRight),\n                    l = r * o + i.paddingLeft;\n                return i.left + Math.round(l);\n              }\n\n              var s = i.height - (i.paddingTop + i.paddingBottom),\n                  d = s * o + i.paddingTop;\n              return i.top + Math.round(d);\n            }\n          },\n          getPixelForTick: function getPixelForTick(t) {\n            return this.getPixelForValue(this.tickMoments[t], null, null);\n          },\n          getValueForPixel: function getValueForPixel(t) {\n            var e = this,\n                a = e.isHorizontal() ? e.width - (e.paddingLeft + e.paddingRight) : e.height - (e.paddingTop + e.paddingBottom),\n                n = (t - (e.isHorizontal() ? e.left + e.paddingLeft : e.top + e.paddingTop)) / a;\n            return n *= e.scaleSizeInUnits, e.firstTick.clone().add(i.duration(n, e.tickUnit).asSeconds(), \"seconds\");\n          },\n          parseTime: function parseTime(t) {\n            var e = this;\n            return \"string\" == typeof e.options.time.parser ? i(t, e.options.time.parser) : \"function\" == typeof e.options.time.parser ? e.options.time.parser(t) : \"function\" == typeof t.getMonth || \"number\" == typeof t ? i(t) : t.isValid && t.isValid() ? t : \"string\" != typeof e.options.time.format && e.options.time.format.call ? (console.warn(\"options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale\"), e.options.time.format(t)) : i(t, e.options.time.format);\n          }\n        });\n        t.scaleService.registerScaleType(\"time\", o, n);\n      };\n    }, {\n      1: 1\n    }]\n  }, {}, [7])(7);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLENBQUNnWixPQUFGLENBQVU4ckIsSUFBVixDQUFlQyxNQUFmLENBQXNCcGxDLENBQXRCLENBREEsR0FFQSxjQUFjLE9BQU9BLENBQUMsQ0FBQ3duQyxRQUF2QixJQUFtQyxZQUFZLE9BQU94bkMsQ0FBdEQsR0FDQVcsQ0FBQyxDQUFDWCxDQUFELENBREQsR0FFQUEsQ0FBQyxDQUFDaThCLE9BQUYsSUFBYWo4QixDQUFDLENBQUNpOEIsT0FBRixFQUFiLEdBQ0FqOEIsQ0FEQSxHQUVBLFlBQVksT0FBT0ssQ0FBQyxDQUFDZ1osT0FBRixDQUFVOHJCLElBQVYsQ0FBZUUsTUFBbEMsSUFDQWhsQyxDQUFDLENBQUNnWixPQUFGLENBQVU4ckIsSUFBVixDQUFlRSxNQUFmLENBQXNCL2pDLElBRHRCLElBRUNtRyxPQUFPLENBQUNnZ0MsSUFBUixDQUNDLHdJQURELEdBR0RwbkMsQ0FBQyxDQUFDZ1osT0FBRixDQUFVOHJCLElBQVYsQ0FBZUUsTUFBZixDQUFzQnJsQyxDQUF0QixDQUxBLElBTUFXLENBQUMsQ0FBQ1gsQ0FBRCxFQUFJSyxDQUFDLENBQUNnWixPQUFGLENBQVU4ckIsSUFBVixDQUFlRSxNQUFuQixDQWRMO0FBZUQ7QUE1WGdCLFNBQWYsQ0F6Q047QUF1YUFybEMsUUFBQUEsQ0FBQyxDQUFDNnBCLFlBQUYsQ0FBZXlULGlCQUFmLENBQWlDLE1BQWpDLEVBQXlDcjhCLENBQXpDLEVBQTRDTCxDQUE1QztBQUNELE9BMWFIO0FBMmFELEtBL2FDLEVBZ2JGO0FBQUUsU0FBRztBQUFMLEtBaGJFO0FBajFRTixHQW5DSyxFQXV5UkwsRUF2eVJLLEVBd3lSTCxDQUFDLENBQUQsQ0F4eVJLLEVBeXlSTCxDQXp5UkssQ0FBUDtBQTB5UkQsQ0EzelJBLENBQUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1ib2lsZXItcGxhdGUvLi9zcmMvbGliL0NoYXJ0L0NoYXJ0Lm1pbi5qcz8zNTVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ2hhcnQuanNcbiAqIGh0dHA6Ly9jaGFydGpzLm9yZy9cbiAqIFZlcnNpb246IDIuNC4wXG4gKlxuICogQ29weXJpZ2h0IDIwMTYgTmljayBEb3duaWVcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG4hKGZ1bmN0aW9uICh0KSB7XG4gIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIG1vZHVsZSlcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHQoKTtcbiAgZWxzZSBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKFtdLCB0KTtcbiAgZWxzZSB7XG4gICAgdmFyIGU7XG4gICAgKGUgPVxuICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93XG4gICAgICAgID8gd2luZG93XG4gICAgICAgIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZ2xvYmFsXG4gICAgICAgID8gZ2xvYmFsXG4gICAgICAgIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2VsZlxuICAgICAgICA/IHNlbGZcbiAgICAgICAgOiB0aGlzKSxcbiAgICAgIChlLkNoYXJ0ID0gdCgpKTtcbiAgfVxufSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKGZ1bmN0aW9uIHQoZSwgYSwgaSkge1xuICAgIGZ1bmN0aW9uIG4ociwgbCkge1xuICAgICAgaWYgKCFhW3JdKSB7XG4gICAgICAgIGlmICghZVtyXSkge1xuICAgICAgICAgIHZhciBzID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiByZXF1aXJlICYmIHJlcXVpcmU7XG4gICAgICAgICAgaWYgKCFsICYmIHMpIHJldHVybiBzKHIsICEwKTtcbiAgICAgICAgICBpZiAobykgcmV0dXJuIG8ociwgITApO1xuICAgICAgICAgIHZhciBkID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHIgKyBcIidcIik7XG4gICAgICAgICAgdGhyb3cgKChkLmNvZGUgPSBcIk1PRFVMRV9OT1RfRk9VTkRcIiksIGQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1ID0gKGFbcl0gPSB7IGV4cG9ydHM6IHt9IH0pO1xuICAgICAgICBlW3JdWzBdLmNhbGwoXG4gICAgICAgICAgdS5leHBvcnRzLFxuICAgICAgICAgIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgYSA9IGVbcl1bMV1bdF07XG4gICAgICAgICAgICByZXR1cm4gbihhID8gYSA6IHQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdSxcbiAgICAgICAgICB1LmV4cG9ydHMsXG4gICAgICAgICAgdCxcbiAgICAgICAgICBlLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgaVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFbcl0uZXhwb3J0cztcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIHZhciBvID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiByZXF1aXJlICYmIHJlcXVpcmUsIHIgPSAwO1xuICAgICAgciA8IGkubGVuZ3RoO1xuICAgICAgcisrXG4gICAgKVxuICAgICAgbihpW3JdKTtcbiAgICByZXR1cm4gbjtcbiAgfSkoXG4gICAge1xuICAgICAgMTogW2Z1bmN0aW9uICh0LCBlLCBhKSB7fSwge31dLFxuICAgICAgMjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGkodCkge1xuICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSAvXiMoW2EtZkEtRjAtOV17M30pJC8sXG4gICAgICAgICAgICAgICAgYSA9IC9eIyhbYS1mQS1GMC05XXs2fSkkLyxcbiAgICAgICAgICAgICAgICBpID1cbiAgICAgICAgICAgICAgICAgIC9ecmdiYT9cXChcXHMqKFsrLV0/XFxkKylcXHMqLFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvLFxuICAgICAgICAgICAgICAgIG4gPVxuICAgICAgICAgICAgICAgICAgL15yZ2JhP1xcKFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpJC8sXG4gICAgICAgICAgICAgICAgbyA9IC8oXFx3KykvLFxuICAgICAgICAgICAgICAgIHIgPSBbMCwgMCwgMF0sXG4gICAgICAgICAgICAgICAgbCA9IDEsXG4gICAgICAgICAgICAgICAgcyA9IHQubWF0Y2goZSk7XG4gICAgICAgICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICAgICAgcyA9IHNbMV07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCByLmxlbmd0aDsgZCsrKVxuICAgICAgICAgICAgICAgICAgcltkXSA9IHBhcnNlSW50KHNbZF0gKyBzW2RdLCAxNik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHMgPSB0Lm1hdGNoKGEpKSkge1xuICAgICAgICAgICAgICAgIHMgPSBzWzFdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgci5sZW5ndGg7IGQrKylcbiAgICAgICAgICAgICAgICAgIHJbZF0gPSBwYXJzZUludChzLnNsaWNlKDIgKiBkLCAyICogZCArIDIpLCAxNik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHMgPSB0Lm1hdGNoKGkpKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgci5sZW5ndGg7IGQrKykgcltkXSA9IHBhcnNlSW50KHNbZCArIDFdKTtcbiAgICAgICAgICAgICAgICBsID0gcGFyc2VGbG9hdChzWzRdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgocyA9IHQubWF0Y2gobikpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCByLmxlbmd0aDsgZCsrKVxuICAgICAgICAgICAgICAgICAgcltkXSA9IE1hdGgucm91bmQoMi41NSAqIHBhcnNlRmxvYXQoc1tkICsgMV0pKTtcbiAgICAgICAgICAgICAgICBsID0gcGFyc2VGbG9hdChzWzRdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgocyA9IHQubWF0Y2gobykpKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwidHJhbnNwYXJlbnRcIiA9PSBzWzFdKSByZXR1cm4gWzAsIDAsIDAsIDBdO1xuICAgICAgICAgICAgICAgIGlmICgoKHIgPSB5W3NbMV1dKSwgIXIpKSByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCByLmxlbmd0aDsgZCsrKSByW2RdID0gdihyW2RdLCAwLCAyNTUpO1xuICAgICAgICAgICAgICByZXR1cm4gKGwgPSBsIHx8IDAgPT0gbCA/IHYobCwgMCwgMSkgOiAxKSwgKHJbM10gPSBsKSwgcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbih0KSB7XG4gICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9XG4gICAgICAgICAgICAgICAgICAvXmhzbGE/XFwoXFxzKihbKy1dP1xcZCspKD86ZGVnKT9cXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKS8sXG4gICAgICAgICAgICAgICAgYSA9IHQubWF0Y2goZSk7XG4gICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJzZUZsb2F0KGFbNF0pLFxuICAgICAgICAgICAgICAgICAgbiA9IHYocGFyc2VJbnQoYVsxXSksIDAsIDM2MCksXG4gICAgICAgICAgICAgICAgICBvID0gdihwYXJzZUZsb2F0KGFbMl0pLCAwLCAxMDApLFxuICAgICAgICAgICAgICAgICAgciA9IHYocGFyc2VGbG9hdChhWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICAgICAgICAgIGwgPSB2KGlzTmFOKGkpID8gMSA6IGksIDAsIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbbiwgbywgciwgbF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbyh0KSB7XG4gICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9XG4gICAgICAgICAgICAgICAgICAvXmh3YlxcKFxccyooWystXT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkvLFxuICAgICAgICAgICAgICAgIGEgPSB0Lm1hdGNoKGUpO1xuICAgICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gcGFyc2VGbG9hdChhWzRdKSxcbiAgICAgICAgICAgICAgICAgIG4gPSB2KHBhcnNlSW50KGFbMV0pLCAwLCAzNjApLFxuICAgICAgICAgICAgICAgICAgbyA9IHYocGFyc2VGbG9hdChhWzJdKSwgMCwgMTAwKSxcbiAgICAgICAgICAgICAgICAgIHIgPSB2KHBhcnNlRmxvYXQoYVszXSksIDAsIDEwMCksXG4gICAgICAgICAgICAgICAgICBsID0gdihpc05hTihpKSA/IDEgOiBpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW24sIG8sIHIsIGxdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHIodCkge1xuICAgICAgICAgICAgdmFyIGUgPSBpKHQpO1xuICAgICAgICAgICAgcmV0dXJuIGUgJiYgZS5zbGljZSgwLCAzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IG4odCk7XG4gICAgICAgICAgICByZXR1cm4gZSAmJiBlLnNsaWNlKDAsIDMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBzKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gaSh0KTtcbiAgICAgICAgICAgIHJldHVybiBlID8gZVszXSA6IChlID0gbih0KSkgPyBlWzNdIDogKGUgPSBvKHQpKSA/IGVbM10gOiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGQodCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiI1wiICsgeCh0WzBdKSArIHgodFsxXSkgKyB4KHRbMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB1KHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiAxID4gZSB8fCAodFszXSAmJiB0WzNdIDwgMSlcbiAgICAgICAgICAgICAgPyBjKHQsIGUpXG4gICAgICAgICAgICAgIDogXCJyZ2IoXCIgKyB0WzBdICsgXCIsIFwiICsgdFsxXSArIFwiLCBcIiArIHRbMl0gKyBcIilcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gYyh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB2b2lkIDAgIT09IHRbM10gPyB0WzNdIDogMSksXG4gICAgICAgICAgICAgIFwicmdiYShcIiArIHRbMF0gKyBcIiwgXCIgKyB0WzFdICsgXCIsIFwiICsgdFsyXSArIFwiLCBcIiArIGUgKyBcIilcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gaCh0LCBlKSB7XG4gICAgICAgICAgICBpZiAoMSA+IGUgfHwgKHRbM10gJiYgdFszXSA8IDEpKSByZXR1cm4gZih0LCBlKTtcbiAgICAgICAgICAgIHZhciBhID0gTWF0aC5yb3VuZCgodFswXSAvIDI1NSkgKiAxMDApLFxuICAgICAgICAgICAgICBpID0gTWF0aC5yb3VuZCgodFsxXSAvIDI1NSkgKiAxMDApLFxuICAgICAgICAgICAgICBuID0gTWF0aC5yb3VuZCgodFsyXSAvIDI1NSkgKiAxMDApO1xuICAgICAgICAgICAgcmV0dXJuIFwicmdiKFwiICsgYSArIFwiJSwgXCIgKyBpICsgXCIlLCBcIiArIG4gKyBcIiUpXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGYodCwgZSkge1xuICAgICAgICAgICAgdmFyIGEgPSBNYXRoLnJvdW5kKCh0WzBdIC8gMjU1KSAqIDEwMCksXG4gICAgICAgICAgICAgIGkgPSBNYXRoLnJvdW5kKCh0WzFdIC8gMjU1KSAqIDEwMCksXG4gICAgICAgICAgICAgIG4gPSBNYXRoLnJvdW5kKCh0WzJdIC8gMjU1KSAqIDEwMCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICBcInJnYmEoXCIgK1xuICAgICAgICAgICAgICBhICtcbiAgICAgICAgICAgICAgXCIlLCBcIiArXG4gICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICBcIiUsIFwiICtcbiAgICAgICAgICAgICAgbiArXG4gICAgICAgICAgICAgIFwiJSwgXCIgK1xuICAgICAgICAgICAgICAoZSB8fCB0WzNdIHx8IDEpICtcbiAgICAgICAgICAgICAgXCIpXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGcodCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIDEgPiBlIHx8ICh0WzNdICYmIHRbM10gPCAxKVxuICAgICAgICAgICAgICA/IHAodCwgZSlcbiAgICAgICAgICAgICAgOiBcImhzbChcIiArIHRbMF0gKyBcIiwgXCIgKyB0WzFdICsgXCIlLCBcIiArIHRbMl0gKyBcIiUpXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHAodCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gdm9pZCAwICE9PSB0WzNdID8gdFszXSA6IDEpLFxuICAgICAgICAgICAgICBcImhzbGEoXCIgKyB0WzBdICsgXCIsIFwiICsgdFsxXSArIFwiJSwgXCIgKyB0WzJdICsgXCIlLCBcIiArIGUgKyBcIilcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbSh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB2b2lkIDAgIT09IHRbM10gPyB0WzNdIDogMSksXG4gICAgICAgICAgICAgIFwiaHdiKFwiICtcbiAgICAgICAgICAgICAgICB0WzBdICtcbiAgICAgICAgICAgICAgICBcIiwgXCIgK1xuICAgICAgICAgICAgICAgIHRbMV0gK1xuICAgICAgICAgICAgICAgIFwiJSwgXCIgK1xuICAgICAgICAgICAgICAgIHRbMl0gK1xuICAgICAgICAgICAgICAgIFwiJVwiICtcbiAgICAgICAgICAgICAgICAodm9pZCAwICE9PSBlICYmIDEgIT09IGUgPyBcIiwgXCIgKyBlIDogXCJcIikgK1xuICAgICAgICAgICAgICAgIFwiKVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBiKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBrW3Quc2xpY2UoMCwgMyldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB2KHQsIGUsIGEpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChlLCB0KSwgYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHgodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGUubGVuZ3RoIDwgMiA/IFwiMFwiICsgZSA6IGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB5ID0gdCg2KTtcbiAgICAgICAgICBlLmV4cG9ydHMgPSB7XG4gICAgICAgICAgICBnZXRSZ2JhOiBpLFxuICAgICAgICAgICAgZ2V0SHNsYTogbixcbiAgICAgICAgICAgIGdldFJnYjogcixcbiAgICAgICAgICAgIGdldEhzbDogbCxcbiAgICAgICAgICAgIGdldEh3YjogbyxcbiAgICAgICAgICAgIGdldEFscGhhOiBzLFxuICAgICAgICAgICAgaGV4U3RyaW5nOiBkLFxuICAgICAgICAgICAgcmdiU3RyaW5nOiB1LFxuICAgICAgICAgICAgcmdiYVN0cmluZzogYyxcbiAgICAgICAgICAgIHBlcmNlbnRTdHJpbmc6IGgsXG4gICAgICAgICAgICBwZXJjZW50YVN0cmluZzogZixcbiAgICAgICAgICAgIGhzbFN0cmluZzogZyxcbiAgICAgICAgICAgIGhzbGFTdHJpbmc6IHAsXG4gICAgICAgICAgICBod2JTdHJpbmc6IG0sXG4gICAgICAgICAgICBrZXl3b3JkOiBiLFxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGsgPSB7fTtcbiAgICAgICAgICBmb3IgKHZhciBTIGluIHkpIGtbeVtTXV0gPSBTO1xuICAgICAgICB9LFxuICAgICAgICB7IDY6IDYgfSxcbiAgICAgIF0sXG4gICAgICAzOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgdmFyIGkgPSB0KDUpLFxuICAgICAgICAgICAgbiA9IHQoMiksXG4gICAgICAgICAgICBvID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBvKSByZXR1cm4gdDtcbiAgICAgICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIG8pKSByZXR1cm4gbmV3IG8odCk7XG4gICAgICAgICAgICAgIHRoaXMudmFsdWVzID0ge1xuICAgICAgICAgICAgICAgIHJnYjogWzAsIDAsIDBdLFxuICAgICAgICAgICAgICAgIGhzbDogWzAsIDAsIDBdLFxuICAgICAgICAgICAgICAgIGhzdjogWzAsIDAsIDBdLFxuICAgICAgICAgICAgICAgIGh3YjogWzAsIDAsIDBdLFxuICAgICAgICAgICAgICAgIGNteWs6IFswLCAwLCAwLCAwXSxcbiAgICAgICAgICAgICAgICBhbHBoYTogMSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KVxuICAgICAgICAgICAgICAgIGlmICgoZSA9IG4uZ2V0UmdiYSh0KSkpIHRoaXMuc2V0VmFsdWVzKFwicmdiXCIsIGUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChlID0gbi5nZXRIc2xhKHQpKSkgdGhpcy5zZXRWYWx1ZXMoXCJoc2xcIiwgZSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIShlID0gbi5nZXRId2IodCkpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwYXJzZSBjb2xvciBmcm9tIHN0cmluZyBcIicgKyB0ICsgJ1wiJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXMoXCJod2JcIiwgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiB0KVxuICAgICAgICAgICAgICAgIGlmICgoKGUgPSB0KSwgdm9pZCAwICE9PSBlLnIgfHwgdm9pZCAwICE9PSBlLnJlZCkpXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyhcInJnYlwiLCBlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2b2lkIDAgIT09IGUubCB8fCB2b2lkIDAgIT09IGUubGlnaHRuZXNzKVxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXMoXCJoc2xcIiwgZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodm9pZCAwICE9PSBlLnYgfHwgdm9pZCAwICE9PSBlLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXMoXCJoc3ZcIiwgZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodm9pZCAwICE9PSBlLncgfHwgdm9pZCAwICE9PSBlLndoaXRlbmVzcylcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVzKFwiaHdiXCIsIGUpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZS5jICYmIHZvaWQgMCA9PT0gZS5jeWFuKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgXCJVbmFibGUgdG8gcGFyc2UgY29sb3IgZnJvbSBvYmplY3QgXCIgKyBKU09OLnN0cmluZ2lmeSh0KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXMoXCJjbXlrXCIsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgKG8ucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgcmdiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFNwYWNlKFwicmdiXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHNsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFNwYWNlKFwiaHNsXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHN2OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFNwYWNlKFwiaHN2XCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHdiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFNwYWNlKFwiaHdiXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY215azogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRTcGFjZShcImNteWtcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZ2JBcnJheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMucmdiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhzbEFycmF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5oc2w7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHN2QXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmhzdjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBod2JBcnJheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMudmFsdWVzO1xuICAgICAgICAgICAgICByZXR1cm4gMSAhPT0gdC5hbHBoYSA/IHQuaHdiLmNvbmNhdChbdC5hbHBoYV0pIDogdC5od2I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY215a0FycmF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5jbXlrO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJnYmFBcnJheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMudmFsdWVzO1xuICAgICAgICAgICAgICByZXR1cm4gdC5yZ2IuY29uY2F0KFt0LmFscGhhXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHNsYUFycmF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gdGhpcy52YWx1ZXM7XG4gICAgICAgICAgICAgIHJldHVybiB0LmhzbC5jb25jYXQoW3QuYWxwaGFdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbHBoYTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdFxuICAgICAgICAgICAgICAgID8gdGhpcy52YWx1ZXMuYWxwaGFcbiAgICAgICAgICAgICAgICA6ICh0aGlzLnNldFZhbHVlcyhcImFscGhhXCIsIHQpLCB0aGlzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJyZ2JcIiwgMCwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3JlZW46IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJyZ2JcIiwgMSwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcInJnYlwiLCAyLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBodWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdCAmJiAoKHQgJT0gMzYwKSwgKHQgPSAwID4gdCA/IDM2MCArIHQgOiB0KSksXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGFubmVsKFwiaHNsXCIsIDAsIHQpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F0dXJhdGlvbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcImhzbFwiLCAxLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaWdodG5lc3M6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJoc2xcIiwgMiwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F0dXJhdGlvbnY6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJoc3ZcIiwgMSwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2hpdGVuZXNzOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiaHdiXCIsIDEsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsYWNrbmVzczogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcImh3YlwiLCAyLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2hhbm5lbChcImhzdlwiLCAyLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjeWFuOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiY215a1wiLCAwLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYWdlbnRhOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiY215a1wiLCAxLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5ZWxsb3c6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldENoYW5uZWwoXCJjbXlrXCIsIDIsIHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsYWNrOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDaGFubmVsKFwiY215a1wiLCAzLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZXhTdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG4uaGV4U3RyaW5nKHRoaXMudmFsdWVzLnJnYik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmdiU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLnJnYlN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZ2JhU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuLnJnYmFTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGVyY2VudFN0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbi5wZXJjZW50U3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhzbFN0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbi5oc2xTdHJpbmcodGhpcy52YWx1ZXMuaHNsLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHNsYVN0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbi5oc2xhU3RyaW5nKHRoaXMudmFsdWVzLmhzbCwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGh3YlN0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbi5od2JTdHJpbmcodGhpcy52YWx1ZXMuaHdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2V5d29yZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbi5rZXl3b3JkKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJnYk51bWJlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMudmFsdWVzLnJnYjtcbiAgICAgICAgICAgICAgcmV0dXJuICh0WzBdIDw8IDE2KSB8ICh0WzFdIDw8IDgpIHwgdFsyXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsdW1pbm9zaXR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIHQgPSB0aGlzLnZhbHVlcy5yZ2IsIGUgPSBbXSwgYSA9IDA7IGEgPCB0Lmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0W2FdIC8gMjU1O1xuICAgICAgICAgICAgICAgIGVbYV0gPVxuICAgICAgICAgICAgICAgICAgMC4wMzkyOCA+PSBpID8gaSAvIDEyLjkyIDogTWF0aC5wb3coKGkgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gMC4yMTI2ICogZVswXSArIDAuNzE1MiAqIGVbMV0gKyAwLjA3MjIgKiBlWzJdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRyYXN0OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMubHVtaW5vc2l0eSgpLFxuICAgICAgICAgICAgICAgIGEgPSB0Lmx1bWlub3NpdHkoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGUgPiBhID8gKGUgKyAwLjA1KSAvIChhICsgMC4wNSkgOiAoYSArIDAuMDUpIC8gKGUgKyAwLjA1KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZXZlbDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNvbnRyYXN0KHQpO1xuICAgICAgICAgICAgICByZXR1cm4gZSA+PSA3LjEgPyBcIkFBQVwiIDogZSA+PSA0LjUgPyBcIkFBXCIgOiBcIlwiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhcms6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnZhbHVlcy5yZ2IsXG4gICAgICAgICAgICAgICAgZSA9ICgyOTkgKiB0WzBdICsgNTg3ICogdFsxXSArIDExNCAqIHRbMl0pIC8gMWUzO1xuICAgICAgICAgICAgICByZXR1cm4gMTI4ID4gZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaWdodDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuZGFyaygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gW10sIGUgPSAwOyAzID4gZTsgZSsrKVxuICAgICAgICAgICAgICAgIHRbZV0gPSAyNTUgLSB0aGlzLnZhbHVlcy5yZ2JbZV07XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlcyhcInJnYlwiLCB0KSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaWdodGVuOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzLmhzbDtcbiAgICAgICAgICAgICAgcmV0dXJuIChlWzJdICs9IGVbMl0gKiB0KSwgdGhpcy5zZXRWYWx1ZXMoXCJoc2xcIiwgZSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGFya2VuOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzLmhzbDtcbiAgICAgICAgICAgICAgcmV0dXJuIChlWzJdIC09IGVbMl0gKiB0KSwgdGhpcy5zZXRWYWx1ZXMoXCJoc2xcIiwgZSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F0dXJhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuaHNsO1xuICAgICAgICAgICAgICByZXR1cm4gKGVbMV0gKz0gZVsxXSAqIHQpLCB0aGlzLnNldFZhbHVlcyhcImhzbFwiLCBlKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNhdHVyYXRlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzLmhzbDtcbiAgICAgICAgICAgICAgcmV0dXJuIChlWzFdIC09IGVbMV0gKiB0KSwgdGhpcy5zZXRWYWx1ZXMoXCJoc2xcIiwgZSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2hpdGVuOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzLmh3YjtcbiAgICAgICAgICAgICAgcmV0dXJuIChlWzFdICs9IGVbMV0gKiB0KSwgdGhpcy5zZXRWYWx1ZXMoXCJod2JcIiwgZSksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxhY2tlbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnZhbHVlcy5od2I7XG4gICAgICAgICAgICAgIHJldHVybiAoZVsyXSArPSBlWzJdICogdCksIHRoaXMuc2V0VmFsdWVzKFwiaHdiXCIsIGUpLCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdyZXlzY2FsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMudmFsdWVzLnJnYixcbiAgICAgICAgICAgICAgICBlID0gMC4zICogdFswXSArIDAuNTkgKiB0WzFdICsgMC4xMSAqIHRbMl07XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlcyhcInJnYlwiLCBbZSwgZSwgZV0pLCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFyZXI6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuYWxwaGE7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlcyhcImFscGhhXCIsIGUgLSBlICogdCksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BhcXVlcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnZhbHVlcy5hbHBoYTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0VmFsdWVzKFwiYWxwaGFcIiwgZSArIGUgKiB0KSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3RhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMuaHNsLFxuICAgICAgICAgICAgICAgIGEgPSAoZVswXSArIHQpICUgMzYwO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChlWzBdID0gMCA+IGEgPyAzNjAgKyBhIDogYSksIHRoaXMuc2V0VmFsdWVzKFwiaHNsXCIsIGUpLCB0aGlzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWl4OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgaSA9IHQsXG4gICAgICAgICAgICAgICAgbiA9IHZvaWQgMCA9PT0gZSA/IDAuNSA6IGUsXG4gICAgICAgICAgICAgICAgbyA9IDIgKiBuIC0gMSxcbiAgICAgICAgICAgICAgICByID0gYS5hbHBoYSgpIC0gaS5hbHBoYSgpLFxuICAgICAgICAgICAgICAgIGwgPSAoKG8gKiByID09PSAtMSA/IG8gOiAobyArIHIpIC8gKDEgKyBvICogcikpICsgMSkgLyAyLFxuICAgICAgICAgICAgICAgIHMgPSAxIC0gbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmdiKFxuICAgICAgICAgICAgICAgIGwgKiBhLnJlZCgpICsgcyAqIGkucmVkKCksXG4gICAgICAgICAgICAgICAgbCAqIGEuZ3JlZW4oKSArIHMgKiBpLmdyZWVuKCksXG4gICAgICAgICAgICAgICAgbCAqIGEuYmx1ZSgpICsgcyAqIGkuYmx1ZSgpXG4gICAgICAgICAgICAgICkuYWxwaGEoYS5hbHBoYSgpICogbiArIGkuYWxwaGEoKSAqICgxIC0gbikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZ2IoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGEgPSBuZXcgbygpLFxuICAgICAgICAgICAgICAgIGkgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICBuID0gYS52YWx1ZXM7XG4gICAgICAgICAgICAgIGZvciAodmFyIHIgaW4gaSlcbiAgICAgICAgICAgICAgICBpLmhhc093blByb3BlcnR5KHIpICYmXG4gICAgICAgICAgICAgICAgICAoKHQgPSBpW3JdKSxcbiAgICAgICAgICAgICAgICAgIChlID0ge30udG9TdHJpbmcuY2FsbCh0KSksXG4gICAgICAgICAgICAgICAgICBcIltvYmplY3QgQXJyYXldXCIgPT09IGVcbiAgICAgICAgICAgICAgICAgICAgPyAobltyXSA9IHQuc2xpY2UoMCkpXG4gICAgICAgICAgICAgICAgICAgIDogXCJbb2JqZWN0IE51bWJlcl1cIiA9PT0gZVxuICAgICAgICAgICAgICAgICAgICA/IChuW3JdID0gdClcbiAgICAgICAgICAgICAgICAgICAgOiBjb25zb2xlLmVycm9yKFwidW5leHBlY3RlZCBjb2xvciB2YWx1ZTpcIiwgdCkpO1xuICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgICAoby5wcm90b3R5cGUuc3BhY2VzID0ge1xuICAgICAgICAgICAgICByZ2I6IFtcInJlZFwiLCBcImdyZWVuXCIsIFwiYmx1ZVwiXSxcbiAgICAgICAgICAgICAgaHNsOiBbXCJodWVcIiwgXCJzYXR1cmF0aW9uXCIsIFwibGlnaHRuZXNzXCJdLFxuICAgICAgICAgICAgICBoc3Y6IFtcImh1ZVwiLCBcInNhdHVyYXRpb25cIiwgXCJ2YWx1ZVwiXSxcbiAgICAgICAgICAgICAgaHdiOiBbXCJodWVcIiwgXCJ3aGl0ZW5lc3NcIiwgXCJibGFja25lc3NcIl0sXG4gICAgICAgICAgICAgIGNteWs6IFtcImN5YW5cIiwgXCJtYWdlbnRhXCIsIFwieWVsbG93XCIsIFwiYmxhY2tcIl0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChvLnByb3RvdHlwZS5tYXhlcyA9IHtcbiAgICAgICAgICAgICAgcmdiOiBbMjU1LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICAgIGhzbDogWzM2MCwgMTAwLCAxMDBdLFxuICAgICAgICAgICAgICBoc3Y6IFszNjAsIDEwMCwgMTAwXSxcbiAgICAgICAgICAgICAgaHdiOiBbMzYwLCAxMDAsIDEwMF0sXG4gICAgICAgICAgICAgIGNteWs6IFsxMDAsIDEwMCwgMTAwLCAxMDBdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoby5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IHRoaXMudmFsdWVzLCBhID0ge30sIGkgPSAwOyBpIDwgdC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBhW3QuY2hhckF0KGkpXSA9IGVbdF1baV07XG4gICAgICAgICAgICAgIHJldHVybiAxICE9PSBlLmFscGhhICYmIChhLmEgPSBlLmFscGhhKSwgYTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKG8ucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgIG4gPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5zcGFjZXMsXG4gICAgICAgICAgICAgICAgciA9IHRoaXMubWF4ZXMsXG4gICAgICAgICAgICAgICAgbCA9IDE7XG4gICAgICAgICAgICAgIGlmIChcImFscGhhXCIgPT09IHQpIGwgPSBlO1xuICAgICAgICAgICAgICBlbHNlIGlmIChlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAoblt0XSA9IGUuc2xpY2UoMCwgdC5sZW5ndGgpKSwgKGwgPSBlW3QubGVuZ3RoXSk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKHZvaWQgMCAhPT0gZVt0LmNoYXJBdCgwKV0pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGEgPSAwOyBhIDwgdC5sZW5ndGg7IGErKykgblt0XVthXSA9IGVbdC5jaGFyQXQoYSldO1xuICAgICAgICAgICAgICAgIGwgPSBlLmE7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSBlW29bdF1bMF1dKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBvW3RdO1xuICAgICAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCB0Lmxlbmd0aDsgYSsrKSBuW3RdW2FdID0gZVtzW2FdXTtcbiAgICAgICAgICAgICAgICBsID0gZS5hbHBoYTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKChuLmFscGhhID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgTWF0aC5taW4oMSwgdm9pZCAwID09PSBsID8gbi5hbHBoYSA6IGwpXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgXCJhbHBoYVwiID09PSB0KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICAgICAgZm9yIChhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspXG4gICAgICAgICAgICAgICAgKGQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihyW3RdW2FdLCBuW3RdW2FdKSkpLFxuICAgICAgICAgICAgICAgICAgKG5bdF1bYV0gPSBNYXRoLnJvdW5kKGQpKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgdSBpbiBvKSB1ICE9PSB0ICYmIChuW3VdID0gaVt0XVt1XShuW3RdKSk7XG4gICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKG8ucHJvdG90eXBlLnNldFNwYWNlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSBlWzBdO1xuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBhXG4gICAgICAgICAgICAgICAgPyB0aGlzLmdldFZhbHVlcyh0KVxuICAgICAgICAgICAgICAgIDogKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEgJiYgKGEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSksXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyh0LCBhKSxcbiAgICAgICAgICAgICAgICAgIHRoaXMpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoby5wcm90b3R5cGUuc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gdGhpcy52YWx1ZXNbdF07XG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGFcbiAgICAgICAgICAgICAgICA/IGlbZV1cbiAgICAgICAgICAgICAgICA6IGEgPT09IGlbZV1cbiAgICAgICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgICAgICA6ICgoaVtlXSA9IGEpLCB0aGlzLnNldFZhbHVlcyh0LCBpKSwgdGhpcyk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyAmJiAod2luZG93LkNvbG9yID0gbyksXG4gICAgICAgICAgICAoZS5leHBvcnRzID0gbyk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgMjogMiwgNTogNSB9LFxuICAgICAgXSxcbiAgICAgIDQ6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBmdW5jdGlvbiBpKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuID0gdFswXSAvIDI1NSxcbiAgICAgICAgICAgICAgbyA9IHRbMV0gLyAyNTUsXG4gICAgICAgICAgICAgIHIgPSB0WzJdIC8gMjU1LFxuICAgICAgICAgICAgICBsID0gTWF0aC5taW4obiwgbywgciksXG4gICAgICAgICAgICAgIHMgPSBNYXRoLm1heChuLCBvLCByKSxcbiAgICAgICAgICAgICAgZCA9IHMgLSBsO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgcyA9PSBsXG4gICAgICAgICAgICAgICAgPyAoZSA9IDApXG4gICAgICAgICAgICAgICAgOiBuID09IHNcbiAgICAgICAgICAgICAgICA/IChlID0gKG8gLSByKSAvIGQpXG4gICAgICAgICAgICAgICAgOiBvID09IHNcbiAgICAgICAgICAgICAgICA/IChlID0gMiArIChyIC0gbikgLyBkKVxuICAgICAgICAgICAgICAgIDogciA9PSBzICYmIChlID0gNCArIChuIC0gbykgLyBkKSxcbiAgICAgICAgICAgICAgKGUgPSBNYXRoLm1pbig2MCAqIGUsIDM2MCkpLFxuICAgICAgICAgICAgICAwID4gZSAmJiAoZSArPSAzNjApLFxuICAgICAgICAgICAgICAoaSA9IChsICsgcykgLyAyKSxcbiAgICAgICAgICAgICAgKGEgPSBzID09IGwgPyAwIDogMC41ID49IGkgPyBkIC8gKHMgKyBsKSA6IGQgLyAoMiAtIHMgLSBsKSksXG4gICAgICAgICAgICAgIFtlLCAxMDAgKiBhLCAxMDAgKiBpXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbih0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbiA9IHRbMF0sXG4gICAgICAgICAgICAgIG8gPSB0WzFdLFxuICAgICAgICAgICAgICByID0gdFsyXSxcbiAgICAgICAgICAgICAgbCA9IE1hdGgubWluKG4sIG8sIHIpLFxuICAgICAgICAgICAgICBzID0gTWF0aC5tYXgobiwgbywgciksXG4gICAgICAgICAgICAgIGQgPSBzIC0gbDtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChhID0gMCA9PSBzID8gMCA6ICgoZCAvIHMpICogMWUzKSAvIDEwKSxcbiAgICAgICAgICAgICAgcyA9PSBsXG4gICAgICAgICAgICAgICAgPyAoZSA9IDApXG4gICAgICAgICAgICAgICAgOiBuID09IHNcbiAgICAgICAgICAgICAgICA/IChlID0gKG8gLSByKSAvIGQpXG4gICAgICAgICAgICAgICAgOiBvID09IHNcbiAgICAgICAgICAgICAgICA/IChlID0gMiArIChyIC0gbikgLyBkKVxuICAgICAgICAgICAgICAgIDogciA9PSBzICYmIChlID0gNCArIChuIC0gbykgLyBkKSxcbiAgICAgICAgICAgICAgKGUgPSBNYXRoLm1pbig2MCAqIGUsIDM2MCkpLFxuICAgICAgICAgICAgICAwID4gZSAmJiAoZSArPSAzNjApLFxuICAgICAgICAgICAgICAoaSA9ICgocyAvIDI1NSkgKiAxZTMpIC8gMTApLFxuICAgICAgICAgICAgICBbZSwgYSwgaV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG8odCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0WzBdLFxuICAgICAgICAgICAgICBhID0gdFsxXSxcbiAgICAgICAgICAgICAgbiA9IHRbMl0sXG4gICAgICAgICAgICAgIG8gPSBpKHQpWzBdLFxuICAgICAgICAgICAgICByID0gKDEgLyAyNTUpICogTWF0aC5taW4oZSwgTWF0aC5taW4oYSwgbikpLFxuICAgICAgICAgICAgICBuID0gMSAtICgxIC8gMjU1KSAqIE1hdGgubWF4KGUsIE1hdGgubWF4KGEsIG4pKTtcbiAgICAgICAgICAgIHJldHVybiBbbywgMTAwICogciwgMTAwICogbl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGwodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgIG8gPSB0WzBdIC8gMjU1LFxuICAgICAgICAgICAgICByID0gdFsxXSAvIDI1NSxcbiAgICAgICAgICAgICAgbCA9IHRbMl0gLyAyNTU7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAobiA9IE1hdGgubWluKDEgLSBvLCAxIC0gciwgMSAtIGwpKSxcbiAgICAgICAgICAgICAgKGUgPSAoMSAtIG8gLSBuKSAvICgxIC0gbikgfHwgMCksXG4gICAgICAgICAgICAgIChhID0gKDEgLSByIC0gbikgLyAoMSAtIG4pIHx8IDApLFxuICAgICAgICAgICAgICAoaSA9ICgxIC0gbCAtIG4pIC8gKDEgLSBuKSB8fCAwKSxcbiAgICAgICAgICAgICAgWzEwMCAqIGUsIDEwMCAqIGEsIDEwMCAqIGksIDEwMCAqIG5dXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBzKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBHW0pTT04uc3RyaW5naWZ5KHQpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRbMF0gLyAyNTUsXG4gICAgICAgICAgICAgIGEgPSB0WzFdIC8gMjU1LFxuICAgICAgICAgICAgICBpID0gdFsyXSAvIDI1NTtcbiAgICAgICAgICAgIChlID0gZSA+IDAuMDQwNDUgPyBNYXRoLnBvdygoZSArIDAuMDU1KSAvIDEuMDU1LCAyLjQpIDogZSAvIDEyLjkyKSxcbiAgICAgICAgICAgICAgKGEgPVxuICAgICAgICAgICAgICAgIGEgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKGEgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSA6IGEgLyAxMi45MiksXG4gICAgICAgICAgICAgIChpID1cbiAgICAgICAgICAgICAgICBpID4gMC4wNDA0NSA/IE1hdGgucG93KChpICsgMC4wNTUpIC8gMS4wNTUsIDIuNCkgOiBpIC8gMTIuOTIpO1xuICAgICAgICAgICAgdmFyIG4gPSAwLjQxMjQgKiBlICsgMC4zNTc2ICogYSArIDAuMTgwNSAqIGksXG4gICAgICAgICAgICAgIG8gPSAwLjIxMjYgKiBlICsgMC43MTUyICogYSArIDAuMDcyMiAqIGksXG4gICAgICAgICAgICAgIHIgPSAwLjAxOTMgKiBlICsgMC4xMTkyICogYSArIDAuOTUwNSAqIGk7XG4gICAgICAgICAgICByZXR1cm4gWzEwMCAqIG4sIDEwMCAqIG8sIDEwMCAqIHJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB1KHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuID0gZCh0KSxcbiAgICAgICAgICAgICAgbyA9IG5bMF0sXG4gICAgICAgICAgICAgIHIgPSBuWzFdLFxuICAgICAgICAgICAgICBsID0gblsyXTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChvIC89IDk1LjA0NyksXG4gICAgICAgICAgICAgIChyIC89IDEwMCksXG4gICAgICAgICAgICAgIChsIC89IDEwOC44ODMpLFxuICAgICAgICAgICAgICAobyA9IG8gPiAwLjAwODg1NiA/IE1hdGgucG93KG8sIDEgLyAzKSA6IDcuNzg3ICogbyArIDE2IC8gMTE2KSxcbiAgICAgICAgICAgICAgKHIgPSByID4gMC4wMDg4NTYgPyBNYXRoLnBvdyhyLCAxIC8gMykgOiA3Ljc4NyAqIHIgKyAxNiAvIDExNiksXG4gICAgICAgICAgICAgIChsID0gbCA+IDAuMDA4ODU2ID8gTWF0aC5wb3cobCwgMSAvIDMpIDogNy43ODcgKiBsICsgMTYgLyAxMTYpLFxuICAgICAgICAgICAgICAoZSA9IDExNiAqIHIgLSAxNiksXG4gICAgICAgICAgICAgIChhID0gNTAwICogKG8gLSByKSksXG4gICAgICAgICAgICAgIChpID0gMjAwICogKHIgLSBsKSksXG4gICAgICAgICAgICAgIFtlLCBhLCBpXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gYyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gVyh1KHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gaCh0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgciA9IHRbMF0gLyAzNjAsXG4gICAgICAgICAgICAgIGwgPSB0WzFdIC8gMTAwLFxuICAgICAgICAgICAgICBzID0gdFsyXSAvIDEwMDtcbiAgICAgICAgICAgIGlmICgwID09IGwpIHJldHVybiAobyA9IDI1NSAqIHMpLCBbbywgbywgb107XG4gICAgICAgICAgICAoYSA9IDAuNSA+IHMgPyBzICogKDEgKyBsKSA6IHMgKyBsIC0gcyAqIGwpLFxuICAgICAgICAgICAgICAoZSA9IDIgKiBzIC0gYSksXG4gICAgICAgICAgICAgIChuID0gWzAsIDAsIDBdKTtcbiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyAzID4gZDsgZCsrKVxuICAgICAgICAgICAgICAoaSA9IHIgKyAoMSAvIDMpICogLShkIC0gMSkpLFxuICAgICAgICAgICAgICAgIDAgPiBpICYmIGkrKyxcbiAgICAgICAgICAgICAgICBpID4gMSAmJiBpLS0sXG4gICAgICAgICAgICAgICAgKG8gPVxuICAgICAgICAgICAgICAgICAgMSA+IDYgKiBpXG4gICAgICAgICAgICAgICAgICAgID8gZSArIDYgKiAoYSAtIGUpICogaVxuICAgICAgICAgICAgICAgICAgICA6IDEgPiAyICogaVxuICAgICAgICAgICAgICAgICAgICA/IGFcbiAgICAgICAgICAgICAgICAgICAgOiAyID4gMyAqIGlcbiAgICAgICAgICAgICAgICAgICAgPyBlICsgKGEgLSBlKSAqICgyIC8gMyAtIGkpICogNlxuICAgICAgICAgICAgICAgICAgICA6IGUpLFxuICAgICAgICAgICAgICAgIChuW2RdID0gMjU1ICogbyk7XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZih0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgaSA9IHRbMF0sXG4gICAgICAgICAgICAgIG4gPSB0WzFdIC8gMTAwLFxuICAgICAgICAgICAgICBvID0gdFsyXSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiAwID09PSBvXG4gICAgICAgICAgICAgID8gWzAsIDAsIDBdXG4gICAgICAgICAgICAgIDogKChvICo9IDIpLFxuICAgICAgICAgICAgICAgIChuICo9IDEgPj0gbyA/IG8gOiAyIC0gbyksXG4gICAgICAgICAgICAgICAgKGEgPSAobyArIG4pIC8gMiksXG4gICAgICAgICAgICAgICAgKGUgPSAoMiAqIG4pIC8gKG8gKyBuKSksXG4gICAgICAgICAgICAgICAgW2ksIDEwMCAqIGUsIDEwMCAqIGFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbyhoKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbSh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbChoKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gdih0KSB7XG4gICAgICAgICAgICByZXR1cm4gcyhoKHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24geCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRbMF0gLyA2MCxcbiAgICAgICAgICAgICAgYSA9IHRbMV0gLyAxMDAsXG4gICAgICAgICAgICAgIGkgPSB0WzJdIC8gMTAwLFxuICAgICAgICAgICAgICBuID0gTWF0aC5mbG9vcihlKSAlIDYsXG4gICAgICAgICAgICAgIG8gPSBlIC0gTWF0aC5mbG9vcihlKSxcbiAgICAgICAgICAgICAgciA9IDI1NSAqIGkgKiAoMSAtIGEpLFxuICAgICAgICAgICAgICBsID0gMjU1ICogaSAqICgxIC0gYSAqIG8pLFxuICAgICAgICAgICAgICBzID0gMjU1ICogaSAqICgxIC0gYSAqICgxIC0gbykpLFxuICAgICAgICAgICAgICBpID0gMjU1ICogaTtcbiAgICAgICAgICAgIHN3aXRjaCAobikge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtpLCBzLCByXTtcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBbbCwgaSwgcl07XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gW3IsIGksIHNdO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtyLCBsLCBpXTtcbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBbcywgciwgaV07XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gW2ksIHIsIGxdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB5KHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpID0gdFswXSxcbiAgICAgICAgICAgICAgbiA9IHRbMV0gLyAxMDAsXG4gICAgICAgICAgICAgIG8gPSB0WzJdIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGEgPSAoMiAtIG4pICogbyksXG4gICAgICAgICAgICAgIChlID0gbiAqIG8pLFxuICAgICAgICAgICAgICAoZSAvPSAxID49IGEgPyBhIDogMiAtIGEpLFxuICAgICAgICAgICAgICAoZSA9IGUgfHwgMCksXG4gICAgICAgICAgICAgIChhIC89IDIpLFxuICAgICAgICAgICAgICBbaSwgMTAwICogZSwgMTAwICogYV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGsodCkge1xuICAgICAgICAgICAgcmV0dXJuIG8oeCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFModCkge1xuICAgICAgICAgICAgcmV0dXJuIGwoeCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHcodCkge1xuICAgICAgICAgICAgcmV0dXJuIHMoeCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIE0odCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgIG8gPSB0WzBdIC8gMzYwLFxuICAgICAgICAgICAgICBsID0gdFsxXSAvIDEwMCxcbiAgICAgICAgICAgICAgcyA9IHRbMl0gLyAxMDAsXG4gICAgICAgICAgICAgIGQgPSBsICsgcztcbiAgICAgICAgICAgIHN3aXRjaCAoXG4gICAgICAgICAgICAgIChkID4gMSAmJiAoKGwgLz0gZCksIChzIC89IGQpKSxcbiAgICAgICAgICAgICAgKGUgPSBNYXRoLmZsb29yKDYgKiBvKSksXG4gICAgICAgICAgICAgIChhID0gMSAtIHMpLFxuICAgICAgICAgICAgICAoaSA9IDYgKiBvIC0gZSksXG4gICAgICAgICAgICAgIDAgIT0gKDEgJiBlKSAmJiAoaSA9IDEgLSBpKSxcbiAgICAgICAgICAgICAgKG4gPSBsICsgaSAqIChhIC0gbCkpLFxuICAgICAgICAgICAgICBlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIChyID0gYSksIChnID0gbiksIChiID0gbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAociA9IG4pLCAoZyA9IGEpLCAoYiA9IGwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgKHIgPSBsKSwgKGcgPSBhKSwgKGIgPSBuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIChyID0gbCksIChnID0gbiksIChiID0gYSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAociA9IG4pLCAoZyA9IGwpLCAoYiA9IGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgKHIgPSBhKSwgKGcgPSBsKSwgKGIgPSBuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbMjU1ICogciwgMjU1ICogZywgMjU1ICogYl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEModCkge1xuICAgICAgICAgICAgcmV0dXJuIGkoTSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEQodCkge1xuICAgICAgICAgICAgcmV0dXJuIG4oTSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEkodCkge1xuICAgICAgICAgICAgcmV0dXJuIGwoTSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEEodCkge1xuICAgICAgICAgICAgcmV0dXJuIHMoTSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFQodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0WzBdIC8gMTAwLFxuICAgICAgICAgICAgICBvID0gdFsxXSAvIDEwMCxcbiAgICAgICAgICAgICAgciA9IHRbMl0gLyAxMDAsXG4gICAgICAgICAgICAgIGwgPSB0WzNdIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGUgPSAxIC0gTWF0aC5taW4oMSwgbiAqICgxIC0gbCkgKyBsKSksXG4gICAgICAgICAgICAgIChhID0gMSAtIE1hdGgubWluKDEsIG8gKiAoMSAtIGwpICsgbCkpLFxuICAgICAgICAgICAgICAoaSA9IDEgLSBNYXRoLm1pbigxLCByICogKDEgLSBsKSArIGwpKSxcbiAgICAgICAgICAgICAgWzI1NSAqIGUsIDI1NSAqIGEsIDI1NSAqIGldXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBQKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpKFQodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBGKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuKFQodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBfKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBvKFQodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBSKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBzKFQodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBWKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuID0gdFswXSAvIDEwMCxcbiAgICAgICAgICAgICAgbyA9IHRbMV0gLyAxMDAsXG4gICAgICAgICAgICAgIHIgPSB0WzJdIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGUgPSAzLjI0MDYgKiBuICsgLTEuNTM3MiAqIG8gKyByICogLTAuNDk4NiksXG4gICAgICAgICAgICAgIChhID0gbiAqIC0wLjk2ODkgKyAxLjg3NTggKiBvICsgMC4wNDE1ICogciksXG4gICAgICAgICAgICAgIChpID0gMC4wNTU3ICogbiArIG8gKiAtMC4yMDQgKyAxLjA1NyAqIHIpLFxuICAgICAgICAgICAgICAoZSA9XG4gICAgICAgICAgICAgICAgZSA+IDAuMDAzMTMwOFxuICAgICAgICAgICAgICAgICAgPyAxLjA1NSAqIE1hdGgucG93KGUsIDEgLyAyLjQpIC0gMC4wNTVcbiAgICAgICAgICAgICAgICAgIDogKGUgPSAxMi45MiAqIGUpKSxcbiAgICAgICAgICAgICAgKGEgPVxuICAgICAgICAgICAgICAgIGEgPiAwLjAwMzEzMDhcbiAgICAgICAgICAgICAgICAgID8gMS4wNTUgKiBNYXRoLnBvdyhhLCAxIC8gMi40KSAtIDAuMDU1XG4gICAgICAgICAgICAgICAgICA6IChhID0gMTIuOTIgKiBhKSksXG4gICAgICAgICAgICAgIChpID1cbiAgICAgICAgICAgICAgICBpID4gMC4wMDMxMzA4XG4gICAgICAgICAgICAgICAgICA/IDEuMDU1ICogTWF0aC5wb3coaSwgMSAvIDIuNCkgLSAwLjA1NVxuICAgICAgICAgICAgICAgICAgOiAoaSA9IDEyLjkyICogaSkpLFxuICAgICAgICAgICAgICAoZSA9IE1hdGgubWluKE1hdGgubWF4KDAsIGUpLCAxKSksXG4gICAgICAgICAgICAgIChhID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgYSksIDEpKSxcbiAgICAgICAgICAgICAgKGkgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBpKSwgMSkpLFxuICAgICAgICAgICAgICBbMjU1ICogZSwgMjU1ICogYSwgMjU1ICogaV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEwodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0WzBdLFxuICAgICAgICAgICAgICBvID0gdFsxXSxcbiAgICAgICAgICAgICAgciA9IHRbMl07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAobiAvPSA5NS4wNDcpLFxuICAgICAgICAgICAgICAobyAvPSAxMDApLFxuICAgICAgICAgICAgICAociAvPSAxMDguODgzKSxcbiAgICAgICAgICAgICAgKG4gPSBuID4gMC4wMDg4NTYgPyBNYXRoLnBvdyhuLCAxIC8gMykgOiA3Ljc4NyAqIG4gKyAxNiAvIDExNiksXG4gICAgICAgICAgICAgIChvID0gbyA+IDAuMDA4ODU2ID8gTWF0aC5wb3cobywgMSAvIDMpIDogNy43ODcgKiBvICsgMTYgLyAxMTYpLFxuICAgICAgICAgICAgICAociA9IHIgPiAwLjAwODg1NiA/IE1hdGgucG93KHIsIDEgLyAzKSA6IDcuNzg3ICogciArIDE2IC8gMTE2KSxcbiAgICAgICAgICAgICAgKGUgPSAxMTYgKiBvIC0gMTYpLFxuICAgICAgICAgICAgICAoYSA9IDUwMCAqIChuIC0gbykpLFxuICAgICAgICAgICAgICAoaSA9IDIwMCAqIChvIC0gcikpLFxuICAgICAgICAgICAgICBbZSwgYSwgaV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIE8odCkge1xuICAgICAgICAgICAgcmV0dXJuIFcoTCh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEIodCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgIG8gPSB0WzBdLFxuICAgICAgICAgICAgICByID0gdFsxXSxcbiAgICAgICAgICAgICAgbCA9IHRbMl07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA4ID49IG9cbiAgICAgICAgICAgICAgICA/ICgoYSA9ICgxMDAgKiBvKSAvIDkwMy4zKSwgKG4gPSA3Ljc4NyAqIChhIC8gMTAwKSArIDE2IC8gMTE2KSlcbiAgICAgICAgICAgICAgICA6ICgoYSA9IDEwMCAqIE1hdGgucG93KChvICsgMTYpIC8gMTE2LCAzKSksXG4gICAgICAgICAgICAgICAgICAobiA9IE1hdGgucG93KGEgLyAxMDAsIDEgLyAzKSkpLFxuICAgICAgICAgICAgICAoZSA9XG4gICAgICAgICAgICAgICAgMC4wMDg4NTYgPj0gZSAvIDk1LjA0N1xuICAgICAgICAgICAgICAgICAgPyAoZSA9ICg5NS4wNDcgKiAociAvIDUwMCArIG4gLSAxNiAvIDExNikpIC8gNy43ODcpXG4gICAgICAgICAgICAgICAgICA6IDk1LjA0NyAqIE1hdGgucG93KHIgLyA1MDAgKyBuLCAzKSksXG4gICAgICAgICAgICAgIChpID1cbiAgICAgICAgICAgICAgICAwLjAwODg1OSA+PSBpIC8gMTA4Ljg4M1xuICAgICAgICAgICAgICAgICAgPyAoaSA9ICgxMDguODgzICogKG4gLSBsIC8gMjAwIC0gMTYgLyAxMTYpKSAvIDcuNzg3KVxuICAgICAgICAgICAgICAgICAgOiAxMDguODgzICogTWF0aC5wb3cobiAtIGwgLyAyMDAsIDMpKSxcbiAgICAgICAgICAgICAgW2UsIGEsIGldXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBXKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuID0gdFswXSxcbiAgICAgICAgICAgICAgbyA9IHRbMV0sXG4gICAgICAgICAgICAgIHIgPSB0WzJdO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGUgPSBNYXRoLmF0YW4yKHIsIG8pKSxcbiAgICAgICAgICAgICAgKGEgPSAoMzYwICogZSkgLyAyIC8gTWF0aC5QSSksXG4gICAgICAgICAgICAgIDAgPiBhICYmIChhICs9IDM2MCksXG4gICAgICAgICAgICAgIChpID0gTWF0aC5zcXJ0KG8gKiBvICsgciAqIHIpKSxcbiAgICAgICAgICAgICAgW24sIGksIGFdXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB6KHQpIHtcbiAgICAgICAgICAgIHJldHVybiBWKEIodCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBOKHQpIHtcbiAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICBuID0gdFswXSxcbiAgICAgICAgICAgICAgbyA9IHRbMV0sXG4gICAgICAgICAgICAgIHIgPSB0WzJdO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGkgPSAociAvIDM2MCkgKiAyICogTWF0aC5QSSksXG4gICAgICAgICAgICAgIChlID0gbyAqIE1hdGguY29zKGkpKSxcbiAgICAgICAgICAgICAgKGEgPSBvICogTWF0aC5zaW4oaSkpLFxuICAgICAgICAgICAgICBbbiwgZSwgYV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEUodCkge1xuICAgICAgICAgICAgcmV0dXJuIEIoTih0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEgodCkge1xuICAgICAgICAgICAgcmV0dXJuIHooTih0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFUodCkge1xuICAgICAgICAgICAgcmV0dXJuIFpbdF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGoodCkge1xuICAgICAgICAgICAgcmV0dXJuIGkoVSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHEodCkge1xuICAgICAgICAgICAgcmV0dXJuIG4oVSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFkodCkge1xuICAgICAgICAgICAgcmV0dXJuIG8oVSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFgodCkge1xuICAgICAgICAgICAgcmV0dXJuIGwoVSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEsodCkge1xuICAgICAgICAgICAgcmV0dXJuIHUoVSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEoodCkge1xuICAgICAgICAgICAgcmV0dXJuIGQoVSh0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUuZXhwb3J0cyA9IHtcbiAgICAgICAgICAgIHJnYjJoc2w6IGksXG4gICAgICAgICAgICByZ2IyaHN2OiBuLFxuICAgICAgICAgICAgcmdiMmh3YjogbyxcbiAgICAgICAgICAgIHJnYjJjbXlrOiBsLFxuICAgICAgICAgICAgcmdiMmtleXdvcmQ6IHMsXG4gICAgICAgICAgICByZ2IyeHl6OiBkLFxuICAgICAgICAgICAgcmdiMmxhYjogdSxcbiAgICAgICAgICAgIHJnYjJsY2g6IGMsXG4gICAgICAgICAgICBoc2wycmdiOiBoLFxuICAgICAgICAgICAgaHNsMmhzdjogZixcbiAgICAgICAgICAgIGhzbDJod2I6IHAsXG4gICAgICAgICAgICBoc2wyY215azogbSxcbiAgICAgICAgICAgIGhzbDJrZXl3b3JkOiB2LFxuICAgICAgICAgICAgaHN2MnJnYjogeCxcbiAgICAgICAgICAgIGhzdjJoc2w6IHksXG4gICAgICAgICAgICBoc3YyaHdiOiBrLFxuICAgICAgICAgICAgaHN2MmNteWs6IFMsXG4gICAgICAgICAgICBoc3Yya2V5d29yZDogdyxcbiAgICAgICAgICAgIGh3YjJyZ2I6IE0sXG4gICAgICAgICAgICBod2IyaHNsOiBDLFxuICAgICAgICAgICAgaHdiMmhzdjogRCxcbiAgICAgICAgICAgIGh3YjJjbXlrOiBJLFxuICAgICAgICAgICAgaHdiMmtleXdvcmQ6IEEsXG4gICAgICAgICAgICBjbXlrMnJnYjogVCxcbiAgICAgICAgICAgIGNteWsyaHNsOiBQLFxuICAgICAgICAgICAgY215azJoc3Y6IEYsXG4gICAgICAgICAgICBjbXlrMmh3YjogXyxcbiAgICAgICAgICAgIGNteWsya2V5d29yZDogUixcbiAgICAgICAgICAgIGtleXdvcmQycmdiOiBVLFxuICAgICAgICAgICAga2V5d29yZDJoc2w6IGosXG4gICAgICAgICAgICBrZXl3b3JkMmhzdjogcSxcbiAgICAgICAgICAgIGtleXdvcmQyaHdiOiBZLFxuICAgICAgICAgICAga2V5d29yZDJjbXlrOiBYLFxuICAgICAgICAgICAga2V5d29yZDJsYWI6IEssXG4gICAgICAgICAgICBrZXl3b3JkMnh5ejogSixcbiAgICAgICAgICAgIHh5ejJyZ2I6IFYsXG4gICAgICAgICAgICB4eXoybGFiOiBMLFxuICAgICAgICAgICAgeHl6MmxjaDogTyxcbiAgICAgICAgICAgIGxhYjJ4eXo6IEIsXG4gICAgICAgICAgICBsYWIycmdiOiB6LFxuICAgICAgICAgICAgbGFiMmxjaDogVyxcbiAgICAgICAgICAgIGxjaDJsYWI6IE4sXG4gICAgICAgICAgICBsY2gyeHl6OiBFLFxuICAgICAgICAgICAgbGNoMnJnYjogSCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBaID0ge1xuICAgICAgICAgICAgICBhbGljZWJsdWU6IFsyNDAsIDI0OCwgMjU1XSxcbiAgICAgICAgICAgICAgYW50aXF1ZXdoaXRlOiBbMjUwLCAyMzUsIDIxNV0sXG4gICAgICAgICAgICAgIGFxdWE6IFswLCAyNTUsIDI1NV0sXG4gICAgICAgICAgICAgIGFxdWFtYXJpbmU6IFsxMjcsIDI1NSwgMjEyXSxcbiAgICAgICAgICAgICAgYXp1cmU6IFsyNDAsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgICAgYmVpZ2U6IFsyNDUsIDI0NSwgMjIwXSxcbiAgICAgICAgICAgICAgYmlzcXVlOiBbMjU1LCAyMjgsIDE5Nl0sXG4gICAgICAgICAgICAgIGJsYWNrOiBbMCwgMCwgMF0sXG4gICAgICAgICAgICAgIGJsYW5jaGVkYWxtb25kOiBbMjU1LCAyMzUsIDIwNV0sXG4gICAgICAgICAgICAgIGJsdWU6IFswLCAwLCAyNTVdLFxuICAgICAgICAgICAgICBibHVldmlvbGV0OiBbMTM4LCA0MywgMjI2XSxcbiAgICAgICAgICAgICAgYnJvd246IFsxNjUsIDQyLCA0Ml0sXG4gICAgICAgICAgICAgIGJ1cmx5d29vZDogWzIyMiwgMTg0LCAxMzVdLFxuICAgICAgICAgICAgICBjYWRldGJsdWU6IFs5NSwgMTU4LCAxNjBdLFxuICAgICAgICAgICAgICBjaGFydHJldXNlOiBbMTI3LCAyNTUsIDBdLFxuICAgICAgICAgICAgICBjaG9jb2xhdGU6IFsyMTAsIDEwNSwgMzBdLFxuICAgICAgICAgICAgICBjb3JhbDogWzI1NSwgMTI3LCA4MF0sXG4gICAgICAgICAgICAgIGNvcm5mbG93ZXJibHVlOiBbMTAwLCAxNDksIDIzN10sXG4gICAgICAgICAgICAgIGNvcm5zaWxrOiBbMjU1LCAyNDgsIDIyMF0sXG4gICAgICAgICAgICAgIGNyaW1zb246IFsyMjAsIDIwLCA2MF0sXG4gICAgICAgICAgICAgIGN5YW46IFswLCAyNTUsIDI1NV0sXG4gICAgICAgICAgICAgIGRhcmtibHVlOiBbMCwgMCwgMTM5XSxcbiAgICAgICAgICAgICAgZGFya2N5YW46IFswLCAxMzksIDEzOV0sXG4gICAgICAgICAgICAgIGRhcmtnb2xkZW5yb2Q6IFsxODQsIDEzNCwgMTFdLFxuICAgICAgICAgICAgICBkYXJrZ3JheTogWzE2OSwgMTY5LCAxNjldLFxuICAgICAgICAgICAgICBkYXJrZ3JlZW46IFswLCAxMDAsIDBdLFxuICAgICAgICAgICAgICBkYXJrZ3JleTogWzE2OSwgMTY5LCAxNjldLFxuICAgICAgICAgICAgICBkYXJra2hha2k6IFsxODksIDE4MywgMTA3XSxcbiAgICAgICAgICAgICAgZGFya21hZ2VudGE6IFsxMzksIDAsIDEzOV0sXG4gICAgICAgICAgICAgIGRhcmtvbGl2ZWdyZWVuOiBbODUsIDEwNywgNDddLFxuICAgICAgICAgICAgICBkYXJrb3JhbmdlOiBbMjU1LCAxNDAsIDBdLFxuICAgICAgICAgICAgICBkYXJrb3JjaGlkOiBbMTUzLCA1MCwgMjA0XSxcbiAgICAgICAgICAgICAgZGFya3JlZDogWzEzOSwgMCwgMF0sXG4gICAgICAgICAgICAgIGRhcmtzYWxtb246IFsyMzMsIDE1MCwgMTIyXSxcbiAgICAgICAgICAgICAgZGFya3NlYWdyZWVuOiBbMTQzLCAxODgsIDE0M10sXG4gICAgICAgICAgICAgIGRhcmtzbGF0ZWJsdWU6IFs3MiwgNjEsIDEzOV0sXG4gICAgICAgICAgICAgIGRhcmtzbGF0ZWdyYXk6IFs0NywgNzksIDc5XSxcbiAgICAgICAgICAgICAgZGFya3NsYXRlZ3JleTogWzQ3LCA3OSwgNzldLFxuICAgICAgICAgICAgICBkYXJrdHVycXVvaXNlOiBbMCwgMjA2LCAyMDldLFxuICAgICAgICAgICAgICBkYXJrdmlvbGV0OiBbMTQ4LCAwLCAyMTFdLFxuICAgICAgICAgICAgICBkZWVwcGluazogWzI1NSwgMjAsIDE0N10sXG4gICAgICAgICAgICAgIGRlZXBza3libHVlOiBbMCwgMTkxLCAyNTVdLFxuICAgICAgICAgICAgICBkaW1ncmF5OiBbMTA1LCAxMDUsIDEwNV0sXG4gICAgICAgICAgICAgIGRpbWdyZXk6IFsxMDUsIDEwNSwgMTA1XSxcbiAgICAgICAgICAgICAgZG9kZ2VyYmx1ZTogWzMwLCAxNDQsIDI1NV0sXG4gICAgICAgICAgICAgIGZpcmVicmljazogWzE3OCwgMzQsIDM0XSxcbiAgICAgICAgICAgICAgZmxvcmFsd2hpdGU6IFsyNTUsIDI1MCwgMjQwXSxcbiAgICAgICAgICAgICAgZm9yZXN0Z3JlZW46IFszNCwgMTM5LCAzNF0sXG4gICAgICAgICAgICAgIGZ1Y2hzaWE6IFsyNTUsIDAsIDI1NV0sXG4gICAgICAgICAgICAgIGdhaW5zYm9ybzogWzIyMCwgMjIwLCAyMjBdLFxuICAgICAgICAgICAgICBnaG9zdHdoaXRlOiBbMjQ4LCAyNDgsIDI1NV0sXG4gICAgICAgICAgICAgIGdvbGQ6IFsyNTUsIDIxNSwgMF0sXG4gICAgICAgICAgICAgIGdvbGRlbnJvZDogWzIxOCwgMTY1LCAzMl0sXG4gICAgICAgICAgICAgIGdyYXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgICAgICAgICAgICAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICAgICAgICAgICAgICBncmVlbnllbGxvdzogWzE3MywgMjU1LCA0N10sXG4gICAgICAgICAgICAgIGdyZXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgICAgICAgICAgICAgaG9uZXlkZXc6IFsyNDAsIDI1NSwgMjQwXSxcbiAgICAgICAgICAgICAgaG90cGluazogWzI1NSwgMTA1LCAxODBdLFxuICAgICAgICAgICAgICBpbmRpYW5yZWQ6IFsyMDUsIDkyLCA5Ml0sXG4gICAgICAgICAgICAgIGluZGlnbzogWzc1LCAwLCAxMzBdLFxuICAgICAgICAgICAgICBpdm9yeTogWzI1NSwgMjU1LCAyNDBdLFxuICAgICAgICAgICAgICBraGFraTogWzI0MCwgMjMwLCAxNDBdLFxuICAgICAgICAgICAgICBsYXZlbmRlcjogWzIzMCwgMjMwLCAyNTBdLFxuICAgICAgICAgICAgICBsYXZlbmRlcmJsdXNoOiBbMjU1LCAyNDAsIDI0NV0sXG4gICAgICAgICAgICAgIGxhd25ncmVlbjogWzEyNCwgMjUyLCAwXSxcbiAgICAgICAgICAgICAgbGVtb25jaGlmZm9uOiBbMjU1LCAyNTAsIDIwNV0sXG4gICAgICAgICAgICAgIGxpZ2h0Ymx1ZTogWzE3MywgMjE2LCAyMzBdLFxuICAgICAgICAgICAgICBsaWdodGNvcmFsOiBbMjQwLCAxMjgsIDEyOF0sXG4gICAgICAgICAgICAgIGxpZ2h0Y3lhbjogWzIyNCwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogWzI1MCwgMjUwLCAyMTBdLFxuICAgICAgICAgICAgICBsaWdodGdyYXk6IFsyMTEsIDIxMSwgMjExXSxcbiAgICAgICAgICAgICAgbGlnaHRncmVlbjogWzE0NCwgMjM4LCAxNDRdLFxuICAgICAgICAgICAgICBsaWdodGdyZXk6IFsyMTEsIDIxMSwgMjExXSxcbiAgICAgICAgICAgICAgbGlnaHRwaW5rOiBbMjU1LCAxODIsIDE5M10sXG4gICAgICAgICAgICAgIGxpZ2h0c2FsbW9uOiBbMjU1LCAxNjAsIDEyMl0sXG4gICAgICAgICAgICAgIGxpZ2h0c2VhZ3JlZW46IFszMiwgMTc4LCAxNzBdLFxuICAgICAgICAgICAgICBsaWdodHNreWJsdWU6IFsxMzUsIDIwNiwgMjUwXSxcbiAgICAgICAgICAgICAgbGlnaHRzbGF0ZWdyYXk6IFsxMTksIDEzNiwgMTUzXSxcbiAgICAgICAgICAgICAgbGlnaHRzbGF0ZWdyZXk6IFsxMTksIDEzNiwgMTUzXSxcbiAgICAgICAgICAgICAgbGlnaHRzdGVlbGJsdWU6IFsxNzYsIDE5NiwgMjIyXSxcbiAgICAgICAgICAgICAgbGlnaHR5ZWxsb3c6IFsyNTUsIDI1NSwgMjI0XSxcbiAgICAgICAgICAgICAgbGltZTogWzAsIDI1NSwgMF0sXG4gICAgICAgICAgICAgIGxpbWVncmVlbjogWzUwLCAyMDUsIDUwXSxcbiAgICAgICAgICAgICAgbGluZW46IFsyNTAsIDI0MCwgMjMwXSxcbiAgICAgICAgICAgICAgbWFnZW50YTogWzI1NSwgMCwgMjU1XSxcbiAgICAgICAgICAgICAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgICAgICAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogWzEwMiwgMjA1LCAxNzBdLFxuICAgICAgICAgICAgICBtZWRpdW1ibHVlOiBbMCwgMCwgMjA1XSxcbiAgICAgICAgICAgICAgbWVkaXVtb3JjaGlkOiBbMTg2LCA4NSwgMjExXSxcbiAgICAgICAgICAgICAgbWVkaXVtcHVycGxlOiBbMTQ3LCAxMTIsIDIxOV0sXG4gICAgICAgICAgICAgIG1lZGl1bXNlYWdyZWVuOiBbNjAsIDE3OSwgMTEzXSxcbiAgICAgICAgICAgICAgbWVkaXVtc2xhdGVibHVlOiBbMTIzLCAxMDQsIDIzOF0sXG4gICAgICAgICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBbMCwgMjUwLCAxNTRdLFxuICAgICAgICAgICAgICBtZWRpdW10dXJxdW9pc2U6IFs3MiwgMjA5LCAyMDRdLFxuICAgICAgICAgICAgICBtZWRpdW12aW9sZXRyZWQ6IFsxOTksIDIxLCAxMzNdLFxuICAgICAgICAgICAgICBtaWRuaWdodGJsdWU6IFsyNSwgMjUsIDExMl0sXG4gICAgICAgICAgICAgIG1pbnRjcmVhbTogWzI0NSwgMjU1LCAyNTBdLFxuICAgICAgICAgICAgICBtaXN0eXJvc2U6IFsyNTUsIDIyOCwgMjI1XSxcbiAgICAgICAgICAgICAgbW9jY2FzaW46IFsyNTUsIDIyOCwgMTgxXSxcbiAgICAgICAgICAgICAgbmF2YWpvd2hpdGU6IFsyNTUsIDIyMiwgMTczXSxcbiAgICAgICAgICAgICAgbmF2eTogWzAsIDAsIDEyOF0sXG4gICAgICAgICAgICAgIG9sZGxhY2U6IFsyNTMsIDI0NSwgMjMwXSxcbiAgICAgICAgICAgICAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gICAgICAgICAgICAgIG9saXZlZHJhYjogWzEwNywgMTQyLCAzNV0sXG4gICAgICAgICAgICAgIG9yYW5nZTogWzI1NSwgMTY1LCAwXSxcbiAgICAgICAgICAgICAgb3JhbmdlcmVkOiBbMjU1LCA2OSwgMF0sXG4gICAgICAgICAgICAgIG9yY2hpZDogWzIxOCwgMTEyLCAyMTRdLFxuICAgICAgICAgICAgICBwYWxlZ29sZGVucm9kOiBbMjM4LCAyMzIsIDE3MF0sXG4gICAgICAgICAgICAgIHBhbGVncmVlbjogWzE1MiwgMjUxLCAxNTJdLFxuICAgICAgICAgICAgICBwYWxldHVycXVvaXNlOiBbMTc1LCAyMzgsIDIzOF0sXG4gICAgICAgICAgICAgIHBhbGV2aW9sZXRyZWQ6IFsyMTksIDExMiwgMTQ3XSxcbiAgICAgICAgICAgICAgcGFwYXlhd2hpcDogWzI1NSwgMjM5LCAyMTNdLFxuICAgICAgICAgICAgICBwZWFjaHB1ZmY6IFsyNTUsIDIxOCwgMTg1XSxcbiAgICAgICAgICAgICAgcGVydTogWzIwNSwgMTMzLCA2M10sXG4gICAgICAgICAgICAgIHBpbms6IFsyNTUsIDE5MiwgMjAzXSxcbiAgICAgICAgICAgICAgcGx1bTogWzIyMSwgMTYwLCAyMjFdLFxuICAgICAgICAgICAgICBwb3dkZXJibHVlOiBbMTc2LCAyMjQsIDIzMF0sXG4gICAgICAgICAgICAgIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgICAgICAgICAgICAgcmViZWNjYXB1cnBsZTogWzEwMiwgNTEsIDE1M10sXG4gICAgICAgICAgICAgIHJlZDogWzI1NSwgMCwgMF0sXG4gICAgICAgICAgICAgIHJvc3licm93bjogWzE4OCwgMTQzLCAxNDNdLFxuICAgICAgICAgICAgICByb3lhbGJsdWU6IFs2NSwgMTA1LCAyMjVdLFxuICAgICAgICAgICAgICBzYWRkbGVicm93bjogWzEzOSwgNjksIDE5XSxcbiAgICAgICAgICAgICAgc2FsbW9uOiBbMjUwLCAxMjgsIDExNF0sXG4gICAgICAgICAgICAgIHNhbmR5YnJvd246IFsyNDQsIDE2NCwgOTZdLFxuICAgICAgICAgICAgICBzZWFncmVlbjogWzQ2LCAxMzksIDg3XSxcbiAgICAgICAgICAgICAgc2Vhc2hlbGw6IFsyNTUsIDI0NSwgMjM4XSxcbiAgICAgICAgICAgICAgc2llbm5hOiBbMTYwLCA4MiwgNDVdLFxuICAgICAgICAgICAgICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgICAgICAgICAgICAgc2t5Ymx1ZTogWzEzNSwgMjA2LCAyMzVdLFxuICAgICAgICAgICAgICBzbGF0ZWJsdWU6IFsxMDYsIDkwLCAyMDVdLFxuICAgICAgICAgICAgICBzbGF0ZWdyYXk6IFsxMTIsIDEyOCwgMTQ0XSxcbiAgICAgICAgICAgICAgc2xhdGVncmV5OiBbMTEyLCAxMjgsIDE0NF0sXG4gICAgICAgICAgICAgIHNub3c6IFsyNTUsIDI1MCwgMjUwXSxcbiAgICAgICAgICAgICAgc3ByaW5nZ3JlZW46IFswLCAyNTUsIDEyN10sXG4gICAgICAgICAgICAgIHN0ZWVsYmx1ZTogWzcwLCAxMzAsIDE4MF0sXG4gICAgICAgICAgICAgIHRhbjogWzIxMCwgMTgwLCAxNDBdLFxuICAgICAgICAgICAgICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgICB0aGlzdGxlOiBbMjE2LCAxOTEsIDIxNl0sXG4gICAgICAgICAgICAgIHRvbWF0bzogWzI1NSwgOTksIDcxXSxcbiAgICAgICAgICAgICAgdHVycXVvaXNlOiBbNjQsIDIyNCwgMjA4XSxcbiAgICAgICAgICAgICAgdmlvbGV0OiBbMjM4LCAxMzAsIDIzOF0sXG4gICAgICAgICAgICAgIHdoZWF0OiBbMjQ1LCAyMjIsIDE3OV0sXG4gICAgICAgICAgICAgIHdoaXRlOiBbMjU1LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICAgIHdoaXRlc21va2U6IFsyNDUsIDI0NSwgMjQ1XSxcbiAgICAgICAgICAgICAgeWVsbG93OiBbMjU1LCAyNTUsIDBdLFxuICAgICAgICAgICAgICB5ZWxsb3dncmVlbjogWzE1NCwgMjA1LCA1MF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRyA9IHt9O1xuICAgICAgICAgIGZvciAodmFyIFEgaW4gWikgR1tKU09OLnN0cmluZ2lmeShaW1FdKV0gPSBRO1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA1OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgdmFyIGkgPSB0KDQpLFxuICAgICAgICAgICAgbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIGZvciAodmFyIG8gaW4gaSkge1xuICAgICAgICAgICAgbltvICsgXCJSYXdcIl0gPSAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgJiZcbiAgICAgICAgICAgICAgICAgICAgKGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSxcbiAgICAgICAgICAgICAgICAgIGlbdF0oZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkobyk7XG4gICAgICAgICAgICB2YXIgciA9IC8oXFx3KykyKFxcdyspLy5leGVjKG8pLFxuICAgICAgICAgICAgICBsID0gclsxXSxcbiAgICAgICAgICAgICAgcyA9IHJbMl07XG4gICAgICAgICAgICAobltsXSA9IG5bbF0gfHwge30pLFxuICAgICAgICAgICAgICAobltsXVtzXSA9IG5bb10gPVxuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGlbdF0oZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBhIHx8IHZvaWQgMCA9PT0gYSkgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgYS5sZW5ndGg7IG4rKykgYVtuXSA9IE1hdGgucm91bmQoYVtuXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KShvKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jb252cyA9IHt9O1xuICAgICAgICAgIH07XG4gICAgICAgICAgKGQucHJvdG90eXBlLnJvdXRlU3BhY2UgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgdmFyIGEgPSBlWzBdO1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gYVxuICAgICAgICAgICAgICA/IHRoaXMuZ2V0VmFsdWVzKHQpXG4gICAgICAgICAgICAgIDogKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEgJiYgKGEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSksXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXModCwgYSkpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKGQucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKHRoaXMuc3BhY2UgPSB0KSwgKHRoaXMuY29udnMgPSB7fSksICh0aGlzLmNvbnZzW3RdID0gZSksIHRoaXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKGQucHJvdG90eXBlLmdldFZhbHVlcyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdGhpcy5jb252c1t0XTtcbiAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLnNwYWNlLFxuICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuY29udnNbYV07XG4gICAgICAgICAgICAgICAgKGUgPSBuW2FdW3RdKGkpKSwgKHRoaXMuY29udnNbdF0gPSBlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgW1wicmdiXCIsIFwiaHNsXCIsIFwiaHN2XCIsIFwiY215a1wiLCBcImtleXdvcmRcIl0uZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICBkLnByb3RvdHlwZVt0XSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm91dGVTcGFjZSh0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoZS5leHBvcnRzID0gbik7XG4gICAgICAgIH0sXG4gICAgICAgIHsgNDogNCB9LFxuICAgICAgXSxcbiAgICAgIDY6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBlLmV4cG9ydHMgPSB7XG4gICAgICAgICAgICBhbGljZWJsdWU6IFsyNDAsIDI0OCwgMjU1XSxcbiAgICAgICAgICAgIGFudGlxdWV3aGl0ZTogWzI1MCwgMjM1LCAyMTVdLFxuICAgICAgICAgICAgYXF1YTogWzAsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgIGFxdWFtYXJpbmU6IFsxMjcsIDI1NSwgMjEyXSxcbiAgICAgICAgICAgIGF6dXJlOiBbMjQwLCAyNTUsIDI1NV0sXG4gICAgICAgICAgICBiZWlnZTogWzI0NSwgMjQ1LCAyMjBdLFxuICAgICAgICAgICAgYmlzcXVlOiBbMjU1LCAyMjgsIDE5Nl0sXG4gICAgICAgICAgICBibGFjazogWzAsIDAsIDBdLFxuICAgICAgICAgICAgYmxhbmNoZWRhbG1vbmQ6IFsyNTUsIDIzNSwgMjA1XSxcbiAgICAgICAgICAgIGJsdWU6IFswLCAwLCAyNTVdLFxuICAgICAgICAgICAgYmx1ZXZpb2xldDogWzEzOCwgNDMsIDIyNl0sXG4gICAgICAgICAgICBicm93bjogWzE2NSwgNDIsIDQyXSxcbiAgICAgICAgICAgIGJ1cmx5d29vZDogWzIyMiwgMTg0LCAxMzVdLFxuICAgICAgICAgICAgY2FkZXRibHVlOiBbOTUsIDE1OCwgMTYwXSxcbiAgICAgICAgICAgIGNoYXJ0cmV1c2U6IFsxMjcsIDI1NSwgMF0sXG4gICAgICAgICAgICBjaG9jb2xhdGU6IFsyMTAsIDEwNSwgMzBdLFxuICAgICAgICAgICAgY29yYWw6IFsyNTUsIDEyNywgODBdLFxuICAgICAgICAgICAgY29ybmZsb3dlcmJsdWU6IFsxMDAsIDE0OSwgMjM3XSxcbiAgICAgICAgICAgIGNvcm5zaWxrOiBbMjU1LCAyNDgsIDIyMF0sXG4gICAgICAgICAgICBjcmltc29uOiBbMjIwLCAyMCwgNjBdLFxuICAgICAgICAgICAgY3lhbjogWzAsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgIGRhcmtibHVlOiBbMCwgMCwgMTM5XSxcbiAgICAgICAgICAgIGRhcmtjeWFuOiBbMCwgMTM5LCAxMzldLFxuICAgICAgICAgICAgZGFya2dvbGRlbnJvZDogWzE4NCwgMTM0LCAxMV0sXG4gICAgICAgICAgICBkYXJrZ3JheTogWzE2OSwgMTY5LCAxNjldLFxuICAgICAgICAgICAgZGFya2dyZWVuOiBbMCwgMTAwLCAwXSxcbiAgICAgICAgICAgIGRhcmtncmV5OiBbMTY5LCAxNjksIDE2OV0sXG4gICAgICAgICAgICBkYXJra2hha2k6IFsxODksIDE4MywgMTA3XSxcbiAgICAgICAgICAgIGRhcmttYWdlbnRhOiBbMTM5LCAwLCAxMzldLFxuICAgICAgICAgICAgZGFya29saXZlZ3JlZW46IFs4NSwgMTA3LCA0N10sXG4gICAgICAgICAgICBkYXJrb3JhbmdlOiBbMjU1LCAxNDAsIDBdLFxuICAgICAgICAgICAgZGFya29yY2hpZDogWzE1MywgNTAsIDIwNF0sXG4gICAgICAgICAgICBkYXJrcmVkOiBbMTM5LCAwLCAwXSxcbiAgICAgICAgICAgIGRhcmtzYWxtb246IFsyMzMsIDE1MCwgMTIyXSxcbiAgICAgICAgICAgIGRhcmtzZWFncmVlbjogWzE0MywgMTg4LCAxNDNdLFxuICAgICAgICAgICAgZGFya3NsYXRlYmx1ZTogWzcyLCA2MSwgMTM5XSxcbiAgICAgICAgICAgIGRhcmtzbGF0ZWdyYXk6IFs0NywgNzksIDc5XSxcbiAgICAgICAgICAgIGRhcmtzbGF0ZWdyZXk6IFs0NywgNzksIDc5XSxcbiAgICAgICAgICAgIGRhcmt0dXJxdW9pc2U6IFswLCAyMDYsIDIwOV0sXG4gICAgICAgICAgICBkYXJrdmlvbGV0OiBbMTQ4LCAwLCAyMTFdLFxuICAgICAgICAgICAgZGVlcHBpbms6IFsyNTUsIDIwLCAxNDddLFxuICAgICAgICAgICAgZGVlcHNreWJsdWU6IFswLCAxOTEsIDI1NV0sXG4gICAgICAgICAgICBkaW1ncmF5OiBbMTA1LCAxMDUsIDEwNV0sXG4gICAgICAgICAgICBkaW1ncmV5OiBbMTA1LCAxMDUsIDEwNV0sXG4gICAgICAgICAgICBkb2RnZXJibHVlOiBbMzAsIDE0NCwgMjU1XSxcbiAgICAgICAgICAgIGZpcmVicmljazogWzE3OCwgMzQsIDM0XSxcbiAgICAgICAgICAgIGZsb3JhbHdoaXRlOiBbMjU1LCAyNTAsIDI0MF0sXG4gICAgICAgICAgICBmb3Jlc3RncmVlbjogWzM0LCAxMzksIDM0XSxcbiAgICAgICAgICAgIGZ1Y2hzaWE6IFsyNTUsIDAsIDI1NV0sXG4gICAgICAgICAgICBnYWluc2Jvcm86IFsyMjAsIDIyMCwgMjIwXSxcbiAgICAgICAgICAgIGdob3N0d2hpdGU6IFsyNDgsIDI0OCwgMjU1XSxcbiAgICAgICAgICAgIGdvbGQ6IFsyNTUsIDIxNSwgMF0sXG4gICAgICAgICAgICBnb2xkZW5yb2Q6IFsyMTgsIDE2NSwgMzJdLFxuICAgICAgICAgICAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICAgICAgICAgICAgZ3JlZW55ZWxsb3c6IFsxNzMsIDI1NSwgNDddLFxuICAgICAgICAgICAgZ3JleTogWzEyOCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgaG9uZXlkZXc6IFsyNDAsIDI1NSwgMjQwXSxcbiAgICAgICAgICAgIGhvdHBpbms6IFsyNTUsIDEwNSwgMTgwXSxcbiAgICAgICAgICAgIGluZGlhbnJlZDogWzIwNSwgOTIsIDkyXSxcbiAgICAgICAgICAgIGluZGlnbzogWzc1LCAwLCAxMzBdLFxuICAgICAgICAgICAgaXZvcnk6IFsyNTUsIDI1NSwgMjQwXSxcbiAgICAgICAgICAgIGtoYWtpOiBbMjQwLCAyMzAsIDE0MF0sXG4gICAgICAgICAgICBsYXZlbmRlcjogWzIzMCwgMjMwLCAyNTBdLFxuICAgICAgICAgICAgbGF2ZW5kZXJibHVzaDogWzI1NSwgMjQwLCAyNDVdLFxuICAgICAgICAgICAgbGF3bmdyZWVuOiBbMTI0LCAyNTIsIDBdLFxuICAgICAgICAgICAgbGVtb25jaGlmZm9uOiBbMjU1LCAyNTAsIDIwNV0sXG4gICAgICAgICAgICBsaWdodGJsdWU6IFsxNzMsIDIxNiwgMjMwXSxcbiAgICAgICAgICAgIGxpZ2h0Y29yYWw6IFsyNDAsIDEyOCwgMTI4XSxcbiAgICAgICAgICAgIGxpZ2h0Y3lhbjogWzIyNCwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFsyNTAsIDI1MCwgMjEwXSxcbiAgICAgICAgICAgIGxpZ2h0Z3JheTogWzIxMSwgMjExLCAyMTFdLFxuICAgICAgICAgICAgbGlnaHRncmVlbjogWzE0NCwgMjM4LCAxNDRdLFxuICAgICAgICAgICAgbGlnaHRncmV5OiBbMjExLCAyMTEsIDIxMV0sXG4gICAgICAgICAgICBsaWdodHBpbms6IFsyNTUsIDE4MiwgMTkzXSxcbiAgICAgICAgICAgIGxpZ2h0c2FsbW9uOiBbMjU1LCAxNjAsIDEyMl0sXG4gICAgICAgICAgICBsaWdodHNlYWdyZWVuOiBbMzIsIDE3OCwgMTcwXSxcbiAgICAgICAgICAgIGxpZ2h0c2t5Ymx1ZTogWzEzNSwgMjA2LCAyNTBdLFxuICAgICAgICAgICAgbGlnaHRzbGF0ZWdyYXk6IFsxMTksIDEzNiwgMTUzXSxcbiAgICAgICAgICAgIGxpZ2h0c2xhdGVncmV5OiBbMTE5LCAxMzYsIDE1M10sXG4gICAgICAgICAgICBsaWdodHN0ZWVsYmx1ZTogWzE3NiwgMTk2LCAyMjJdLFxuICAgICAgICAgICAgbGlnaHR5ZWxsb3c6IFsyNTUsIDI1NSwgMjI0XSxcbiAgICAgICAgICAgIGxpbWU6IFswLCAyNTUsIDBdLFxuICAgICAgICAgICAgbGltZWdyZWVuOiBbNTAsIDIwNSwgNTBdLFxuICAgICAgICAgICAgbGluZW46IFsyNTAsIDI0MCwgMjMwXSxcbiAgICAgICAgICAgIG1hZ2VudGE6IFsyNTUsIDAsIDI1NV0sXG4gICAgICAgICAgICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICAgICAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogWzEwMiwgMjA1LCAxNzBdLFxuICAgICAgICAgICAgbWVkaXVtYmx1ZTogWzAsIDAsIDIwNV0sXG4gICAgICAgICAgICBtZWRpdW1vcmNoaWQ6IFsxODYsIDg1LCAyMTFdLFxuICAgICAgICAgICAgbWVkaXVtcHVycGxlOiBbMTQ3LCAxMTIsIDIxOV0sXG4gICAgICAgICAgICBtZWRpdW1zZWFncmVlbjogWzYwLCAxNzksIDExM10sXG4gICAgICAgICAgICBtZWRpdW1zbGF0ZWJsdWU6IFsxMjMsIDEwNCwgMjM4XSxcbiAgICAgICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBbMCwgMjUwLCAxNTRdLFxuICAgICAgICAgICAgbWVkaXVtdHVycXVvaXNlOiBbNzIsIDIwOSwgMjA0XSxcbiAgICAgICAgICAgIG1lZGl1bXZpb2xldHJlZDogWzE5OSwgMjEsIDEzM10sXG4gICAgICAgICAgICBtaWRuaWdodGJsdWU6IFsyNSwgMjUsIDExMl0sXG4gICAgICAgICAgICBtaW50Y3JlYW06IFsyNDUsIDI1NSwgMjUwXSxcbiAgICAgICAgICAgIG1pc3R5cm9zZTogWzI1NSwgMjI4LCAyMjVdLFxuICAgICAgICAgICAgbW9jY2FzaW46IFsyNTUsIDIyOCwgMTgxXSxcbiAgICAgICAgICAgIG5hdmFqb3doaXRlOiBbMjU1LCAyMjIsIDE3M10sXG4gICAgICAgICAgICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgICAgICAgICAgIG9sZGxhY2U6IFsyNTMsIDI0NSwgMjMwXSxcbiAgICAgICAgICAgIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICAgICAgICAgICAgb2xpdmVkcmFiOiBbMTA3LCAxNDIsIDM1XSxcbiAgICAgICAgICAgIG9yYW5nZTogWzI1NSwgMTY1LCAwXSxcbiAgICAgICAgICAgIG9yYW5nZXJlZDogWzI1NSwgNjksIDBdLFxuICAgICAgICAgICAgb3JjaGlkOiBbMjE4LCAxMTIsIDIxNF0sXG4gICAgICAgICAgICBwYWxlZ29sZGVucm9kOiBbMjM4LCAyMzIsIDE3MF0sXG4gICAgICAgICAgICBwYWxlZ3JlZW46IFsxNTIsIDI1MSwgMTUyXSxcbiAgICAgICAgICAgIHBhbGV0dXJxdW9pc2U6IFsxNzUsIDIzOCwgMjM4XSxcbiAgICAgICAgICAgIHBhbGV2aW9sZXRyZWQ6IFsyMTksIDExMiwgMTQ3XSxcbiAgICAgICAgICAgIHBhcGF5YXdoaXA6IFsyNTUsIDIzOSwgMjEzXSxcbiAgICAgICAgICAgIHBlYWNocHVmZjogWzI1NSwgMjE4LCAxODVdLFxuICAgICAgICAgICAgcGVydTogWzIwNSwgMTMzLCA2M10sXG4gICAgICAgICAgICBwaW5rOiBbMjU1LCAxOTIsIDIwM10sXG4gICAgICAgICAgICBwbHVtOiBbMjIxLCAxNjAsIDIyMV0sXG4gICAgICAgICAgICBwb3dkZXJibHVlOiBbMTc2LCAyMjQsIDIzMF0sXG4gICAgICAgICAgICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gICAgICAgICAgICByZWJlY2NhcHVycGxlOiBbMTAyLCA1MSwgMTUzXSxcbiAgICAgICAgICAgIHJlZDogWzI1NSwgMCwgMF0sXG4gICAgICAgICAgICByb3N5YnJvd246IFsxODgsIDE0MywgMTQzXSxcbiAgICAgICAgICAgIHJveWFsYmx1ZTogWzY1LCAxMDUsIDIyNV0sXG4gICAgICAgICAgICBzYWRkbGVicm93bjogWzEzOSwgNjksIDE5XSxcbiAgICAgICAgICAgIHNhbG1vbjogWzI1MCwgMTI4LCAxMTRdLFxuICAgICAgICAgICAgc2FuZHlicm93bjogWzI0NCwgMTY0LCA5Nl0sXG4gICAgICAgICAgICBzZWFncmVlbjogWzQ2LCAxMzksIDg3XSxcbiAgICAgICAgICAgIHNlYXNoZWxsOiBbMjU1LCAyNDUsIDIzOF0sXG4gICAgICAgICAgICBzaWVubmE6IFsxNjAsIDgyLCA0NV0sXG4gICAgICAgICAgICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgICAgICAgICAgIHNreWJsdWU6IFsxMzUsIDIwNiwgMjM1XSxcbiAgICAgICAgICAgIHNsYXRlYmx1ZTogWzEwNiwgOTAsIDIwNV0sXG4gICAgICAgICAgICBzbGF0ZWdyYXk6IFsxMTIsIDEyOCwgMTQ0XSxcbiAgICAgICAgICAgIHNsYXRlZ3JleTogWzExMiwgMTI4LCAxNDRdLFxuICAgICAgICAgICAgc25vdzogWzI1NSwgMjUwLCAyNTBdLFxuICAgICAgICAgICAgc3ByaW5nZ3JlZW46IFswLCAyNTUsIDEyN10sXG4gICAgICAgICAgICBzdGVlbGJsdWU6IFs3MCwgMTMwLCAxODBdLFxuICAgICAgICAgICAgdGFuOiBbMjEwLCAxODAsIDE0MF0sXG4gICAgICAgICAgICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICAgICAgICAgICAgdGhpc3RsZTogWzIxNiwgMTkxLCAyMTZdLFxuICAgICAgICAgICAgdG9tYXRvOiBbMjU1LCA5OSwgNzFdLFxuICAgICAgICAgICAgdHVycXVvaXNlOiBbNjQsIDIyNCwgMjA4XSxcbiAgICAgICAgICAgIHZpb2xldDogWzIzOCwgMTMwLCAyMzhdLFxuICAgICAgICAgICAgd2hlYXQ6IFsyNDUsIDIyMiwgMTc5XSxcbiAgICAgICAgICAgIHdoaXRlOiBbMjU1LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICB3aGl0ZXNtb2tlOiBbMjQ1LCAyNDUsIDI0NV0sXG4gICAgICAgICAgICB5ZWxsb3c6IFsyNTUsIDI1NSwgMF0sXG4gICAgICAgICAgICB5ZWxsb3dncmVlbjogWzE1NCwgMjA1LCA1MF0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgNzogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIHZhciBpID0gdCgyOCkoKTtcbiAgICAgICAgICB0KDI2KShpKSxcbiAgICAgICAgICAgIHQoMjIpKGkpLFxuICAgICAgICAgICAgdCgyNSkoaSksXG4gICAgICAgICAgICB0KDIxKShpKSxcbiAgICAgICAgICAgIHQoMjMpKGkpLFxuICAgICAgICAgICAgdCgyNCkoaSksXG4gICAgICAgICAgICB0KDI5KShpKSxcbiAgICAgICAgICAgIHQoMzMpKGkpLFxuICAgICAgICAgICAgdCgzMSkoaSksXG4gICAgICAgICAgICB0KDM0KShpKSxcbiAgICAgICAgICAgIHQoMzIpKGkpLFxuICAgICAgICAgICAgdCgzNSkoaSksXG4gICAgICAgICAgICB0KDMwKShpKSxcbiAgICAgICAgICAgIHQoMjcpKGkpLFxuICAgICAgICAgICAgdCgzNikoaSksXG4gICAgICAgICAgICB0KDM3KShpKSxcbiAgICAgICAgICAgIHQoMzgpKGkpLFxuICAgICAgICAgICAgdCgzOSkoaSksXG4gICAgICAgICAgICB0KDQwKShpKSxcbiAgICAgICAgICAgIHQoNDMpKGkpLFxuICAgICAgICAgICAgdCg0MSkoaSksXG4gICAgICAgICAgICB0KDQyKShpKSxcbiAgICAgICAgICAgIHQoNDQpKGkpLFxuICAgICAgICAgICAgdCg0NSkoaSksXG4gICAgICAgICAgICB0KDQ2KShpKSxcbiAgICAgICAgICAgIHQoMTUpKGkpLFxuICAgICAgICAgICAgdCgxNikoaSksXG4gICAgICAgICAgICB0KDE3KShpKSxcbiAgICAgICAgICAgIHQoMTgpKGkpLFxuICAgICAgICAgICAgdCgxOSkoaSksXG4gICAgICAgICAgICB0KDIwKShpKSxcbiAgICAgICAgICAgIHQoOCkoaSksXG4gICAgICAgICAgICB0KDkpKGkpLFxuICAgICAgICAgICAgdCgxMCkoaSksXG4gICAgICAgICAgICB0KDExKShpKSxcbiAgICAgICAgICAgIHQoMTIpKGkpLFxuICAgICAgICAgICAgdCgxMykoaSksXG4gICAgICAgICAgICB0KDE0KShpKSxcbiAgICAgICAgICAgICh3aW5kb3cuQ2hhcnQgPSBlLmV4cG9ydHMgPSBpKTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIDEwOiAxMCxcbiAgICAgICAgICAxMTogMTEsXG4gICAgICAgICAgMTI6IDEyLFxuICAgICAgICAgIDEzOiAxMyxcbiAgICAgICAgICAxNDogMTQsXG4gICAgICAgICAgMTU6IDE1LFxuICAgICAgICAgIDE2OiAxNixcbiAgICAgICAgICAxNzogMTcsXG4gICAgICAgICAgMTg6IDE4LFxuICAgICAgICAgIDE5OiAxOSxcbiAgICAgICAgICAyMDogMjAsXG4gICAgICAgICAgMjE6IDIxLFxuICAgICAgICAgIDIyOiAyMixcbiAgICAgICAgICAyMzogMjMsXG4gICAgICAgICAgMjQ6IDI0LFxuICAgICAgICAgIDI1OiAyNSxcbiAgICAgICAgICAyNjogMjYsXG4gICAgICAgICAgMjc6IDI3LFxuICAgICAgICAgIDI4OiAyOCxcbiAgICAgICAgICAyOTogMjksXG4gICAgICAgICAgMzA6IDMwLFxuICAgICAgICAgIDMxOiAzMSxcbiAgICAgICAgICAzMjogMzIsXG4gICAgICAgICAgMzM6IDMzLFxuICAgICAgICAgIDM0OiAzNCxcbiAgICAgICAgICAzNTogMzUsXG4gICAgICAgICAgMzY6IDM2LFxuICAgICAgICAgIDM3OiAzNyxcbiAgICAgICAgICAzODogMzgsXG4gICAgICAgICAgMzk6IDM5LFxuICAgICAgICAgIDQwOiA0MCxcbiAgICAgICAgICA0MTogNDEsXG4gICAgICAgICAgNDI6IDQyLFxuICAgICAgICAgIDQzOiA0MyxcbiAgICAgICAgICA0NDogNDQsXG4gICAgICAgICAgNDU6IDQ1LFxuICAgICAgICAgIDQ2OiA0NixcbiAgICAgICAgICA4OiA4LFxuICAgICAgICAgIDk6IDksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgODogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB0LkJhciA9IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoYS50eXBlID0gXCJiYXJcIiksIG5ldyB0KGUsIGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA5OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHQuQnViYmxlID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChhLnR5cGUgPSBcImJ1YmJsZVwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDEwOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHQuRG91Z2hudXQgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICByZXR1cm4gKGEudHlwZSA9IFwiZG91Z2hudXRcIiksIG5ldyB0KGUsIGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAxMTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB0LkxpbmUgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICByZXR1cm4gKGEudHlwZSA9IFwibGluZVwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDEyOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHQuUG9sYXJBcmVhID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChhLnR5cGUgPSBcInBvbGFyQXJlYVwiKSwgbmV3IHQoZSwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDEzOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHQuUmFkYXIgPSBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICByZXR1cm4gKGEudHlwZSA9IFwicmFkYXJcIiksIG5ldyB0KGUsIGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAxNDogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHtcbiAgICAgICAgICAgICAgaG92ZXI6IHsgbW9kZTogXCJzaW5nbGVcIiB9LFxuICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICB4QXhlczogW3sgdHlwZTogXCJsaW5lYXJcIiwgcG9zaXRpb246IFwiYm90dG9tXCIsIGlkOiBcIngtYXhpcy0xXCIgfV0sXG4gICAgICAgICAgICAgICAgeUF4ZXM6IFt7IHR5cGU6IFwibGluZWFyXCIsIHBvc2l0aW9uOiBcImxlZnRcIiwgaWQ6IFwieS1heGlzLTFcIiB9XSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIoXCIgKyB0LnhMYWJlbCArIFwiLCBcIiArIHQueUxhYmVsICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMuc2NhdHRlciA9IGUpLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycy5zY2F0dGVyID0gdC5jb250cm9sbGVycy5saW5lKSxcbiAgICAgICAgICAgICAgKHQuU2NhdHRlciA9IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhLnR5cGUgPSBcInNjYXR0ZXJcIiksIG5ldyB0KGUsIGEpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAxNTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycztcbiAgICAgICAgICAgICh0LmRlZmF1bHRzLmJhciA9IHtcbiAgICAgICAgICAgICAgaG92ZXI6IHsgbW9kZTogXCJsYWJlbFwiIH0sXG4gICAgICAgICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgICAgIHhBeGVzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2F0ZWdvcnlcIixcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgICAgICAgICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7IG9mZnNldEdyaWRMaW5lczogITAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB5QXhlczogW3sgdHlwZTogXCJsaW5lYXJcIiB9XSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycy5iYXIgPSB0LkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiB0LmVsZW1lbnRzLlJlY3RhbmdsZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIGUsIGEpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5nZXRNZXRhKCkuYmFyID0gITApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QmFyQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IDA7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goXG4gICAgICAgICAgICAgICAgICAgICAgdC5jaGFydC5kYXRhLmRhdGFzZXRzLFxuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLmJhciAmJiB0LmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkgJiYgKythO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICBhLmdldE1ldGEoKS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgIGEudXBkYXRlRWxlbWVudChlLCBpLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBuLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG4uZ2V0U2NhbGVGb3JJZChvLnhBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBsID0gbi5nZXRTY2FsZUZvcklkKG8ueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBsLmdldEJhc2VQaXhlbCgpLFxuICAgICAgICAgICAgICAgICAgICBkID0gbi5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnJlY3RhbmdsZSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBjID0gbi5nZXREYXRhc2V0KCk7XG4gICAgICAgICAgICAgICAgICAodC5feFNjYWxlID0gciksXG4gICAgICAgICAgICAgICAgICAgICh0Ll95U2NhbGUgPSBsKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX2RhdGFzZXRJbmRleCA9IG4uaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAodC5faW5kZXggPSBhKTtcbiAgICAgICAgICAgICAgICAgIHZhciBoID0gbi5nZXRSdWxlcihhKTtcbiAgICAgICAgICAgICAgICAgICh0Ll9tb2RlbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogbi5jYWxjdWxhdGVCYXJYKGEsIG4uaW5kZXgsIGgpLFxuICAgICAgICAgICAgICAgICAgICB5OiBpID8gcyA6IG4uY2FsY3VsYXRlQmFyWShhLCBuLmluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG4uY2hhcnQuZGF0YS5sYWJlbHNbYV0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXRMYWJlbDogYy5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgYmFzZTogaSA/IHMgOiBuLmNhbGN1bGF0ZUJhckJhc2Uobi5pbmRleCwgYSksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBuLmNhbGN1bGF0ZUJhcldpZHRoKGgpLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHUuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyB1LmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyU2tpcHBlZDogdS5ib3JkZXJTa2lwcGVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB1LmJvcmRlclNraXBwZWRcbiAgICAgICAgICAgICAgICAgICAgICA6IGQuYm9yZGVyU2tpcHBlZCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHUuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IHUuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogdS5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gdS5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdC5waXZvdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQmFyQmFzZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5nZXRTY2FsZUZvcklkKGkueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSAwO1xuICAgICAgICAgICAgICAgICAgaWYgKG4ub3B0aW9ucy5zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBhLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHIuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBOdW1iZXIobFt0XS5kYXRhW2VdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIHQgPiBkO1xuICAgICAgICAgICAgICAgICAgICAgIGQrK1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGxbZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gci5nZXREYXRhc2V0TWV0YShkKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmJhciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgYy55QXhpc0lEID09PSBuLmlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICByLmlzRGF0YXNldFZpc2libGUoZClcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gTnVtYmVyKHUuZGF0YVtlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvICs9IDAgPiBzID8gTWF0aC5taW4oaCwgMCkgOiBNYXRoLm1heChoLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZ2V0UGl4ZWxGb3JWYWx1ZShvKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBuLmdldEJhc2VQaXhlbCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UnVsZXI6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEuZ2V0U2NhbGVGb3JJZChpLnhBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBvID0gYS5nZXRCYXJDb3VudCgpO1xuICAgICAgICAgICAgICAgICAgZSA9XG4gICAgICAgICAgICAgICAgICAgIFwiY2F0ZWdvcnlcIiA9PT0gbi5vcHRpb25zLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uZ2V0UGl4ZWxGb3JUaWNrKHQgKyAxKSAtIG4uZ2V0UGl4ZWxGb3JUaWNrKHQpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLndpZHRoIC8gbi50aWNrcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICB2YXIgciA9IGUgKiBuLm9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgICAgICBsID0gKGUgLSBlICogbi5vcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZSkgLyAyLFxuICAgICAgICAgICAgICAgICAgICBzID0gciAvIG87XG4gICAgICAgICAgICAgICAgICBpZiAobi50aWNrcy5sZW5ndGggIT09IGEuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gbi50aWNrcy5sZW5ndGggLyBhLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcyAqPSBkO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHUgPSBzICogbi5vcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBzIC0gcyAqIG4ub3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldENvdW50OiBvLFxuICAgICAgICAgICAgICAgICAgICB0aWNrV2lkdGg6IGUsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5V2lkdGg6IHIsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5U3BhY2luZzogbCxcbiAgICAgICAgICAgICAgICAgICAgZnVsbEJhcldpZHRoOiBzLFxuICAgICAgICAgICAgICAgICAgICBiYXJXaWR0aDogdSxcbiAgICAgICAgICAgICAgICAgICAgYmFyU3BhY2luZzogYyxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVCYXJXaWR0aDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5nZXRTY2FsZUZvcklkKHRoaXMuZ2V0TWV0YSgpLnhBeGlzSUQpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUub3B0aW9ucy5iYXJUaGlja25lc3NcbiAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMuYmFyVGhpY2tuZXNzXG4gICAgICAgICAgICAgICAgICAgIDogZS5vcHRpb25zLnN0YWNrZWRcbiAgICAgICAgICAgICAgICAgICAgPyB0LmNhdGVnb3J5V2lkdGhcbiAgICAgICAgICAgICAgICAgICAgOiB0LmJhcldpZHRoO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QmFySW5kZXg6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwOyB0ID4gYTsgKythKVxuICAgICAgICAgICAgICAgICAgICAoZSA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoYSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGUuYmFyICYmIHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShhKSAmJiArK2k7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUJhclg6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkuZ2V0U2NhbGVGb3JJZChuLnhBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICByID0gaS5nZXRCYXJJbmRleChlKSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IG8uZ2V0UGl4ZWxGb3JWYWx1ZShudWxsLCB0LCBlLCBpLmNoYXJ0LmlzQ29tYm8pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKGwgLT0gaS5jaGFydC5pc0NvbWJvID8gYS50aWNrV2lkdGggLyAyIDogMCksXG4gICAgICAgICAgICAgICAgICAgIG8ub3B0aW9ucy5zdGFja2VkXG4gICAgICAgICAgICAgICAgICAgICAgPyBsICsgYS5jYXRlZ29yeVdpZHRoIC8gMiArIGEuY2F0ZWdvcnlTcGFjaW5nXG4gICAgICAgICAgICAgICAgICAgICAgOiBsICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmFyV2lkdGggLyAyICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuY2F0ZWdvcnlTcGFjaW5nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmFyV2lkdGggKiByICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmFyU3BhY2luZyAvIDIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJTcGFjaW5nICogclxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUJhclk6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEuZ2V0U2NhbGVGb3JJZChpLnlBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBvID0gTnVtYmVyKGEuZ2V0RGF0YXNldCgpLmRhdGFbdF0pO1xuICAgICAgICAgICAgICAgICAgaWYgKG4ub3B0aW9ucy5zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBsID0gMCwgcyA9IDA7IGUgPiBzOyBzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGEuY2hhcnQuZGF0YS5kYXRhc2V0c1tzXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBhLmNoYXJ0LmdldERhdGFzZXRNZXRhKHMpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHUuYmFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB1LnlBeGlzSUQgPT09IG4uaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShzKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBOdW1iZXIoZC5kYXRhW3RdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgPiBjID8gKGwgKz0gYyB8fCAwKSA6IChyICs9IGMgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwID4gb1xuICAgICAgICAgICAgICAgICAgICAgID8gbi5nZXRQaXhlbEZvclZhbHVlKGwgKyBvKVxuICAgICAgICAgICAgICAgICAgICAgIDogbi5nZXRQaXhlbEZvclZhbHVlKHIgKyBvKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBuLmdldFBpeGVsRm9yVmFsdWUobyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gdCB8fCAxLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5nZXRNZXRhKCkuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuZ2V0RGF0YXNldCgpO1xuICAgICAgICAgICAgICAgICAgZm9yIChlID0gMCwgYSA9IG8ubGVuZ3RoOyBhID4gZTsgKytlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsID0gci5kYXRhW2VdO1xuICAgICAgICAgICAgICAgICAgICBudWxsID09PSBsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgaXNOYU4obCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICBvW2VdLnRyYW5zaXRpb24obikuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0SG92ZXJTdHlsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3QuX2RhdGFzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICAoby5iYWNrZ3JvdW5kQ29sb3IgPSBuLmhvdmVyQmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgID8gbi5ob3ZlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5ob3ZlckJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmdldEhvdmVyQ29sb3Ioby5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlckNvbG9yID0gbi5ob3ZlckJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmhvdmVyQm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLmhvdmVyQm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUuZ2V0SG92ZXJDb2xvcihvLmJvcmRlckNvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlcldpZHRoID0gbi5ob3ZlckJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmhvdmVyQm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLmhvdmVyQm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlSG92ZXJTdHlsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3QuX2RhdGFzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucmVjdGFuZ2xlO1xuICAgICAgICAgICAgICAgICAgKG8uYmFja2dyb3VuZENvbG9yID0gbi5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgPyBuLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgci5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyQ29sb3IgPSBuLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgci5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlcldpZHRoID0gbi5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gbi5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHIuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgKHQuZGVmYXVsdHMuaG9yaXpvbnRhbEJhciA9IHtcbiAgICAgICAgICAgICAgICBob3ZlcjogeyBtb2RlOiBcImxhYmVsXCIgfSxcbiAgICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICAgIHhBeGVzOiBbeyB0eXBlOiBcImxpbmVhclwiLCBwb3NpdGlvbjogXCJib3R0b21cIiB9XSxcbiAgICAgICAgICAgICAgICAgIHlBeGVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYXRlZ29yeVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5UGVyY2VudGFnZTogMC44LFxuICAgICAgICAgICAgICAgICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHsgb2Zmc2V0R3JpZExpbmVzOiAhMCB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVsZW1lbnRzOiB7IHJlY3RhbmdsZTogeyBib3JkZXJTa2lwcGVkOiBcImxlZnRcIiB9IH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAodFswXS55TGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhID0gdFswXS55TGFiZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmxhYmVscy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0WzBdLmluZGV4IDwgZS5sYWJlbHMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9IGUubGFiZWxzW3RbMF0uaW5kZXhdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmRhdGFzZXRzW3QuZGF0YXNldEluZGV4XS5sYWJlbCB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgXCI6IFwiICsgdC54TGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycy5ob3Jpem9udGFsQmFyID0gdC5jb250cm9sbGVycy5iYXIuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50OiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBvID0gbi5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBuLmdldFNjYWxlRm9ySWQoby54QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IG4uZ2V0U2NhbGVGb3JJZChvLnlBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBzID0gci5nZXRCYXNlUGl4ZWwoKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICB1ID0gbi5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIGMgPSBuLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucmVjdGFuZ2xlO1xuICAgICAgICAgICAgICAgICAgKHQuX3hTY2FsZSA9IHIpLFxuICAgICAgICAgICAgICAgICAgICAodC5feVNjYWxlID0gbCksXG4gICAgICAgICAgICAgICAgICAgICh0Ll9kYXRhc2V0SW5kZXggPSBuLmluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX2luZGV4ID0gYSk7XG4gICAgICAgICAgICAgICAgICB2YXIgaCA9IG4uZ2V0UnVsZXIoYSk7XG4gICAgICAgICAgICAgICAgICAodC5fbW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGkgPyBzIDogbi5jYWxjdWxhdGVCYXJYKGEsIG4uaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICB5OiBuLmNhbGN1bGF0ZUJhclkoYSwgbi5pbmRleCwgaCksXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuLmNoYXJ0LmRhdGEubGFiZWxzW2FdLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0TGFiZWw6IHUubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGJhc2U6IGkgPyBzIDogbi5jYWxjdWxhdGVCYXJCYXNlKG4uaW5kZXgsIGEpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG4uY2FsY3VsYXRlQmFySGVpZ2h0KGgpLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGQuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBkLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyU2tpcHBlZDogZC5ib3JkZXJTa2lwcGVkXG4gICAgICAgICAgICAgICAgICAgICAgPyBkLmJvcmRlclNraXBwZWRcbiAgICAgICAgICAgICAgICAgICAgICA6IGMuYm9yZGVyU2tpcHBlZCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGQuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IGQuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1LmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogZC5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gZC5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKHQuZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzWyh1ICsgdCkgJSA0XTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5fdmlldyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBhLmhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gYS55IC0gaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBhLnkgKyBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IGEuYmFzZSAtIChhLmJhc2UgLSBhLngpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGEuYm9yZGVyV2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgIGEuYm9yZGVyV2lkdGggJiYgKChuICs9IGwpLCAobyAtPSBsKSwgKHIgKz0gbCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmZpbGxTdHlsZSA9IGEuYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnN0cm9rZVN0eWxlID0gYS5ib3JkZXJDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5saW5lV2lkdGggPSBhLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW2EuYmFzZSwgb10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFthLmJhc2UsIG5dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbciwgbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtyLCBvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gW1wiYm90dG9tXCIsIFwibGVmdFwiLCBcInRvcFwiLCBcInJpZ2h0XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGQuaW5kZXhPZihhLmJvcmRlclNraXBwZWQsIDApO1xuICAgICAgICAgICAgICAgICAgICAgIC0xID09PSB1ICYmICh1ID0gMCksIGUubW92ZVRvLmFwcGx5KGUsIHQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID4gYzsgYysrKSBlLmxpbmVUby5hcHBseShlLCB0KGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICBlLmZpbGwoKSwgYS5ib3JkZXJXaWR0aCAmJiBlLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdC5waXZvdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQmFyQmFzZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5nZXRTY2FsZUZvcklkKGkueEF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSAwO1xuICAgICAgICAgICAgICAgICAgaWYgKG4ub3B0aW9ucy5zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBhLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHIuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBOdW1iZXIobFt0XS5kYXRhW2VdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIHQgPiBkO1xuICAgICAgICAgICAgICAgICAgICAgIGQrK1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGxbZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gci5nZXREYXRhc2V0TWV0YShkKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmJhciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgYy54QXhpc0lEID09PSBuLmlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICByLmlzRGF0YXNldFZpc2libGUoZClcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gTnVtYmVyKHUuZGF0YVtlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvICs9IDAgPiBzID8gTWF0aC5taW4oaCwgMCkgOiBNYXRoLm1heChoLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZ2V0UGl4ZWxGb3JWYWx1ZShvKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBuLmdldEJhc2VQaXhlbCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UnVsZXI6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEuZ2V0U2NhbGVGb3JJZChpLnlBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBvID0gYS5nZXRCYXJDb3VudCgpO1xuICAgICAgICAgICAgICAgICAgZSA9XG4gICAgICAgICAgICAgICAgICAgIFwiY2F0ZWdvcnlcIiA9PT0gbi5vcHRpb25zLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICA/IG4uZ2V0UGl4ZWxGb3JUaWNrKHQgKyAxKSAtIG4uZ2V0UGl4ZWxGb3JUaWNrKHQpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLndpZHRoIC8gbi50aWNrcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICB2YXIgciA9IGUgKiBuLm9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgICAgICBsID0gKGUgLSBlICogbi5vcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZSkgLyAyLFxuICAgICAgICAgICAgICAgICAgICBzID0gciAvIG87XG4gICAgICAgICAgICAgICAgICBpZiAobi50aWNrcy5sZW5ndGggIT09IGEuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gbi50aWNrcy5sZW5ndGggLyBhLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcyAqPSBkO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHUgPSBzICogbi5vcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBzIC0gcyAqIG4ub3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldENvdW50OiBvLFxuICAgICAgICAgICAgICAgICAgICB0aWNrSGVpZ2h0OiBlLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeUhlaWdodDogcixcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlTcGFjaW5nOiBsLFxuICAgICAgICAgICAgICAgICAgICBmdWxsQmFySGVpZ2h0OiBzLFxuICAgICAgICAgICAgICAgICAgICBiYXJIZWlnaHQ6IHUsXG4gICAgICAgICAgICAgICAgICAgIGJhclNwYWNpbmc6IGMsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQmFySGVpZ2h0OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5nZXRTY2FsZUZvcklkKGUuZ2V0TWV0YSgpLnlBeGlzSUQpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEub3B0aW9ucy5iYXJUaGlja25lc3NcbiAgICAgICAgICAgICAgICAgICAgPyBhLm9wdGlvbnMuYmFyVGhpY2tuZXNzXG4gICAgICAgICAgICAgICAgICAgIDogYS5vcHRpb25zLnN0YWNrZWRcbiAgICAgICAgICAgICAgICAgICAgPyB0LmNhdGVnb3J5SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDogdC5iYXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVCYXJYOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmdldFNjYWxlRm9ySWQoaS54QXhpc0lEKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IE51bWJlcihhLmdldERhdGFzZXQoKS5kYXRhW3RdKTtcbiAgICAgICAgICAgICAgICAgIGlmIChuLm9wdGlvbnMuc3RhY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgbCA9IDAsIHMgPSAwOyBlID4gczsgcysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBhLmNoYXJ0LmRhdGEuZGF0YXNldHNbc10sXG4gICAgICAgICAgICAgICAgICAgICAgICB1ID0gYS5jaGFydC5nZXREYXRhc2V0TWV0YShzKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB1LmJhciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdS54QXhpc0lEID09PSBuLmlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmNoYXJ0LmlzRGF0YXNldFZpc2libGUocylcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gTnVtYmVyKGQuZGF0YVt0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAwID4gYyA/IChsICs9IGMgfHwgMCkgOiAociArPSBjIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCA+IG9cbiAgICAgICAgICAgICAgICAgICAgICA/IG4uZ2V0UGl4ZWxGb3JWYWx1ZShsICsgbylcbiAgICAgICAgICAgICAgICAgICAgICA6IG4uZ2V0UGl4ZWxGb3JWYWx1ZShyICsgbyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbi5nZXRQaXhlbEZvclZhbHVlKG8pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlQmFyWTogZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5nZXRTY2FsZUZvcklkKG4ueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLmdldEJhckluZGV4KGUpLFxuICAgICAgICAgICAgICAgICAgICBsID0gby5nZXRQaXhlbEZvclZhbHVlKG51bGwsIHQsIGUsIGkuY2hhcnQuaXNDb21ibyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAobCAtPSBpLmNoYXJ0LmlzQ29tYm8gPyBhLnRpY2tIZWlnaHQgLyAyIDogMCksXG4gICAgICAgICAgICAgICAgICAgIG8ub3B0aW9ucy5zdGFja2VkXG4gICAgICAgICAgICAgICAgICAgICAgPyBsICsgYS5jYXRlZ29yeUhlaWdodCAvIDIgKyBhLmNhdGVnb3J5U3BhY2luZ1xuICAgICAgICAgICAgICAgICAgICAgIDogbCArXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmJhckhlaWdodCAvIDIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5jYXRlZ29yeVNwYWNpbmcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJIZWlnaHQgKiByICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmFyU3BhY2luZyAvIDIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5iYXJTcGFjaW5nICogclxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMTY6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5idWJibGUgPSB7XG4gICAgICAgICAgICAgIGhvdmVyOiB7IG1vZGU6IFwic2luZ2xlXCIgfSxcbiAgICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgICAgeEF4ZXM6IFt7IHR5cGU6IFwibGluZWFyXCIsIHBvc2l0aW9uOiBcImJvdHRvbVwiLCBpZDogXCJ4LWF4aXMtMFwiIH1dLFxuICAgICAgICAgICAgICAgIHlBeGVzOiBbeyB0eXBlOiBcImxpbmVhclwiLCBwb3NpdGlvbjogXCJsZWZ0XCIsIGlkOiBcInktYXhpcy0wXCIgfV0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmRhdGFzZXRzW3QuZGF0YXNldEluZGV4XS5sYWJlbCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPSBlLmRhdGFzZXRzW3QuZGF0YXNldEluZGV4XS5kYXRhW3QuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIGEgKyBcIjogKFwiICsgdC54TGFiZWwgKyBcIiwgXCIgKyB0LnlMYWJlbCArIFwiLCBcIiArIGkuciArIFwiKVwiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuY29udHJvbGxlcnMuYnViYmxlID0gdC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogdC5lbGVtZW50cy5Qb2ludCxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuZGF0YTtcbiAgICAgICAgICAgICAgICAgIGUuZWFjaChuLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICBhLnVwZGF0ZUVsZW1lbnQoZSwgaSwgdCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uIChhLCBpLCBuKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IG8uZ2V0U2NhbGVGb3JJZChyLnhBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBzID0gby5nZXRTY2FsZUZvcklkKHIueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIGQgPSBhLmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IG8uZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICBjID0gdS5kYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICBoID0gby5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LFxuICAgICAgICAgICAgICAgICAgICBmID0gby5pbmRleDtcbiAgICAgICAgICAgICAgICAgIGUuZXh0ZW5kKGEsIHtcbiAgICAgICAgICAgICAgICAgICAgX3hTY2FsZTogbCxcbiAgICAgICAgICAgICAgICAgICAgX3lTY2FsZTogcyxcbiAgICAgICAgICAgICAgICAgICAgX2RhdGFzZXRJbmRleDogZixcbiAgICAgICAgICAgICAgICAgICAgX2luZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICBfbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICB4OiBuXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGwuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbC5nZXRQaXhlbEZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGMgPyBjIDogTmFOLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmNoYXJ0LmlzQ29tYm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB5OiBuID8gcy5nZXRCYXNlUGl4ZWwoKSA6IHMuZ2V0UGl4ZWxGb3JWYWx1ZShjLCBpLCBmKSxcbiAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IG4gPyAwIDogZC5yYWRpdXMgPyBkLnJhZGl1cyA6IG8uZ2V0UmFkaXVzKGMpLFxuICAgICAgICAgICAgICAgICAgICAgIGhpdFJhZGl1czogZC5oaXRSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZC5oaXRSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5oaXRSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHQuRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZUhvdmVyU3R5bGUuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgaFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgdmFyIGcgPSBhLl9tb2RlbDtcbiAgICAgICAgICAgICAgICAgIChnLnNraXAgPSBkLnNraXAgPyBkLnNraXAgOiBpc05hTihnLngpIHx8IGlzTmFOKGcueSkpLFxuICAgICAgICAgICAgICAgICAgICBhLnBpdm90KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRSYWRpdXM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdC5yIHx8IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5yYWRpdXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuc2V0SG92ZXJTdHlsZS5jYWxsKGksIGEpO1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBpLmNoYXJ0LmRhdGEuZGF0YXNldHNbYS5fZGF0YXNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGEuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICByID0gYS5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIGwgPSBhLl9tb2RlbDtcbiAgICAgICAgICAgICAgICAgIGwucmFkaXVzID0gci5ob3ZlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICA/IHIuaG92ZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uaG92ZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LmhvdmVyUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgKSArIGkuZ2V0UmFkaXVzKG4uZGF0YVtvXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlSG92ZXJTdHlsZS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBhLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IGEuY2hhcnQuZGF0YS5kYXRhc2V0c1tlLl9kYXRhc2V0SW5kZXhdLmRhdGFbZS5faW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBuID0gZS5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLl9tb2RlbDtcbiAgICAgICAgICAgICAgICAgIG8ucmFkaXVzID0gbi5yYWRpdXMgPyBuLnJhZGl1cyA6IGEuZ2V0UmFkaXVzKGkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAxNzogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgYSA9IHQuZGVmYXVsdHM7XG4gICAgICAgICAgICAoYS5kb3VnaG51dCA9IHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uOiB7IGFuaW1hdGVSb3RhdGU6ICEwLCBhbmltYXRlU2NhbGU6ICExIH0sXG4gICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICAgICAgICBob3ZlcjogeyBtb2RlOiBcInNpbmdsZVwiIH0sXG4gICAgICAgICAgICAgIGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gW107XG4gICAgICAgICAgICAgICAgZS5wdXNoKCc8dWwgY2xhc3NOYW1lPVwiJyArIHQuaWQgKyAnLWxlZ2VuZFwiPicpO1xuICAgICAgICAgICAgICAgIHZhciBhID0gdC5kYXRhLFxuICAgICAgICAgICAgICAgICAgaSA9IGEuZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICBuID0gYS5sYWJlbHM7XG4gICAgICAgICAgICAgICAgaWYgKGkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCBpWzBdLmRhdGEubGVuZ3RoOyArK28pXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAnPGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlbMF0uYmFja2dyb3VuZENvbG9yW29dICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcIj48L3NwYW4+J1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIG5bb10gJiYgZS5wdXNoKG5bb10pLFxuICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChcIjwvbGk+XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnB1c2goXCI8L3VsPlwiKSwgZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubGFiZWxzLmxlbmd0aCAmJiBhLmRhdGFzZXRzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgID8gYS5sYWJlbHMubWFwKGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdC5nZXREYXRhc2V0TWV0YSgwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gYS5kYXRhc2V0c1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gby5kYXRhW25dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAobCAmJiBsLmN1c3RvbSkgfHwge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSB0Lm9wdGlvbnMuZWxlbWVudHMuYXJjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkKHIuYmFja2dyb3VuZENvbG9yLCBuLCB1LmJhY2tncm91bmRDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IHMuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkKHIuYm9yZGVyQ29sb3IsIG4sIHUuYm9yZGVyQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBzLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZChyLmJvcmRlcldpZHRoLCBuLCB1LmJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiBpc05hTihyLmRhdGFbbl0pIHx8IG8uZGF0YVtuXS5oaWRkZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvID0gZS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMuY2hhcnQ7XG4gICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwLCBpID0gKHIuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoOyBpID4gYTsgKythKVxuICAgICAgICAgICAgICAgICAgICAobiA9IHIuZ2V0RGF0YXNldE1ldGEoYSkpLFxuICAgICAgICAgICAgICAgICAgICAgIG4uZGF0YVtvXSAmJiAobi5kYXRhW29dLmhpZGRlbiA9ICFuLmRhdGFbb10uaGlkZGVuKTtcbiAgICAgICAgICAgICAgICAgIHIudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY3V0b3V0UGVyY2VudGFnZTogNTAsXG4gICAgICAgICAgICAgIHJvdGF0aW9uOiBNYXRoLlBJICogLTAuNSxcbiAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogMiAqIE1hdGguUEksXG4gICAgICAgICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKHQsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBhLmxhYmVsc1t0LmluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gXCI6IFwiICsgYS5kYXRhc2V0c1t0LmRhdGFzZXRJbmRleF0uZGF0YVt0LmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICBlLmlzQXJyYXkoaSkgPyAoKGkgPSBpLnNsaWNlKCkpLCAoaVswXSArPSBuKSkgOiAoaSArPSBuKSxcbiAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKGEucGllID0gZS5jbG9uZShhLmRvdWdobnV0KSksXG4gICAgICAgICAgICAgIGUuZXh0ZW5kKGEucGllLCB7IGN1dG91dFBlcmNlbnRhZ2U6IDAgfSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzLmRvdWdobnV0ID0gdC5jb250cm9sbGVycy5waWUgPVxuICAgICAgICAgICAgICAgIHQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogdC5lbGVtZW50cy5BcmMsXG4gICAgICAgICAgICAgICAgICBsaW5rU2NhbGVzOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgICBnZXRSaW5nSW5kZXg6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCBhID0gMDsgdCA+IGE7ICsrYSlcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoYSkgJiYgKytlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICBpID0gYS5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gaS5jaGFydEFyZWEsXG4gICAgICAgICAgICAgICAgICAgICAgbyA9IGkub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICByID0gby5lbGVtZW50cy5hcmMsXG4gICAgICAgICAgICAgICAgICAgICAgbCA9IG4ucmlnaHQgLSBuLmxlZnQgLSByLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgIHMgPSBuLmJvdHRvbSAtIG4udG9wIC0gci5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICBkID0gTWF0aC5taW4obCwgcyksXG4gICAgICAgICAgICAgICAgICAgICAgdSA9IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgICAgICAgICAgIGMgPSBhLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgICBoID0gby5jdXRvdXRQZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgICAgICAgIGYgPSBvLmNpcmN1bWZlcmVuY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmIDwgMiAqIE1hdGguUEkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IG8ucm90YXRpb24gJSAoMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICAgIGcgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgIDIgKlxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5QSSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoZyA+PSBNYXRoLlBJID8gLTEgOiBnIDwgLU1hdGguUEkgPyAxIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBnICsgZixcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSB7IHg6IE1hdGguY29zKGcpLCB5OiBNYXRoLnNpbihnKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHsgeDogTWF0aC5jb3MocCksIHk6IE1hdGguc2luKHApIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKDAgPj0gZyAmJiBwID49IDApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChnIDw9IDIgKiBNYXRoLlBJICYmIDIgKiBNYXRoLlBJIDw9IHApLFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChnIDw9IDAuNSAqIE1hdGguUEkgJiYgMC41ICogTWF0aC5QSSA8PSBwKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZyA8PSAyLjUgKiBNYXRoLlBJICYmIDIuNSAqIE1hdGguUEkgPD0gcCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPD0gLU1hdGguUEkgJiYgLU1hdGguUEkgPD0gcCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPD0gTWF0aC5QSSAmJiBNYXRoLlBJIDw9IHApLFxuICAgICAgICAgICAgICAgICAgICAgICAgayA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChnIDw9IDAuNSAqIC1NYXRoLlBJICYmIDAuNSAqIC1NYXRoLlBJIDw9IHApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChnIDw9IDEuNSAqIE1hdGguUEkgJiYgMS41ICogTWF0aC5QSSA8PSBwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFMgPSBoIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnggKiAobS54IDwgMCA/IDEgOiBTKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi54ICogKGIueCA8IDAgPyAxIDogUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS55ICogKG0ueSA8IDAgPyAxIDogUyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIueSAqIChiLnkgPCAwID8gMSA6IFMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnggKiAobS54ID4gMCA/IDEgOiBTKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi54ICogKGIueCA+IDAgPyAxIDogUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnkgKiAobS55ID4gMCA/IDEgOiBTKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi55ICogKGIueSA+IDAgPyAxIDogUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgQyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAuNSAqIChNLnggLSB3LngpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAuNSAqIChNLnkgLSB3LnkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAoZCA9IE1hdGgubWluKGwgLyBDLndpZHRoLCBzIC8gQy5oZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID0geyB4OiAoTS54ICsgdy54KSAqIC0wLjUsIHk6IChNLnkgKyB3LnkpICogLTAuNSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAoaS5ib3JkZXJXaWR0aCA9IGEuZ2V0TWF4Qm9yZGVyV2lkdGgoYy5kYXRhKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkub3V0ZXJSYWRpdXMgPSBNYXRoLm1heCgoZCAtIGkuYm9yZGVyV2lkdGgpIC8gMiwgMCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLmlubmVyUmFkaXVzID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICBoID8gKGkub3V0ZXJSYWRpdXMgLyAxMDApICogaCA6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkucmFkaXVzTGVuZ3RoID1cbiAgICAgICAgICAgICAgICAgICAgICAgIChpLm91dGVyUmFkaXVzIC0gaS5pbm5lclJhZGl1cykgL1xuICAgICAgICAgICAgICAgICAgICAgICAgaS5nZXRWaXNpYmxlRGF0YXNldENvdW50KCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLm9mZnNldFggPSB1LnggKiBpLm91dGVyUmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaS5vZmZzZXRZID0gdS55ICogaS5vdXRlclJhZGl1cyksXG4gICAgICAgICAgICAgICAgICAgICAgKGMudG90YWwgPSBhLmNhbGN1bGF0ZVRvdGFsKCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChhLm91dGVyUmFkaXVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkub3V0ZXJSYWRpdXMgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaS5yYWRpdXNMZW5ndGggKiBhLmdldFJpbmdJbmRleChhLmluZGV4KSksXG4gICAgICAgICAgICAgICAgICAgICAgKGEuaW5uZXJSYWRpdXMgPSBhLm91dGVyUmFkaXVzIC0gaS5yYWRpdXNMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChjLmRhdGEsIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhLnVwZGF0ZUVsZW1lbnQoZSwgaSwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdXBkYXRlRWxlbWVudDogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIG8gPSBuLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgIHIgPSBvLmNoYXJ0QXJlYSxcbiAgICAgICAgICAgICAgICAgICAgICBsID0gby5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIHMgPSBsLmFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBkID0gKHIubGVmdCArIHIucmlnaHQpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICB1ID0gKHIudG9wICsgci5ib3R0b20pIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICBjID0gbC5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBoID0gbC5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBmID0gbi5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgZyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBpICYmIHMuYW5pbWF0ZVJvdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0LmhpZGRlblxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UoZi5kYXRhW2FdKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwuY2lyY3VtZmVyZW5jZSAvICgyICogTWF0aC5QSSkpLFxuICAgICAgICAgICAgICAgICAgICAgIHAgPSBpICYmIHMuYW5pbWF0ZVNjYWxlID8gMCA6IG4uaW5uZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgbSA9IGkgJiYgcy5hbmltYXRlU2NhbGUgPyAwIDogbi5vdXRlclJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICBiID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGUuZXh0ZW5kKHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICBfZGF0YXNldEluZGV4OiBuLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIF9pbmRleDogYSxcbiAgICAgICAgICAgICAgICAgICAgICBfbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGQgKyBvLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB1ICsgby5vZmZzZXRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJSYWRpdXM6IHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogYihmLmxhYmVsLCBhLCBvLmRhdGEubGFiZWxzW2FdKSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB0Ll9tb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVIb3ZlclN0eWxlKHQpLFxuICAgICAgICAgICAgICAgICAgICAgIChpICYmIHMuYW5pbWF0ZVJvdGF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICgwID09PSBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKHYuc3RhcnRBbmdsZSA9IGwucm90YXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogKHYuc3RhcnRBbmdsZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmdldE1ldGEoKS5kYXRhW2EgLSAxXS5fbW9kZWwuZW5kQW5nbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHYuZW5kQW5nbGUgPSB2LnN0YXJ0QW5nbGUgKyB2LmNpcmN1bWZlcmVuY2UpKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LnBpdm90KCk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgcmVtb3ZlSG92ZXJTdHlsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlSG92ZXJTdHlsZS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMuYXJjXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlVG90YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICBlLmVhY2goaS5kYXRhLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSBhLmRhdGFbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTih0KSB8fCBlLmhpZGRlbiB8fCAobiArPSBNYXRoLmFicyh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgblxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5nZXRNZXRhKCkudG90YWw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlID4gMCAmJiAhaXNOYU4odCkgPyAyICogTWF0aC5QSSAqICh0IC8gZSkgOiAwO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdldE1heEJvcmRlcldpZHRoOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgIHZhciBlLCBhLCBpID0gMCwgbiA9IHRoaXMuaW5kZXgsIG8gPSB0Lmxlbmd0aCwgciA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgbyA+IHI7XG4gICAgICAgICAgICAgICAgICAgICAgcisrXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAoZSA9IHRbcl0uX21vZGVsID8gdFtyXS5fbW9kZWwuYm9yZGVyV2lkdGggOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhID0gdFtyXS5fY2hhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0W3JdLl9jaGFydC5jb25maWcuZGF0YS5kYXRhc2V0c1tuXS5ob3ZlckJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGUgPiBpID8gZSA6IGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBhID4gaSA/IGEgOiBpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAxODogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0VmFsdWVPckRlZmF1bHQodC5zaG93TGluZSwgZS5zaG93TGluZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGEgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5saW5lID0ge1xuICAgICAgICAgICAgICBzaG93TGluZXM6ICEwLFxuICAgICAgICAgICAgICBzcGFuR2FwczogITEsXG4gICAgICAgICAgICAgIGhvdmVyOiB7IG1vZGU6IFwibGFiZWxcIiB9LFxuICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICB4QXhlczogW3sgdHlwZTogXCJjYXRlZ29yeVwiLCBpZDogXCJ4LWF4aXMtMFwiIH1dLFxuICAgICAgICAgICAgICAgIHlBeGVzOiBbeyB0eXBlOiBcImxpbmVhclwiLCBpZDogXCJ5LWF4aXMtMFwiIH1dLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmNvbnRyb2xsZXJzLmxpbmUgPSB0LkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiB0LmVsZW1lbnRzLkxpbmUsXG4gICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiB0LmVsZW1lbnRzLlBvaW50LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICByID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbCA9IHIuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBzID0gbC5kYXRhc2V0LFxuICAgICAgICAgICAgICAgICAgICBkID0gbC5kYXRhIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICB1ID0gci5jaGFydC5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBjID0gdS5lbGVtZW50cy5saW5lLFxuICAgICAgICAgICAgICAgICAgICBoID0gci5nZXRTY2FsZUZvcklkKGwueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIGYgPSByLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgZyA9IGUoZiwgdSk7XG4gICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICBnICYmXG4gICAgICAgICAgICAgICAgICAgICAgKChvID0gcy5jdXN0b20gfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gZi50ZW5zaW9uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGYubGluZVRlbnNpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChmLmxpbmVUZW5zaW9uID0gZi50ZW5zaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAocy5fc2NhbGUgPSBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAocy5fZGF0YXNldEluZGV4ID0gci5pbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgKHMuX2NoaWxkcmVuID0gZCksXG4gICAgICAgICAgICAgICAgICAgICAgKHMuX21vZGVsID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkdhcHM6IGYuc3BhbkdhcHMgPyBmLnNwYW5HYXBzIDogdS5zcGFuR2FwcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbnNpb246IG8udGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8udGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGEuZ2V0VmFsdWVPckRlZmF1bHQoZi5saW5lVGVuc2lvbiwgYy50ZW5zaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogby5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGYuYmFja2dyb3VuZENvbG9yIHx8IGMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IG8uYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZi5ib3JkZXJXaWR0aCB8fCBjLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG8uYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZi5ib3JkZXJDb2xvciB8fCBjLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ2FwU3R5bGU6IG8uYm9yZGVyQ2FwU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlckNhcFN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZi5ib3JkZXJDYXBTdHlsZSB8fCBjLmJvcmRlckNhcFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaDogby5ib3JkZXJEYXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gby5ib3JkZXJEYXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogZi5ib3JkZXJEYXNoIHx8IGMuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG8uYm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGYuYm9yZGVyRGFzaE9mZnNldCB8fCBjLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJKb2luU3R5bGU6IG8uYm9yZGVySm9pblN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gby5ib3JkZXJKb2luU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmLmJvcmRlckpvaW5TdHlsZSB8fCBjLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG8uZmlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uZmlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZvaWQgMCAhPT0gZi5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gZi5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYy5maWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHBlZExpbmU6IG8uc3RlcHBlZExpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLnN0ZXBwZWRMaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5nZXRWYWx1ZU9yRGVmYXVsdChmLnN0ZXBwZWRMaW5lLCBjLnN0ZXBwZWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogby5jdWJpY0ludGVycG9sYXRpb25Nb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gby5jdWJpY0ludGVycG9sYXRpb25Nb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVRvcDogaC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUJvdHRvbTogaC5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVplcm86IGguZ2V0QmFzZVBpeGVsKCksXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgcy5waXZvdCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIG4gPiBpO1xuICAgICAgICAgICAgICAgICAgICArK2lcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgci51cGRhdGVFbGVtZW50KGRbaV0sIGksIHQpO1xuICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgZyAmJlxuICAgICAgICAgICAgICAgICAgICAgIDAgIT09IHMuX21vZGVsLnRlbnNpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICByLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKSxcbiAgICAgICAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIG4gPiBpO1xuICAgICAgICAgICAgICAgICAgICArK2lcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgZFtpXS5waXZvdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0UG9pbnRCYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuY3VzdG9tIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgby5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA/IChpID0gby5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLnBvaW50QmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLnBvaW50QmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgIDogbi5iYWNrZ3JvdW5kQ29sb3IgJiYgKGkgPSBuLmJhY2tncm91bmRDb2xvciksXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQb2ludEJvcmRlckNvbG9yOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuY3VzdG9tIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgby5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gKGkgPSBvLmJvcmRlckNvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgIDogbi5wb2ludEJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLnBvaW50Qm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLmJvcmRlckNvbG9yICYmIChpID0gbi5ib3JkZXJDb2xvciksXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQb2ludEJvcmRlcldpZHRoOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuY3VzdG9tIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gKGkgPSBvLmJvcmRlcldpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgIDogbi5wb2ludEJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLnBvaW50Qm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuLmJvcmRlcldpZHRoICYmIChpID0gbi5ib3JkZXJXaWR0aCksXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50OiBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBsID0gci5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IHIuZ2V0RGF0YXNldCgpLFxuICAgICAgICAgICAgICAgICAgICB1ID0gci5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGQuZGF0YVtlXSxcbiAgICAgICAgICAgICAgICAgICAgaCA9IHIuZ2V0U2NhbGVGb3JJZChsLnlBeGlzSUQpLFxuICAgICAgICAgICAgICAgICAgICBmID0gci5nZXRTY2FsZUZvcklkKGwueEF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIGcgPSByLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIHAgPSByLmNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICBtID1cbiAgICAgICAgICAgICAgICAgICAgICAxID09PSBwLmxlbmd0aCB8fCAxID09PSBkLmRhdGEubGVuZ3RoIHx8IHIuY2hhcnQuaXNDb21ibztcbiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gZC5yYWRpdXMgJiZcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBkLnBvaW50UmFkaXVzICYmXG4gICAgICAgICAgICAgICAgICAgIChkLnBvaW50UmFkaXVzID0gZC5yYWRpdXMpLFxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGQuaGl0UmFkaXVzICYmXG4gICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBkLnBvaW50SGl0UmFkaXVzICYmXG4gICAgICAgICAgICAgICAgICAgICAgKGQucG9pbnRIaXRSYWRpdXMgPSBkLmhpdFJhZGl1cyksXG4gICAgICAgICAgICAgICAgICAgIChuID0gZi5nZXRQaXhlbEZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGMgPyBjIDogTmFOLFxuICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgdSxcbiAgICAgICAgICAgICAgICAgICAgICBtXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAobyA9IGkgPyBoLmdldEJhc2VQaXhlbCgpIDogci5jYWxjdWxhdGVQb2ludFkoYywgZSwgdSkpLFxuICAgICAgICAgICAgICAgICAgICAodC5feFNjYWxlID0gZiksXG4gICAgICAgICAgICAgICAgICAgICh0Ll95U2NhbGUgPSBoKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX2RhdGFzZXRJbmRleCA9IHUpLFxuICAgICAgICAgICAgICAgICAgICAodC5faW5kZXggPSBlKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuX21vZGVsID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHg6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgeTogbyxcbiAgICAgICAgICAgICAgICAgICAgICBza2lwOiBzLnNraXAgfHwgaXNOYU4obikgfHwgaXNOYU4obyksXG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcy5yYWRpdXMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KGQucG9pbnRSYWRpdXMsIGUsIGcucmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOlxuICAgICAgICAgICAgICAgICAgICAgICAgcy5wb2ludFN0eWxlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnLnBvaW50U3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByLmdldFBvaW50QmFja2dyb3VuZENvbG9yKHQsIGUpLFxuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiByLmdldFBvaW50Qm9yZGVyQ29sb3IodCwgZSksXG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IHIuZ2V0UG9pbnRCb3JkZXJXaWR0aCh0LCBlKSxcbiAgICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uOiBsLmRhdGFzZXQuX21vZGVsID8gbC5kYXRhc2V0Ll9tb2RlbC50ZW5zaW9uIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICBzdGVwcGVkTGluZTogbC5kYXRhc2V0Ll9tb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBsLmRhdGFzZXQuX21vZGVsLnN0ZXBwZWRMaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICExLFxuICAgICAgICAgICAgICAgICAgICAgIGhpdFJhZGl1czpcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuaGl0UmFkaXVzIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wb2ludEhpdFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZy5oaXRSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlUG9pbnRZOiBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBsID0gci5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHIuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBkID0gci5nZXRTY2FsZUZvcklkKHMueUF4aXNJRCksXG4gICAgICAgICAgICAgICAgICAgIHUgPSAwLFxuICAgICAgICAgICAgICAgICAgICBjID0gMDtcbiAgICAgICAgICAgICAgICAgIGlmIChkLm9wdGlvbnMuc3RhY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBhID4gaTsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICgobiA9IGwuZGF0YS5kYXRhc2V0c1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAobyA9IGwuZ2V0RGF0YXNldE1ldGEoaSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsaW5lXCIgPT09IG8udHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICBvLnlBeGlzSUQgPT09IGQuaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbC5pc0RhdGFzZXRWaXNpYmxlKGkpKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBOdW1iZXIoZC5nZXRSaWdodFZhbHVlKG4uZGF0YVtlXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgMCA+IGggPyAoYyArPSBoIHx8IDApIDogKHUgKz0gaCB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gTnVtYmVyKGQuZ2V0UmlnaHRWYWx1ZSh0KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwID4gZlxuICAgICAgICAgICAgICAgICAgICAgID8gZC5nZXRQaXhlbEZvclZhbHVlKGMgKyBmKVxuICAgICAgICAgICAgICAgICAgICAgIDogZC5nZXRQaXhlbEZvclZhbHVlKHUgKyBmKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBkLmdldFBpeGVsRm9yVmFsdWUodCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHQsIGEpLCBlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICBsID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGwuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBkID0gbC5jaGFydC5jaGFydEFyZWEsXG4gICAgICAgICAgICAgICAgICAgIHUgPSBzLmRhdGEgfHwgW107XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIChzLmRhdGFzZXQuX21vZGVsLnNwYW5HYXBzICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHUgPSB1LmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0Ll9tb2RlbC5za2lwO1xuICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgXCJtb25vdG9uZVwiID09PSBzLmRhdGFzZXQuX21vZGVsLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGEuc3BsaW5lQ3VydmVNb25vdG9uZSh1KTtcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gMCwgaSA9IHUubGVuZ3RoOyBpID4gZTsgKytlKVxuICAgICAgICAgICAgICAgICAgICAgIChuID0gdVtlXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAobyA9IG4uX21vZGVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChyID0gYS5zcGxpbmVDdXJ2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wcmV2aW91c0l0ZW0odSwgZSkuX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLm5leHRJdGVtKHUsIGUpLl9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcy5kYXRhc2V0Ll9tb2RlbC50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IHIucHJldmlvdXMueCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnRQcmV2aW91c1kgPSByLnByZXZpb3VzLnkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG8uY29udHJvbFBvaW50TmV4dFggPSByLm5leHQueCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnROZXh0WSA9IHIubmV4dC55KTtcbiAgICAgICAgICAgICAgICAgIGlmIChsLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMubGluZS5jYXBCZXppZXJQb2ludHMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZSA9IDAsIGkgPSB1Lmxlbmd0aDsgaSA+IGU7ICsrZSlcbiAgICAgICAgICAgICAgICAgICAgICAobyA9IHVbZV0uX21vZGVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uY29udHJvbFBvaW50UHJldmlvdXNYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQucmlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG8uY29udHJvbFBvaW50UHJldmlvdXNZID0gdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgby5jb250cm9sUG9pbnRQcmV2aW91c1ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJvdHRvbVxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnROZXh0WCA9IHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uY29udHJvbFBvaW50TmV4dFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnROZXh0WSA9IHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uY29udHJvbFBvaW50TmV4dFksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJvdHRvbVxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBvID0gbi5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvLmRhdGEgfHwgW10sXG4gICAgICAgICAgICAgICAgICAgIGwgPSB0IHx8IDE7XG4gICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwLCBpID0gci5sZW5ndGg7IGkgPiBhOyArK2EpIHJbYV0udHJhbnNpdGlvbihsKTtcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIGUobi5nZXREYXRhc2V0KCksIG4uY2hhcnQub3B0aW9ucykgJiZcbiAgICAgICAgICAgICAgICAgICAgICBvLmRhdGFzZXQudHJhbnNpdGlvbihsKS5kcmF3KCksXG4gICAgICAgICAgICAgICAgICAgICAgYSA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IHIubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpID4gYTtcbiAgICAgICAgICAgICAgICAgICAgKythXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHJbYV0uZHJhdygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0SG92ZXJTdHlsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3QuX2RhdGFzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuY3VzdG9tIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5fbW9kZWw7XG4gICAgICAgICAgICAgICAgICAoby5yYWRpdXMgPVxuICAgICAgICAgICAgICAgICAgICBuLmhvdmVyUmFkaXVzIHx8XG4gICAgICAgICAgICAgICAgICAgIGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgIGUucG9pbnRIb3ZlclJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ob3ZlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYmFja2dyb3VuZENvbG9yID1cbiAgICAgICAgICAgICAgICAgICAgICBuLmhvdmVyQmFja2dyb3VuZENvbG9yIHx8XG4gICAgICAgICAgICAgICAgICAgICAgYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5nZXRIb3ZlckNvbG9yKG8uYmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoby5ib3JkZXJDb2xvciA9XG4gICAgICAgICAgICAgICAgICAgICAgbi5ob3ZlckJvcmRlckNvbG9yIHx8XG4gICAgICAgICAgICAgICAgICAgICAgYS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnBvaW50SG92ZXJCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmdldEhvdmVyQ29sb3Ioby5ib3JkZXJDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyV2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgIG4uaG92ZXJCb3JkZXJXaWR0aCB8fFxuICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wb2ludEhvdmVyQm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlSG92ZXJTdHlsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUuY2hhcnQuZGF0YS5kYXRhc2V0c1t0Ll9kYXRhc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5faW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0LmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgciA9IHQuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBpLnJhZGl1cyAmJlxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGkucG9pbnRSYWRpdXMgJiZcbiAgICAgICAgICAgICAgICAgICAgKGkucG9pbnRSYWRpdXMgPSBpLnJhZGl1cyksXG4gICAgICAgICAgICAgICAgICAgIChyLnJhZGl1cyA9XG4gICAgICAgICAgICAgICAgICAgICAgby5yYWRpdXMgfHxcbiAgICAgICAgICAgICAgICAgICAgICBhLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucG9pbnRSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LnJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoci5iYWNrZ3JvdW5kQ29sb3IgPSBlLmdldFBvaW50QmFja2dyb3VuZENvbG9yKHQsIG4pKSxcbiAgICAgICAgICAgICAgICAgICAgKHIuYm9yZGVyQ29sb3IgPSBlLmdldFBvaW50Qm9yZGVyQ29sb3IodCwgbikpLFxuICAgICAgICAgICAgICAgICAgICAoci5ib3JkZXJXaWR0aCA9IGUuZ2V0UG9pbnRCb3JkZXJXaWR0aCh0LCBuKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDE5OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMucG9sYXJBcmVhID0ge1xuICAgICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicmFkaWFsTGluZWFyXCIsXG4gICAgICAgICAgICAgICAgbGluZUFyYzogITAsXG4gICAgICAgICAgICAgICAgdGlja3M6IHsgYmVnaW5BdFplcm86ICEwIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFuaW1hdGlvbjogeyBhbmltYXRlUm90YXRlOiAhMCwgYW5pbWF0ZVNjYWxlOiAhMCB9LFxuICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAtMC41ICogTWF0aC5QSSxcbiAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgICAgICAgIGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gW107XG4gICAgICAgICAgICAgICAgZS5wdXNoKCc8dWwgY2xhc3NOYW1lPVwiJyArIHQuaWQgKyAnLWxlZ2VuZFwiPicpO1xuICAgICAgICAgICAgICAgIHZhciBhID0gdC5kYXRhLFxuICAgICAgICAgICAgICAgICAgaSA9IGEuZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICBuID0gYS5sYWJlbHM7XG4gICAgICAgICAgICAgICAgaWYgKGkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCBpWzBdLmRhdGEubGVuZ3RoOyArK28pXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAnPGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlbMF0uYmFja2dyb3VuZENvbG9yW29dICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcIj48L3NwYW4+J1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIG5bb10gJiYgZS5wdXNoKG5bb10pLFxuICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChcIjwvbGk+XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnB1c2goXCI8L3VsPlwiKSwgZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubGFiZWxzLmxlbmd0aCAmJiBhLmRhdGFzZXRzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgID8gYS5sYWJlbHMubWFwKGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdC5nZXREYXRhc2V0TWV0YSgwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gYS5kYXRhc2V0c1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gby5kYXRhW25dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBsLmN1c3RvbSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHQub3B0aW9ucy5lbGVtZW50cy5hcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMuYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQoci5iYWNrZ3JvdW5kQ29sb3IsIG4sIHUuYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gcy5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQoci5ib3JkZXJDb2xvciwgbiwgdS5ib3JkZXJDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHMuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkKHIuYm9yZGVyV2lkdGgsIG4sIHUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46IGlzTmFOKHIuZGF0YVtuXSkgfHwgby5kYXRhW25dLmhpZGRlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5jaGFydDtcbiAgICAgICAgICAgICAgICAgIGZvciAoYSA9IDAsIGkgPSAoci5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICAgIChuID0gci5nZXREYXRhc2V0TWV0YShhKSksXG4gICAgICAgICAgICAgICAgICAgICAgKG4uZGF0YVtvXS5oaWRkZW4gPSAhbi5kYXRhW29dLmhpZGRlbik7XG4gICAgICAgICAgICAgICAgICByLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubGFiZWxzW3QuaW5kZXhdICsgXCI6IFwiICsgdC55TGFiZWw7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuY29udHJvbGxlcnMucG9sYXJBcmVhID0gdC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogdC5lbGVtZW50cy5BcmMsXG4gICAgICAgICAgICAgICAgbGlua1NjYWxlczogZS5ub29wLFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmNoYXJ0QXJlYSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICByID0gaS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBsID0gci5lbGVtZW50cy5hcmMsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBNYXRoLm1pbihuLnJpZ2h0IC0gbi5sZWZ0LCBuLmJvdHRvbSAtIG4udG9wKTtcbiAgICAgICAgICAgICAgICAgIChpLm91dGVyUmFkaXVzID0gTWF0aC5tYXgoKHMgLSBsLmJvcmRlcldpZHRoIC8gMikgLyAyLCAwKSksXG4gICAgICAgICAgICAgICAgICAgIChpLmlubmVyUmFkaXVzID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgci5jdXRvdXRQZXJjZW50YWdlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChpLm91dGVyUmFkaXVzIC8gMTAwKSAqIHIuY3V0b3V0UGVyY2VudGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAxLFxuICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChpLnJhZGl1c0xlbmd0aCA9XG4gICAgICAgICAgICAgICAgICAgICAgKGkub3V0ZXJSYWRpdXMgLSBpLmlubmVyUmFkaXVzKSAvXG4gICAgICAgICAgICAgICAgICAgICAgaS5nZXRWaXNpYmxlRGF0YXNldENvdW50KCkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5vdXRlclJhZGl1cyA9IGkub3V0ZXJSYWRpdXMgLSBpLnJhZGl1c0xlbmd0aCAqIGEuaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAoYS5pbm5lclJhZGl1cyA9IGEub3V0ZXJSYWRpdXMgLSBpLnJhZGl1c0xlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIChvLmNvdW50ID0gYS5jb3VudFZpc2libGVFbGVtZW50cygpKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG8uZGF0YSwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhLnVwZGF0ZUVsZW1lbnQoZSwgaSwgdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlRWxlbWVudDogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICBvID0gbi5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICByID0gbi5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgbCA9IG8ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICBzID0gbC5hbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgZCA9IG8uc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgdSA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgIGMgPSBvLmRhdGEubGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICAgIGggPSBuLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2Uoci5kYXRhW2FdKSxcbiAgICAgICAgICAgICAgICAgICAgICBmID0gZC54Q2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgIGcgPSBkLnlDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgcCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgbSA9IG4uZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICAgIGIgPSAwO1xuICAgICAgICAgICAgICAgICAgICBhID4gYjtcbiAgICAgICAgICAgICAgICAgICAgKytiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGlzTmFOKHIuZGF0YVtiXSkgfHwgbS5kYXRhW2JdLmhpZGRlbiB8fCArK3A7XG4gICAgICAgICAgICAgICAgICB2YXIgdiA9IGwuc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICAgICAgeCA9IHQuaGlkZGVuXG4gICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgOiBkLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHIuZGF0YVthXSksXG4gICAgICAgICAgICAgICAgICAgIHkgPSB2ICsgaCAqIHAsXG4gICAgICAgICAgICAgICAgICAgIGsgPSB5ICsgKHQuaGlkZGVuID8gMCA6IGgpLFxuICAgICAgICAgICAgICAgICAgICBTID0gcy5hbmltYXRlU2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICA6IGQuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoci5kYXRhW2FdKTtcbiAgICAgICAgICAgICAgICAgIGUuZXh0ZW5kKHQsIHtcbiAgICAgICAgICAgICAgICAgICAgX2RhdGFzZXRJbmRleDogbi5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgX2luZGV4OiBhLFxuICAgICAgICAgICAgICAgICAgICBfc2NhbGU6IGQsXG4gICAgICAgICAgICAgICAgICAgIF9tb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAgIHg6IGYsXG4gICAgICAgICAgICAgICAgICAgICAgeTogZyxcbiAgICAgICAgICAgICAgICAgICAgICBpbm5lclJhZGl1czogMCxcbiAgICAgICAgICAgICAgICAgICAgICBvdXRlclJhZGl1czogaSA/IFMgOiB4LFxuICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGkgJiYgcy5hbmltYXRlUm90YXRlID8gdiA6IHksXG4gICAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IGkgJiYgcy5hbmltYXRlUm90YXRlID8gdiA6IGssXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHUoYywgYSwgY1thXSksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbi5yZW1vdmVIb3ZlclN0eWxlKHQpLFxuICAgICAgICAgICAgICAgICAgICB0LnBpdm90KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlSG92ZXJTdHlsZS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMuYXJjXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY291bnRWaXNpYmxlRWxlbWVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLmdldE1ldGEoKSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goYS5kYXRhLCBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKHQuZGF0YVthXSkgfHwgZS5oaWRkZW4gfHwgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuZ2V0TWV0YSgpLmNvdW50O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPiAwICYmICFpc05hTih0KSA/ICgyICogTWF0aC5QSSkgLyBlIDogMDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMjA6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5yYWRhciA9IHtcbiAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgICAgICAgIHNjYWxlOiB7IHR5cGU6IFwicmFkaWFsTGluZWFyXCIgfSxcbiAgICAgICAgICAgICAgZWxlbWVudHM6IHsgbGluZTogeyB0ZW5zaW9uOiAwIH0gfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycy5yYWRhciA9IHQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IHQuZWxlbWVudHMuTGluZSxcbiAgICAgICAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IHQuZWxlbWVudHMuUG9pbnQsXG4gICAgICAgICAgICAgICAgbGlua1NjYWxlczogZS5ub29wLFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5kYXRhc2V0LFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICByID0gbi5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIGwgPSBhLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGEuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5saW5lLFxuICAgICAgICAgICAgICAgICAgICBkID0gYS5jaGFydC5zY2FsZTtcbiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gbC50ZW5zaW9uICYmXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gbC5saW5lVGVuc2lvbiAmJlxuICAgICAgICAgICAgICAgICAgICAobC5saW5lVGVuc2lvbiA9IGwudGVuc2lvbiksXG4gICAgICAgICAgICAgICAgICAgIGUuZXh0ZW5kKGkuZGF0YXNldCwge1xuICAgICAgICAgICAgICAgICAgICAgIF9kYXRhc2V0SW5kZXg6IGEuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgX2NoaWxkcmVuOiBvLFxuICAgICAgICAgICAgICAgICAgICAgIF9sb29wOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICBfbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbnNpb246IHIudGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIudGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVPckRlZmF1bHQobC5saW5lVGVuc2lvbiwgcy50ZW5zaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogci5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwuYmFja2dyb3VuZENvbG9yIHx8IHMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IHIuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbC5ib3JkZXJXaWR0aCB8fCBzLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHIuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbC5ib3JkZXJDb2xvciB8fCBzLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogci5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gci5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogdm9pZCAwICE9PSBsLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsLmZpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzLmZpbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDYXBTdHlsZTogci5ib3JkZXJDYXBTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuYm9yZGVyQ2FwU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsLmJvcmRlckNhcFN0eWxlIHx8IHMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoOiByLmJvcmRlckRhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmJvcmRlckRhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsLmJvcmRlckRhc2ggfHwgcy5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogci5ib3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gci5ib3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbC5ib3JkZXJEYXNoT2Zmc2V0IHx8IHMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckpvaW5TdHlsZTogci5ib3JkZXJKb2luU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyByLmJvcmRlckpvaW5TdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwuYm9yZGVySm9pblN0eWxlIHx8IHMuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVUb3A6IGQudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVCb3R0b206IGQuYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVaZXJvOiBkLmdldEJhc2VQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpLmRhdGFzZXQucGl2b3QoKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEudXBkYXRlRWxlbWVudChlLCBpLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYS51cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50OiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIHIgPSBuLmdldERhdGFzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IG4uY2hhcnQuc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBuLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBsLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShhLCByLmRhdGFbYV0pO1xuICAgICAgICAgICAgICAgICAgZS5leHRlbmQodCwge1xuICAgICAgICAgICAgICAgICAgICBfZGF0YXNldEluZGV4OiBuLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBfaW5kZXg6IGEsXG4gICAgICAgICAgICAgICAgICAgIF9zY2FsZTogbCxcbiAgICAgICAgICAgICAgICAgICAgX21vZGVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgeDogaSA/IGwueENlbnRlciA6IGQueCxcbiAgICAgICAgICAgICAgICAgICAgICB5OiBpID8gbC55Q2VudGVyIDogZC55LFxuICAgICAgICAgICAgICAgICAgICAgIHRlbnNpb246IG8udGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLnRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnRlbnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmxpbmUudGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogby5yYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gby5yYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wb2ludFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnBvaW50QmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogby5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucG9pbnRCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuYm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucG9pbnRCb3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuYm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBvLnBvaW50U3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gby5wb2ludFN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucG9pbnRTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIGhpdFJhZGl1czogby5oaXRSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gby5oaXRSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5oaXRSYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmhpdFJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICh0Ll9tb2RlbC5za2lwID0gby5za2lwXG4gICAgICAgICAgICAgICAgICAgICAgPyBvLnNraXBcbiAgICAgICAgICAgICAgICAgICAgICA6IGlzTmFOKHQuX21vZGVsLngpIHx8IGlzTmFOKHQuX21vZGVsLnkpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUJlemllckNvbnRyb2xQb2ludHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5jaGFydC5jaGFydEFyZWEsXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICAgICAgICAgICAgICAgIGUuZWFjaChhLmRhdGEsIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gaS5fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgciA9IGUuc3BsaW5lQ3VydmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZpb3VzSXRlbShhLmRhdGEsIG4sICEwKS5fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5uZXh0SXRlbShhLmRhdGEsIG4sICEwKS5fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihyLnByZXZpb3VzLngsIHQucmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGVmdFxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKHIucHJldmlvdXMueSwgdC5ib3R0b20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC50b3BcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5jb250cm9sUG9pbnROZXh0WCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oci5uZXh0LngsIHQucmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5sZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgKG8uY29udHJvbFBvaW50TmV4dFkgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKHIubmV4dC55LCB0LmJvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnRvcFxuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgIGkucGl2b3QoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0IHx8IDE7XG4gICAgICAgICAgICAgICAgICBlLmVhY2goYS5kYXRhLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB0LnRyYW5zaXRpb24oaSk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYS5kYXRhc2V0LnRyYW5zaXRpb24oaSkuZHJhdygpLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goYS5kYXRhLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHQuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0Ll9kYXRhc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBpID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgKG8ucmFkaXVzID0gaS5ob3ZlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICA/IGkuaG92ZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgOiBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRIb3ZlclJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuaG92ZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYmFja2dyb3VuZENvbG9yID0gaS5ob3ZlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gaS5ob3ZlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRIb3ZlckJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5nZXRIb3ZlckNvbG9yKG8uYmFja2dyb3VuZENvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlckNvbG9yID0gaS5ob3ZlckJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmhvdmVyQm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLnBvaW50SG92ZXJCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5nZXRIb3ZlckNvbG9yKG8uYm9yZGVyQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uYm9yZGVyV2lkdGggPSBpLmhvdmVyQm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICA/IGkuaG92ZXJCb3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRIb3ZlckJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvLmJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0Ll9kYXRhc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBpID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50O1xuICAgICAgICAgICAgICAgICAgKG8ucmFkaXVzID0gaS5yYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgPyBpLnJhZGl1c1xuICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KGEucmFkaXVzLCBuLCByLnJhZGl1cykpLFxuICAgICAgICAgICAgICAgICAgICAoby5iYWNrZ3JvdW5kQ29sb3IgPSBpLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gaS5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLnBvaW50QmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlckNvbG9yID0gaS5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gaS5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRCb3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgci5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChvLmJvcmRlcldpZHRoID0gaS5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gaS5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogZS5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucG9pbnRCb3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgci5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDIxOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMuZ2xvYmFsLmFuaW1hdGlvbiA9IHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IDFlMyxcbiAgICAgICAgICAgICAgZWFzaW5nOiBcImVhc2VPdXRRdWFydFwiLFxuICAgICAgICAgICAgICBvblByb2dyZXNzOiBlLm5vb3AsXG4gICAgICAgICAgICAgIG9uQ29tcGxldGU6IGUubm9vcCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5BbmltYXRpb24gPSB0LkVsZW1lbnQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RlcDogbnVsbCxcbiAgICAgICAgICAgICAgICBudW1TdGVwczogNjAsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBcIlwiLFxuICAgICAgICAgICAgICAgIHJlbmRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvblByb2dyZXNzOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uQ29tcGxldGU6IG51bGwsXG4gICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgKHQuYW5pbWF0aW9uU2VydmljZSA9IHtcbiAgICAgICAgICAgICAgICBmcmFtZUR1cmF0aW9uOiAxNyxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zOiBbXSxcbiAgICAgICAgICAgICAgICBkcm9wRnJhbWVzOiAwLFxuICAgICAgICAgICAgICAgIHJlcXVlc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgYWRkQW5pbWF0aW9uOiBmdW5jdGlvbiAodCwgZSwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgaSB8fCAodC5hbmltYXRpbmcgPSAhMCk7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IG4uYW5pbWF0aW9ucy5sZW5ndGg7ICsrbylcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uYW5pbWF0aW9uc1tvXS5jaGFydEluc3RhbmNlID09PSB0KVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChuLmFuaW1hdGlvbnNbb10uYW5pbWF0aW9uT2JqZWN0ID0gZSk7XG4gICAgICAgICAgICAgICAgICBuLmFuaW1hdGlvbnMucHVzaCh7IGNoYXJ0SW5zdGFuY2U6IHQsIGFuaW1hdGlvbk9iamVjdDogZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgMSA9PT0gbi5hbmltYXRpb25zLmxlbmd0aCAmJiBuLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmZpbmRJbmRleCh0aGlzLmFuaW1hdGlvbnMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmNoYXJ0SW5zdGFuY2UgPT09IHQ7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIC0xICE9PSBhICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKGEsIDEpLCAodC5hbmltYXRpbmcgPSAhMSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICBudWxsID09PSB0LnJlcXVlc3QgJiZcbiAgICAgICAgICAgICAgICAgICAgKHQucmVxdWVzdCA9IGUucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICh0LnJlcXVlc3QgPSBudWxsKSwgdC5zdGFydERpZ2VzdCgpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGFydERpZ2VzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBlID0gRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IDA7XG4gICAgICAgICAgICAgICAgICB0LmRyb3BGcmFtZXMgPiAxICYmXG4gICAgICAgICAgICAgICAgICAgICgoYSA9IE1hdGguZmxvb3IodC5kcm9wRnJhbWVzKSksXG4gICAgICAgICAgICAgICAgICAgICh0LmRyb3BGcmFtZXMgPSB0LmRyb3BGcmFtZXMgJSAxKSk7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHQuYW5pbWF0aW9ucy5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICh0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwID0gMCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXAgKz0gMSArIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5udW1TdGVwcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXAgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm51bVN0ZXBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0LnJlbmRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5jaGFydEluc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5vbkFuaW1hdGlvblByb2dyZXNzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uT2JqZWN0Lm9uQW5pbWF0aW9uUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICAgICAgXS5hbmltYXRpb25PYmplY3Qub25BbmltYXRpb25Qcm9ncmVzcy5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uY2hhcnRJbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXS5hbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXAgPT09XG4gICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5udW1TdGVwc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAodC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbkFuaW1hdGlvbkNvbXBsZXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25zW2ldLmFuaW1hdGlvbk9iamVjdC5vbkFuaW1hdGlvbkNvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmFuaW1hdGlvbk9iamVjdC5vbkFuaW1hdGlvbkNvbXBsZXRlLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnNbaV0uY2hhcnRJbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9uc1tpXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0LmFuaW1hdGlvbnNbaV0uY2hhcnRJbnN0YW5jZS5hbmltYXRpbmcgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQuYW5pbWF0aW9ucy5zcGxpY2UoaSwgMSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICsraTtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IChuIC0gZSkgLyB0LmZyYW1lRHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAodC5kcm9wRnJhbWVzICs9IG8pLFxuICAgICAgICAgICAgICAgICAgICB0LmFuaW1hdGlvbnMubGVuZ3RoID4gMCAmJiB0LnJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDIyOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gKHQuY2FudmFzSGVscGVycyA9IHt9KTtcbiAgICAgICAgICAgIGUuZHJhd1BvaW50ID0gZnVuY3Rpb24gKHQsIGUsIGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgdmFyIG8sIHIsIGwsIHMsIGQsIHU7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmXG4gICAgICAgICAgICAgICAgKChvID0gZS50b1N0cmluZygpKSxcbiAgICAgICAgICAgICAgICBcIltvYmplY3QgSFRNTEltYWdlRWxlbWVudF1cIiA9PT0gbyB8fFxuICAgICAgICAgICAgICAgICAgXCJbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XVwiID09PSBvKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgdC5kcmF3SW1hZ2UoZSwgaSAtIGUud2lkdGggLyAyLCBuIC0gZS5oZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgaWYgKCEoaXNOYU4oYSkgfHwgMCA+PSBhKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmFyYyhpLCBuLCBhLCAwLCAyICogTWF0aC5QSSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidHJpYW5nbGVcIjpcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAociA9ICgzICogYSkgLyBNYXRoLnNxcnQoMykpLFxuICAgICAgICAgICAgICAgICAgICAgIChkID0gKHIgKiBNYXRoLnNxcnQoMykpIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIHIgLyAyLCBuICsgZCAvIDMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGkgKyByIC8gMiwgbiArIGQgLyAzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpLCBuIC0gKDIgKiBkKSAvIDMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInJlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgKHUgPSAoMSAvIE1hdGguU1FSVDIpICogYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmZpbGxSZWN0KGkgLSB1LCBuIC0gdSwgMiAqIHUsIDIgKiB1KSxcbiAgICAgICAgICAgICAgICAgICAgICB0LnN0cm9rZVJlY3QoaSAtIHUsIG4gLSB1LCAyICogdSwgMiAqIHUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZWN0Um90XCI6XG4gICAgICAgICAgICAgICAgICAgICh1ID0gKDEgLyBNYXRoLlNRUlQyKSAqIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIHUsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGksIG4gKyB1KSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpICsgdSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSwgbiAtIHUpLFxuICAgICAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImNyb3NzXCI6XG4gICAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSwgbiArIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGksIG4gLSBhKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGEsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImNyb3NzUm90XCI6XG4gICAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgKGwgPSBNYXRoLmNvcyhNYXRoLlBJIC8gNCkgKiBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAocyA9IE1hdGguc2luKE1hdGguUEkgLyA0KSAqIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubW92ZVRvKGkgLSBsLCBuIC0gcyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGwsIG4gKyBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmVUbyhpIC0gbCwgbiArIHMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGkgKyBsLCBuIC0gcyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwic3RhclwiOlxuICAgICAgICAgICAgICAgICAgICB0LmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubW92ZVRvKGksIG4gKyBhKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpLCBuIC0gYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIGEsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGkgKyBhLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICAobCA9IE1hdGguY29zKE1hdGguUEkgLyA0KSAqIGEpLFxuICAgICAgICAgICAgICAgICAgICAgIChzID0gTWF0aC5zaW4oTWF0aC5QSSAvIDQpICogYSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIGwsIG4gLSBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmxpbmVUbyhpICsgbCwgbiArIHMpLFxuICAgICAgICAgICAgICAgICAgICAgIHQubW92ZVRvKGkgLSBsLCBuICsgcyksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGwsIG4gLSBzKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5lXCI6XG4gICAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSAtIGEsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHQubGluZVRvKGkgKyBhLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXNoXCI6XG4gICAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oaSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdC5saW5lVG8oaSArIGEsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMjM6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZSh0LCBlKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gci5nZXRTdHlsZSh0LCBlKSxcbiAgICAgICAgICAgICAgICBpID0gYSAmJiBhLm1hdGNoKC8oXFxkKylweC8pO1xuICAgICAgICAgICAgICByZXR1cm4gaSA/IE51bWJlcihpWzFdKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCwgYSkge1xuICAgICAgICAgICAgICB2YXIgaSA9IHQuc3R5bGUsXG4gICAgICAgICAgICAgICAgbiA9IHQuZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpLFxuICAgICAgICAgICAgICAgIG8gPSB0LmdldEF0dHJpYnV0ZShcIndpZHRoXCIpO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKCh0Ll9jaGFydGpzID0ge1xuICAgICAgICAgICAgICAgICAgaW5pdGlhbDoge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG4sXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBvLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGkuZGlzcGxheSxcbiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGkuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoaS5kaXNwbGF5ID0gaS5kaXNwbGF5IHx8IFwiYmxvY2tcIiksXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbyB8fCBcIlwiID09PSBvKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGUodCwgXCJ3aWR0aFwiKTtcbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHIgJiYgKHQud2lkdGggPSByKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbiB8fCBcIlwiID09PSBuKVxuICAgICAgICAgICAgICAgIGlmIChcIlwiID09PSB0LnN0eWxlLmhlaWdodClcbiAgICAgICAgICAgICAgICAgIHQuaGVpZ2h0ID0gdC53aWR0aCAvIChhLm9wdGlvbnMuYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbCA9IGUodCwgXCJoZWlnaHRcIik7XG4gICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHIgJiYgKHQuaGVpZ2h0ID0gbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGkodCkge1xuICAgICAgICAgICAgICBpZiAodC5fY2hhcnRqcykge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdC5fY2hhcnRqcy5pbml0aWFsO1xuICAgICAgICAgICAgICAgIFtcImhlaWdodFwiLCBcIndpZHRoXCJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gZVthXTtcbiAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gaSB8fCBudWxsID09PSBpXG4gICAgICAgICAgICAgICAgICAgID8gdC5yZW1vdmVBdHRyaWJ1dGUoYSlcbiAgICAgICAgICAgICAgICAgICAgOiB0LnNldEF0dHJpYnV0ZShhLCBpKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHIuZWFjaChlLnN0eWxlIHx8IHt9LCBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICB0LnN0eWxlW2FdID0gZTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKHQud2lkdGggPSB0LndpZHRoKSxcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0Ll9jaGFydGpzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBuKHQsIGUpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChcInN0cmluZ1wiID09IHR5cGVvZiB0XG4gICAgICAgICAgICAgICAgICA/ICh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCkpXG4gICAgICAgICAgICAgICAgICA6IHQubGVuZ3RoICYmICh0ID0gdFswXSksXG4gICAgICAgICAgICAgICAgdCAmJiB0LmNhbnZhcyAmJiAodCA9IHQuY2FudmFzKSxcbiAgICAgICAgICAgICAgICB0IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdC5nZXRDb250ZXh0ICYmIHQuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgICAgIGlmIChpIGluc3RhbmNlb2YgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSByZXR1cm4gYSh0LCBlKSwgaTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG8oZSkge1xuICAgICAgICAgICAgICBlID0gZSB8fCB7fTtcbiAgICAgICAgICAgICAgdmFyIGEgPSAoZS5kYXRhID0gZS5kYXRhIHx8IHt9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoYS5kYXRhc2V0cyA9IGEuZGF0YXNldHMgfHwgW10pLFxuICAgICAgICAgICAgICAgIChhLmxhYmVscyA9IGEubGFiZWxzIHx8IFtdKSxcbiAgICAgICAgICAgICAgICAoZS5vcHRpb25zID0gci5jb25maWdNZXJnZShcbiAgICAgICAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLFxuICAgICAgICAgICAgICAgICAgdC5kZWZhdWx0c1tlLnR5cGVdLFxuICAgICAgICAgICAgICAgICAgZS5vcHRpb25zIHx8IHt9XG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHIgPSB0LmhlbHBlcnM7XG4gICAgICAgICAgICAodC50eXBlcyA9IHt9KSxcbiAgICAgICAgICAgICAgKHQuaW5zdGFuY2VzID0ge30pLFxuICAgICAgICAgICAgICAodC5jb250cm9sbGVycyA9IHt9KSxcbiAgICAgICAgICAgICAgKHQuQ29udHJvbGxlciA9IGZ1bmN0aW9uIChlLCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGEgPSBvKGEpO1xuICAgICAgICAgICAgICAgIHZhciBzID0gbihlLCBhKSxcbiAgICAgICAgICAgICAgICAgIGQgPSBzICYmIHMuY2FudmFzLFxuICAgICAgICAgICAgICAgICAgdSA9IGQgJiYgZC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICBjID0gZCAmJiBkLndpZHRoO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAoaS5jdHggPSBzKSxcbiAgICAgICAgICAgICAgICAgIChpLmNhbnZhcyA9IGQpLFxuICAgICAgICAgICAgICAgICAgKGkuY29uZmlnID0gYSksXG4gICAgICAgICAgICAgICAgICAoaS53aWR0aCA9IGMpLFxuICAgICAgICAgICAgICAgICAgKGkuaGVpZ2h0ID0gdSksXG4gICAgICAgICAgICAgICAgICAoaS5hc3BlY3RSYXRpbyA9IHUgPyBjIC8gdSA6IG51bGwpLFxuICAgICAgICAgICAgICAgICAgKGwuaWQgPSByLnVpZCgpKSxcbiAgICAgICAgICAgICAgICAgIChsLmNoYXJ0ID0gaSksXG4gICAgICAgICAgICAgICAgICAobC5jb25maWcgPSBhKSxcbiAgICAgICAgICAgICAgICAgIChsLm9wdGlvbnMgPSBhLm9wdGlvbnMpLFxuICAgICAgICAgICAgICAgICAgKGwuX2J1ZmZlcmVkUmVuZGVyID0gITEpLFxuICAgICAgICAgICAgICAgICAgKHQuaW5zdGFuY2VzW2wuaWRdID0gbCksXG4gICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobCwgXCJkYXRhXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGwuY29uZmlnLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHMgJiYgZFxuICAgICAgICAgICAgICAgICAgICA/IChyLnJldGluYVNjYWxlKGkpLFxuICAgICAgICAgICAgICAgICAgICAgIGwub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoci5hZGRSZXNpemVMaXN0ZW5lcihkLnBhcmVudE5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbC5yZXNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC5yZXNpemUoITApKSxcbiAgICAgICAgICAgICAgICAgICAgICBsLmluaXRpYWxpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgICBsKVxuICAgICAgICAgICAgICAgICAgICA6IChjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBsKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICByLmV4dGVuZCh0LkNvbnRyb2xsZXIucHJvdG90eXBlLCB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcImJlZm9yZUluaXRcIiwgW2VdKSxcbiAgICAgICAgICAgICAgICAgICAgZS5iaW5kRXZlbnRzKCksXG4gICAgICAgICAgICAgICAgICAgIGUuZW5zdXJlU2NhbGVzSGF2ZUlEcygpLFxuICAgICAgICAgICAgICAgICAgICBlLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpLFxuICAgICAgICAgICAgICAgICAgICBlLmJ1aWxkU2NhbGVzKCksXG4gICAgICAgICAgICAgICAgICAgIGUudXBkYXRlTGF5b3V0KCksXG4gICAgICAgICAgICAgICAgICAgIGUucmVzZXRFbGVtZW50cygpLFxuICAgICAgICAgICAgICAgICAgICBlLmluaXRUb29sVGlwKCksXG4gICAgICAgICAgICAgICAgICAgIGUudXBkYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJhZnRlckluaXRcIiwgW2VdKSxcbiAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gci5jbGVhcih0aGlzLmNoYXJ0KSwgdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LmFuaW1hdGlvblNlcnZpY2UuY2FuY2VsQW5pbWF0aW9uKHRoaXMpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkuY2FudmFzLFxuICAgICAgICAgICAgICAgICAgICBsID0gKG4ubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiBpLmFzcGVjdFJhdGlvKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzID0gTWF0aC5mbG9vcihyLmdldE1heGltdW1XaWR0aChvKSksXG4gICAgICAgICAgICAgICAgICAgIGQgPSBNYXRoLmZsb29yKGwgPyBzIC8gbCA6IHIuZ2V0TWF4aW11bUhlaWdodChvKSk7XG4gICAgICAgICAgICAgICAgICBpZiAoaS53aWR0aCAhPT0gcyB8fCBpLmhlaWdodCAhPT0gZCkge1xuICAgICAgICAgICAgICAgICAgICAoby53aWR0aCA9IGkud2lkdGggPSBzKSxcbiAgICAgICAgICAgICAgICAgICAgICAoby5oZWlnaHQgPSBpLmhlaWdodCA9IGQpLFxuICAgICAgICAgICAgICAgICAgICAgIChvLnN0eWxlLndpZHRoID0gcyArIFwicHhcIiksXG4gICAgICAgICAgICAgICAgICAgICAgKG8uc3R5bGUuaGVpZ2h0ID0gZCArIFwicHhcIiksXG4gICAgICAgICAgICAgICAgICAgICAgci5yZXRpbmFTY2FsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB7IHdpZHRoOiBzLCBoZWlnaHQ6IGQgfTtcbiAgICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcInJlc2l6ZVwiLCBbYSwgdV0pLFxuICAgICAgICAgICAgICAgICAgICAgIGEub3B0aW9ucy5vblJlc2l6ZSAmJiBhLm9wdGlvbnMub25SZXNpemUoYSwgdSksXG4gICAgICAgICAgICAgICAgICAgICAgZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEuc3RvcCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS51cGRhdGUoYS5vcHRpb25zLnJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbikpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5zdXJlU2NhbGVzSGF2ZUlEczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0LnNjYWxlcyB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuc2NhbGU7XG4gICAgICAgICAgICAgICAgICByLmVhY2goZS54QXhlcywgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5pZCA9IHQuaWQgfHwgXCJ4LWF4aXMtXCIgKyBlO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHIuZWFjaChlLnlBeGVzLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHQuaWQgPSB0LmlkIHx8IFwieS1heGlzLVwiICsgZTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGEgJiYgKGEuaWQgPSBhLmlkIHx8IFwic2NhbGVcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidWlsZFNjYWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpID0gKGUuc2NhbGVzID0ge30pLFxuICAgICAgICAgICAgICAgICAgICBuID0gW107XG4gICAgICAgICAgICAgICAgICBhLnNjYWxlcyAmJlxuICAgICAgICAgICAgICAgICAgICAobiA9IG4uY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICAgIChhLnNjYWxlcy54QXhlcyB8fCBbXSkubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBvcHRpb25zOiB0LCBkdHlwZTogXCJjYXRlZ29yeVwiIH07XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgKGEuc2NhbGVzLnlBeGVzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG9wdGlvbnM6IHQsIGR0eXBlOiBcImxpbmVhclwiIH07XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIGEuc2NhbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICBuLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogYS5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR0eXBlOiBcInJhZGlhbExpbmVhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWZhdWx0OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgci5lYWNoKG4sIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBhLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gci5nZXRWYWx1ZU9yRGVmYXVsdChuLnR5cGUsIGEuZHR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHQuc2NhbGVTZXJ2aWNlLmdldFNjYWxlQ29uc3RydWN0b3Iobyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbi5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4OiBlLmNoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpW3MuaWRdID0gcyksIGEuaXNEZWZhdWx0ICYmIChlLnNjYWxlID0gcyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdC5zY2FsZVNlcnZpY2UuYWRkU2NhbGVzVG9MYXlvdXQodGhpcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGVMYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHQubGF5b3V0U2VydmljZS51cGRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IFtdO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoci5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgIGUuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAobiwgbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlLmdldERhdGFzZXRNZXRhKG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgci50eXBlIHx8IChyLnR5cGUgPSBuLnR5cGUgfHwgZS5jb25maWcudHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaChyLnR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByLmNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHIuY29udHJvbGxlci51cGRhdGVJbmRleChvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKChyLmNvbnRyb2xsZXIgPSBuZXcgdC5jb250cm9sbGVyc1tyLnR5cGVdKGUsIG8pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaChyLmNvbnRyb2xsZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYS5sZW5ndGggPiAxKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMTsgbiA8IGEubGVuZ3RoOyBuKyspXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGFbbl0gIT09IGFbbiAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmlzQ29tYm8gPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzZXRFbGVtZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgci5lYWNoKFxuICAgICAgICAgICAgICAgICAgICB0LmRhdGEuZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5nZXREYXRhc2V0TWV0YShhKS5jb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldEVsZW1lbnRzKCksIHRoaXMudG9vbHRpcC5pbml0aWFsaXplKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYmVmb3JlVXBkYXRlXCIsIFtpXSksXG4gICAgICAgICAgICAgICAgICAgIChpLnRvb2x0aXAuX2RhdGEgPSBpLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBpLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgICAgICAgICAgICAgICAgci5lYWNoKFxuICAgICAgICAgICAgICAgICAgICBpLmRhdGEuZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaS5nZXREYXRhc2V0TWV0YShlKS5jb250cm9sbGVyLmJ1aWxkT3JVcGRhdGVFbGVtZW50cygpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0LmxheW91dFNlcnZpY2UudXBkYXRlKGksIGkuY2hhcnQud2lkdGgsIGkuY2hhcnQuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcImFmdGVyU2NhbGVVcGRhdGVcIiwgW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgci5lYWNoKG4sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgaS51cGRhdGVEYXRhc2V0cygpLFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYWZ0ZXJVcGRhdGVcIiwgW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgaS5fYnVmZmVyZWRSZW5kZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IChpLl9idWZmZXJlZFJlcXVlc3QgPSB7IGxhenk6IGEsIGR1cmF0aW9uOiBlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBpLnJlbmRlcihlLCBhKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFzZXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICBpZiAodC5wbHVnaW5zLm5vdGlmeShcImJlZm9yZURhdGFzZXRzVXBkYXRlXCIsIFtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gMCwgYSA9IGkuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGEgPiBlOyArK2UpXG4gICAgICAgICAgICAgICAgICAgICAgaS5nZXREYXRhc2V0TWV0YShlKS5jb250cm9sbGVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYWZ0ZXJEYXRhc2V0c1VwZGF0ZVwiLCBbaV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcImJlZm9yZVJlbmRlclwiLCBbaV0pO1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBpLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICAgICAgICgoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZSAmJiAwICE9PSBlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBlICYmIDAgIT09IG4uZHVyYXRpb24pKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gbmV3IHQuQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIChvLm51bVN0ZXBzID0gKGUgfHwgbi5kdXJhdGlvbikgLyAxNi42NiksXG4gICAgICAgICAgICAgICAgICAgICAgKG8uZWFzaW5nID0gbi5lYXNpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgIChvLnJlbmRlciA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHIuZWFzaW5nRWZmZWN0c1tlLmVhc2luZ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlLmN1cnJlbnRTdGVwIC8gZS5udW1TdGVwcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGEoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRyYXcobiwgaSwgZS5jdXJyZW50U3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgKG8ub25BbmltYXRpb25Qcm9ncmVzcyA9IG4ub25Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgICAgICAgKG8ub25BbmltYXRpb25Db21wbGV0ZSA9IG4ub25Db21wbGV0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRpb25TZXJ2aWNlLmFkZEFuaW1hdGlvbihpLCBvLCBlLCBhKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBpLmRyYXcoKSxcbiAgICAgICAgICAgICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuLm9uQ29tcGxldGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ub25Db21wbGV0ZS5jYWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuLm9uQ29tcGxldGUuY2FsbChpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUgfHwgMTtcbiAgICAgICAgICAgICAgICAgIGEuY2xlYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdC5wbHVnaW5zLm5vdGlmeShcImJlZm9yZURyYXdcIiwgW2EsIGldKSxcbiAgICAgICAgICAgICAgICAgICAgci5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgIGEuYm94ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZHJhdyhhLmNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGEuc2NhbGUgJiYgYS5zY2FsZS5kcmF3KCksXG4gICAgICAgICAgICAgICAgICAgIHQucGx1Z2lucy5ub3RpZnkoXCJiZWZvcmVEYXRhc2V0c0RyYXdcIiwgW2EsIGldKSxcbiAgICAgICAgICAgICAgICAgICAgci5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgIGEuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5pc0RhdGFzZXRWaXNpYmxlKGkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci5kcmF3KGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYWZ0ZXJEYXRhc2V0c0RyYXdcIiwgW2EsIGldKSxcbiAgICAgICAgICAgICAgICAgICAgYS50b29sdGlwLnRyYW5zaXRpb24oaSkuZHJhdygpLFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiYWZ0ZXJEcmF3XCIsIFthLCBpXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50QXRFdmVudDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LkludGVyYWN0aW9uLm1vZGVzLnNpbmdsZSh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRzQXRFdmVudDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LkludGVyYWN0aW9uLm1vZGVzLmxhYmVsKHRoaXMsIGUsIHsgaW50ZXJzZWN0OiAhMCB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRzQXRYQXhpczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LkludGVyYWN0aW9uLm1vZGVzW1wieC1heGlzXCJdKHRoaXMsIGUsIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0OiAhMCxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZTogZnVuY3Rpb24gKGUsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5JbnRlcmFjdGlvbi5tb2Rlc1thXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG4gPyBuKHRoaXMsIGUsIGkpIDogW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXREYXRhc2V0QXRFdmVudDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LkludGVyYWN0aW9uLm1vZGVzLmRhdGFzZXQodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXREYXRhc2V0TWV0YTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IGUuZGF0YS5kYXRhc2V0c1t0XTtcbiAgICAgICAgICAgICAgICAgIGEuX21ldGEgfHwgKGEuX21ldGEgPSB7fSk7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IGEuX21ldGFbZS5pZF07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKGkgPSBhLl9tZXRhW2UuaWRdID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXNJRDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeUF4aXNJRDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAwLCBlID0gMCwgYSA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGEgPiBlO1xuICAgICAgICAgICAgICAgICAgICArK2VcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RhdGFzZXRWaXNpYmxlKGUpICYmIHQrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNEYXRhc2V0VmlzaWJsZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5nZXREYXRhc2V0TWV0YSh0KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcImJvb2xlYW5cIiA9PSB0eXBlb2YgZS5oaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgPyAhZS5oaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgOiAhdGhpcy5kYXRhLmRhdGFzZXRzW3RdLmhpZGRlbjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlTGVnZW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxlZ2VuZENhbGxiYWNrKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBsID0gby5jaGFydC5jYW52YXM7XG4gICAgICAgICAgICAgICAgICBmb3IgKG8uc3RvcCgpLCBhID0gMCwgbiA9IG8uZGF0YS5kYXRhc2V0cy5sZW5ndGg7IG4gPiBhOyArK2EpXG4gICAgICAgICAgICAgICAgICAgIChlID0gby5nZXREYXRhc2V0TWV0YShhKSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5jb250cm9sbGVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5jb250cm9sbGVyLmRlc3Ryb3koKSwgKGUuY29udHJvbGxlciA9IG51bGwpKTtcbiAgICAgICAgICAgICAgICAgIGwgJiZcbiAgICAgICAgICAgICAgICAgICAgKHIudW5iaW5kRXZlbnRzKG8sIG8uZXZlbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgci5yZW1vdmVSZXNpemVMaXN0ZW5lcihsLnBhcmVudE5vZGUpLFxuICAgICAgICAgICAgICAgICAgICByLmNsZWFyKG8uY2hhcnQpLFxuICAgICAgICAgICAgICAgICAgICBpKGwpLFxuICAgICAgICAgICAgICAgICAgICAoby5jaGFydC5jYW52YXMgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgKG8uY2hhcnQuY3R4ID0gbnVsbCkpLFxuICAgICAgICAgICAgICAgICAgICB0LnBsdWdpbnMubm90aWZ5KFwiZGVzdHJveVwiLCBbb10pLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdC5pbnN0YW5jZXNbby5pZF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b0Jhc2U2NEltYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5jYW52YXMudG9EYXRhVVJMLmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LmNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5pdFRvb2xUaXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIChlLnRvb2x0aXAgPSBuZXcgdC5Ub29sdGlwKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgX2NoYXJ0OiBlLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgIF9jaGFydEluc3RhbmNlOiBlLFxuICAgICAgICAgICAgICAgICAgICAgIF9kYXRhOiBlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgX29wdGlvbnM6IGUub3B0aW9ucy50b29sdGlwcyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIGUudG9vbHRpcC5pbml0aWFsaXplKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiaW5kRXZlbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICByLmJpbmRFdmVudHModCwgdC5vcHRpb25zLmV2ZW50cywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5ldmVudEhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgciA9IGEgPyBcInNldEhvdmVyU3R5bGVcIiA6IFwicmVtb3ZlSG92ZXJTdHlsZVwiO1xuICAgICAgICAgICAgICAgICAgZm9yIChuID0gMCwgbyA9IHQubGVuZ3RoOyBvID4gbjsgKytuKVxuICAgICAgICAgICAgICAgICAgICAoaSA9IHRbbl0pLFxuICAgICAgICAgICAgICAgICAgICAgIGkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoaS5fZGF0YXNldEluZGV4KS5jb250cm9sbGVyW3JdKGkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5sZWdlbmQsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLnRvb2x0aXAsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBlLm9wdGlvbnMuaG92ZXI7XG4gICAgICAgICAgICAgICAgICAoZS5fYnVmZmVyZWRSZW5kZXIgPSAhMCksIChlLl9idWZmZXJlZFJlcXVlc3QgPSBudWxsKTtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5oYW5kbGVFdmVudCh0KTtcbiAgICAgICAgICAgICAgICAgIChvIHw9IGEgJiYgYS5oYW5kbGVFdmVudCh0KSksIChvIHw9IGkgJiYgaS5oYW5kbGVFdmVudCh0KSk7XG4gICAgICAgICAgICAgICAgICB2YXIgciA9IGUuX2J1ZmZlcmVkUmVxdWVzdDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHJcbiAgICAgICAgICAgICAgICAgICAgICA/IGUucmVuZGVyKHIuZHVyYXRpb24sIHIubGF6eSlcbiAgICAgICAgICAgICAgICAgICAgICA6IG8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFlLmFuaW1hdGluZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuc3RvcCgpLCBlLnJlbmRlcihuLmFuaW1hdGlvbkR1cmF0aW9uLCAhMCkpLFxuICAgICAgICAgICAgICAgICAgICAoZS5fYnVmZmVyZWRSZW5kZXIgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgIChlLl9idWZmZXJlZFJlcXVlc3QgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5vcHRpb25zIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5ob3ZlcixcbiAgICAgICAgICAgICAgICAgICAgbiA9ICExO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKGUubGFzdEFjdGl2ZSA9IGUubGFzdEFjdGl2ZSB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgIFwibW91c2VvdXRcIiA9PT0gdC50eXBlXG4gICAgICAgICAgICAgICAgICAgICAgPyAoZS5hY3RpdmUgPSBbXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IChlLmFjdGl2ZSA9IGUuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSh0LCBpLm1vZGUsIGkpKSxcbiAgICAgICAgICAgICAgICAgICAgaS5vbkhvdmVyICYmIGkub25Ib3Zlci5jYWxsKGUsIGUuYWN0aXZlKSxcbiAgICAgICAgICAgICAgICAgICAgKFwibW91c2V1cFwiID09PSB0LnR5cGUgfHwgXCJjbGlja1wiID09PSB0LnR5cGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgYS5vbkNsaWNrICYmXG4gICAgICAgICAgICAgICAgICAgICAgYS5vbkNsaWNrLmNhbGwoZSwgdCwgZS5hY3RpdmUpLFxuICAgICAgICAgICAgICAgICAgICBlLmxhc3RBY3RpdmUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgZS51cGRhdGVIb3ZlclN0eWxlKGUubGFzdEFjdGl2ZSwgaS5tb2RlLCAhMSksXG4gICAgICAgICAgICAgICAgICAgIGUuYWN0aXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgIGkubW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGUudXBkYXRlSG92ZXJTdHlsZShlLmFjdGl2ZSwgaS5tb2RlLCAhMCksXG4gICAgICAgICAgICAgICAgICAgIChuID0gIXIuYXJyYXlFcXVhbHMoZS5hY3RpdmUsIGUubGFzdEFjdGl2ZSkpLFxuICAgICAgICAgICAgICAgICAgICAoZS5sYXN0QWN0aXZlID0gZS5hY3RpdmUpLFxuICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDI0OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdC5fY2hhcnRqc1xuICAgICAgICAgICAgICAgID8gdm9pZCB0Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGUpXG4gICAgICAgICAgICAgICAgOiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX2NoYXJ0anNcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgbGlzdGVuZXJzOiBbZV0gfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgdm9pZCBuLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBcIm9uRGF0YVwiICsgZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGUuc2xpY2UoMSksXG4gICAgICAgICAgICAgICAgICAgICAgbiA9IHRbZV07XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbi5hcHBseSh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkuZWFjaCh0Ll9jaGFydGpzLmxpc3RlbmVycywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRbYV0gJiYgdFthXS5hcHBseSh0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhKHQsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSB0Ll9jaGFydGpzO1xuICAgICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gYS5saXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgICBvID0gaS5pbmRleE9mKGUpO1xuICAgICAgICAgICAgICAgIC0xICE9PSBvICYmIGkuc3BsaWNlKG8sIDEpLFxuICAgICAgICAgICAgICAgICAgaS5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgIChuLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdFtlXTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0Ll9jaGFydGpzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSB0LmhlbHBlcnMsXG4gICAgICAgICAgICAgIG4gPSBbXCJwdXNoXCIsIFwicG9wXCIsIFwic2hpZnRcIiwgXCJzcGxpY2VcIiwgXCJ1bnNoaWZ0XCJdO1xuICAgICAgICAgICAgKHQuRGF0YXNldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemUodCwgZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgaS5leHRlbmQodC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAoYS5jaGFydCA9IHQpLCAoYS5pbmRleCA9IGUpLCBhLmxpbmtTY2FsZXMoKSwgYS5hZGRFbGVtZW50cygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlSW5kZXg6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxpbmtTY2FsZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5nZXREYXRhc2V0KCk7XG4gICAgICAgICAgICAgICAgICBudWxsID09PSBlLnhBeGlzSUQgJiZcbiAgICAgICAgICAgICAgICAgICAgKGUueEF4aXNJRCA9XG4gICAgICAgICAgICAgICAgICAgICAgYS54QXhpc0lEIHx8IHQuY2hhcnQub3B0aW9ucy5zY2FsZXMueEF4ZXNbMF0uaWQpLFxuICAgICAgICAgICAgICAgICAgICBudWxsID09PSBlLnlBeGlzSUQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoZS55QXhpc0lEID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGEueUF4aXNJRCB8fCB0LmNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnlBeGVzWzBdLmlkKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldERhdGFzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRNZXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFNjYWxlRm9ySWQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5zY2FsZXNbdF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoITApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSAmJiBhKHRoaXMuX2RhdGEsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlTWV0YURhdGFzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuZGF0YXNldEVsZW1lbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZSAmJlxuICAgICAgICAgICAgICAgICAgICBuZXcgZSh7IF9jaGFydDogdC5jaGFydC5jaGFydCwgX2RhdGFzZXRJbmRleDogdC5pbmRleCB9KVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZU1ldGFEYXRhOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5kYXRhRWxlbWVudFR5cGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICAgIG5ldyBhKHtcbiAgICAgICAgICAgICAgICAgICAgICBfY2hhcnQ6IGUuY2hhcnQuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgX2RhdGFzZXRJbmRleDogZS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBfaW5kZXg6IHQsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWRkRWxlbWVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuZ2V0TWV0YSgpLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5nZXREYXRhc2V0KCkuZGF0YSB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkuZGF0YTtcbiAgICAgICAgICAgICAgICAgIGZvciAodCA9IDAsIGUgPSBuLmxlbmd0aDsgZSA+IHQ7ICsrdClcbiAgICAgICAgICAgICAgICAgICAgb1t0XSA9IG9bdF0gfHwgYS5jcmVhdGVNZXRhRGF0YSh0KTtcbiAgICAgICAgICAgICAgICAgIGkuZGF0YXNldCA9IGkuZGF0YXNldCB8fCBhLmNyZWF0ZU1ldGFEYXRhc2V0KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZGRFbGVtZW50QW5kUmVzZXQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY3JlYXRlTWV0YURhdGEodCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmdldE1ldGEoKS5kYXRhLnNwbGljZSh0LCAwLCBlKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGUsIHQsICEwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkT3JVcGRhdGVFbGVtZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gdC5nZXREYXRhc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmRhdGEgfHwgKGkuZGF0YSA9IFtdKTtcbiAgICAgICAgICAgICAgICAgIHQuX2RhdGEgIT09IG4gJiZcbiAgICAgICAgICAgICAgICAgICAgKHQuX2RhdGEgJiYgYSh0Ll9kYXRhLCB0KSwgZShuLCB0KSwgKHQuX2RhdGEgPSBuKSksXG4gICAgICAgICAgICAgICAgICAgIHQucmVzeW5jRWxlbWVudHMoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogaS5ub29wLFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQgfHwgMSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZ2V0TWV0YSgpLmRhdGE7XG4gICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwLCBhID0gbi5sZW5ndGg7IGEgPiBlOyArK2UpXG4gICAgICAgICAgICAgICAgICAgIG5bZV0udHJhbnNpdGlvbihpKS5kcmF3KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdC5fZGF0YXNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgbCA9IHQuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgKGwuYmFja2dyb3VuZENvbG9yID0gby5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgPyBvLmJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA6IHIoYS5iYWNrZ3JvdW5kQ29sb3IsIG4sIGUuYmFja2dyb3VuZENvbG9yKSksXG4gICAgICAgICAgICAgICAgICAgIChsLmJvcmRlckNvbG9yID0gby5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgID8gby5ib3JkZXJDb2xvclxuICAgICAgICAgICAgICAgICAgICAgIDogcihhLmJvcmRlckNvbG9yLCBuLCBlLmJvcmRlckNvbG9yKSksXG4gICAgICAgICAgICAgICAgICAgIChsLmJvcmRlcldpZHRoID0gby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgID8gby5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgIDogcihhLmJvcmRlcldpZHRoLCBuLCBlLmJvcmRlcldpZHRoKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdC5fZGF0YXNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5jdXN0b20gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIG8gPSBpLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuZ2V0SG92ZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgbCA9IHQuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgKGwuYmFja2dyb3VuZENvbG9yID0gbi5ob3ZlckJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgICAgICA/IG4uaG92ZXJCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgOiBvKGUuaG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGEsIHIobC5iYWNrZ3JvdW5kQ29sb3IpKSksXG4gICAgICAgICAgICAgICAgICAgIChsLmJvcmRlckNvbG9yID0gbi5ob3ZlckJvcmRlckNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmhvdmVyQm9yZGVyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICA6IG8oZS5ob3ZlckJvcmRlckNvbG9yLCBhLCByKGwuYm9yZGVyQ29sb3IpKSksXG4gICAgICAgICAgICAgICAgICAgIChsLmJvcmRlcldpZHRoID0gbi5ob3ZlckJvcmRlcldpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgPyBuLmhvdmVyQm9yZGVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICA6IG8oZS5ob3ZlckJvcmRlcldpZHRoLCBhLCBsLmJvcmRlcldpZHRoKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXN5bmNFbGVtZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBlID0gdC5nZXRNZXRhKCksXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0LmdldERhdGFzZXQoKS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgaSA+IG5cbiAgICAgICAgICAgICAgICAgICAgPyBlLmRhdGEuc3BsaWNlKG4sIGkgLSBuKVxuICAgICAgICAgICAgICAgICAgICA6IG4gPiBpICYmIHQuaW5zZXJ0RWxlbWVudHMoaSwgbiAtIGkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0RWxlbWVudHM6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gMDsgZSA+IGE7ICsrYSkgdGhpcy5hZGRFbGVtZW50QW5kUmVzZXQodCArIGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25EYXRhUHVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRFbGVtZW50cyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREYXRhc2V0KCkuZGF0YS5sZW5ndGggLSAxLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25EYXRhUG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmdldE1ldGEoKS5kYXRhLnBvcCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25EYXRhU2hpZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWV0YSgpLmRhdGEuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRGF0YVNwbGljZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKHQsIGUpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydEVsZW1lbnRzKHQsIGFyZ3VtZW50cy5sZW5ndGggLSAyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRGF0YVVuc2hpZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0RWxlbWVudHMoMCwgYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCA9IGkuaW5oZXJpdHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDI1OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgKHQuZWxlbWVudHMgPSB7fSksXG4gICAgICAgICAgICAgICh0LkVsZW1lbnQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIGUuZXh0ZW5kKHRoaXMsIHQpLCB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGUuZXh0ZW5kKHQuRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmhpZGRlbiA9ICExO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGl2b3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHQuX3ZpZXcgfHwgKHQuX3ZpZXcgPSBlLmNsb25lKHQuX21vZGVsKSksXG4gICAgICAgICAgICAgICAgICAgICh0Ll9zdGFydCA9IGUuY2xvbmUodC5fdmlldykpLFxuICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGEuX3ZpZXcgfHwgKGEuX3ZpZXcgPSBlLmNsb25lKGEuX21vZGVsKSksXG4gICAgICAgICAgICAgICAgICAgIDEgPT09IHRcbiAgICAgICAgICAgICAgICAgICAgICA/ICgoYS5fdmlldyA9IGEuX21vZGVsKSwgKGEuX3N0YXJ0ID0gbnVsbCksIGEpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoYS5fc3RhcnQgfHwgYS5waXZvdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLl9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJfXCIgPT09IG5bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGEuX3ZpZXcuaGFzT3duUHJvcGVydHkobikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gYS5fdmlld1tuXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbG9yKGEuX21vZGVsW25dKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1peChlLmNvbG9yKGEuX3N0YXJ0W25dKSwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5fdmlld1tuXSA9IG8ucmdiU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLl92aWV3W25dID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBhLl9zdGFydFtuXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKGEuX3N0YXJ0W25dKSA9PT0gITFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYS5fc3RhcnRbbl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5fdmlld1tuXSA9IChhLl9tb2RlbFtuXSAtIGwpICogdCArIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYS5fdmlld1tuXSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1iZXJcIiAhPSB0eXBlb2YgaSB8fCBpc05hTihhLl92aWV3W25dKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhLl92aWV3W25dID0gaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoYS5fdmlld1tuXSA9IGkgKiB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB0aGlzLl9tb2RlbC54LCB5OiB0aGlzLl9tb2RlbC55IH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoYXNWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuaXNOdW1iZXIodGhpcy5fbW9kZWwueCkgJiYgZS5pc051bWJlcih0aGlzLl9tb2RlbC55KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuRWxlbWVudC5leHRlbmQgPSBlLmluaGVyaXRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAyNjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIHZhciBpID0gdCgzKTtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZSh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgID8gKChpID0gcGFyc2VJbnQodCwgMTApKSxcbiAgICAgICAgICAgICAgICAgICAgLTEgIT09IHQuaW5kZXhPZihcIiVcIikgJiYgKGkgPSAoaSAvIDEwMCkgKiBlLnBhcmVudE5vZGVbYV0pKVxuICAgICAgICAgICAgICAgICAgOiAoaSA9IHQpLFxuICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0ICYmIG51bGwgIT09IHQgJiYgXCJub25lXCIgIT09IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBuKHQsIGksIG4pIHtcbiAgICAgICAgICAgICAgdmFyIG8gPSBkb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICAgICAgICAgICAgICByID0gdC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgIGwgPSBvLmdldENvbXB1dGVkU3R5bGUodClbaV0sXG4gICAgICAgICAgICAgICAgcyA9IG8uZ2V0Q29tcHV0ZWRTdHlsZShyKVtpXSxcbiAgICAgICAgICAgICAgICBkID0gYShsKSxcbiAgICAgICAgICAgICAgICB1ID0gYShzKSxcbiAgICAgICAgICAgICAgICBjID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICByZXR1cm4gZCB8fCB1XG4gICAgICAgICAgICAgICAgPyBNYXRoLm1pbihkID8gZShsLCB0LCBuKSA6IGMsIHUgPyBlKHMsIHIsIG4pIDogYylcbiAgICAgICAgICAgICAgICA6IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG8gPSAodC5oZWxwZXJzID0ge30pO1xuICAgICAgICAgICAgKG8uZWFjaCA9IGZ1bmN0aW9uICh0LCBlLCBhLCBpKSB7XG4gICAgICAgICAgICAgIHZhciBuLCByO1xuICAgICAgICAgICAgICBpZiAoby5pc0FycmF5KHQpKVxuICAgICAgICAgICAgICAgIGlmICgoKHIgPSB0Lmxlbmd0aCksIGkpKVxuICAgICAgICAgICAgICAgICAgZm9yIChuID0gciAtIDE7IG4gPj0gMDsgbi0tKSBlLmNhbGwoYSwgdFtuXSwgbik7XG4gICAgICAgICAgICAgICAgZWxzZSBmb3IgKG4gPSAwOyByID4gbjsgbisrKSBlLmNhbGwoYSwgdFtuXSwgbik7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IE9iamVjdC5rZXlzKHQpO1xuICAgICAgICAgICAgICAgIGZvciAociA9IGwubGVuZ3RoLCBuID0gMDsgciA+IG47IG4rKykgZS5jYWxsKGEsIHRbbFtuXV0sIGxbbl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uY2xvbmUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0ge307XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8uZWFjaCh0LCBmdW5jdGlvbiAodCwgYSkge1xuICAgICAgICAgICAgICAgICAgICBvLmlzQXJyYXkodClcbiAgICAgICAgICAgICAgICAgICAgICA/IChlW2FdID0gdC5zbGljZSgwKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgbnVsbCAhPT0gdFxuICAgICAgICAgICAgICAgICAgICAgID8gKGVbYV0gPSBvLmNsb25lKHQpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGVbYV0gPSB0KTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5leHRlbmQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdFthXSA9IGU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGEgPSAxLFxuICAgICAgICAgICAgICAgICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIGkgPiBhO1xuICAgICAgICAgICAgICAgICAgYSsrXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgby5lYWNoKGFyZ3VtZW50c1thXSwgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5jb25maWdNZXJnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBvLmNsb25lKGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICBvLmVhY2goXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgby5lYWNoKGUsIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGEuaGFzT3duUHJvcGVydHkoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuID8gYVtpXSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzY2FsZXNcIiA9PT0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhW2ldID0gby5zY2FsZU1lcmdlKHIsIGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwic2NhbGVcIiA9PT0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhW2ldID0gby5jb25maWdNZXJnZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNjYWxlU2VydmljZS5nZXRTY2FsZURlZmF1bHRzKGUudHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAhbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgIT0gdHlwZW9mIHIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmlzQXJyYXkocikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSByIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uaXNBcnJheShlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhW2ldID0gZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoYVtpXSA9IG8uY29uZmlnTWVyZ2UociwgZSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5zY2FsZU1lcmdlID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IG8uY2xvbmUoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8uZWFjaChhLCBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICBcInhBeGVzXCIgPT09IGEgfHwgXCJ5QXhlc1wiID09PSBhXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmhhc093blByb3BlcnR5KGEpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG8uZWFjaChlLCBmdW5jdGlvbiAoZSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gby5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInhBeGVzXCIgPT09IGEgPyBcImNhdGVnb3J5XCIgOiBcImxpbmVhclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHQuc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHMocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA+PSBpW2FdLmxlbmd0aCB8fCAhaVthXVtuXS50eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGlbYV0ucHVzaChvLmNvbmZpZ01lcmdlKGwsIGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlLnR5cGUgJiYgZS50eXBlICE9PSBpW2FdW25dLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGlbYV1bbl0gPSBvLmNvbmZpZ01lcmdlKGlbYV1bbl0sIGwsIGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoaVthXVtuXSA9IG8uY29uZmlnTWVyZ2UoaVthXVtuXSwgZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGlbYV0gPSBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uZWFjaChlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gby5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwieEF4ZXNcIiA9PT0gYSA/IFwiY2F0ZWdvcnlcIiA6IFwibGluZWFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlbYV0ucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uY29uZmlnTWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHMobiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGkuaGFzT3duUHJvcGVydHkoYSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGlbYV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT09IGlbYV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGVcbiAgICAgICAgICAgICAgICAgICAgICA/IChpW2FdID0gby5jb25maWdNZXJnZShpW2FdLCBlKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IChpW2FdID0gZSk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0ID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0IHx8IG51bGwgPT09IHRcbiAgICAgICAgICAgICAgICAgID8gYVxuICAgICAgICAgICAgICAgICAgOiBvLmlzQXJyYXkodClcbiAgICAgICAgICAgICAgICAgID8gZSA8IHQubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8gdFtlXVxuICAgICAgICAgICAgICAgICAgICA6IGFcbiAgICAgICAgICAgICAgICAgIDogdDtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldFZhbHVlT3JEZWZhdWx0ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ID8gZSA6IHQ7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5pbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2ZcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmluZGV4T2YoZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gMCwgaSA9IHQubGVuZ3RoOyBpID4gYTsgKythKVxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0W2FdID09PSBlKSByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLndoZXJlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoby5pc0FycmF5KHQpICYmIEFycmF5LnByb3RvdHlwZS5maWx0ZXIpIHJldHVybiB0LmZpbHRlcihlKTtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICBvLmVhY2godCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZSh0KSAmJiBhLnB1c2godCk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZmluZEluZGV4ID0gQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZmluZEluZGV4KGUsIGEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IHZvaWQgMCA9PT0gYSA/IHQgOiBhO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHQubGVuZ3RoOyBuID4gaTsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmNhbGwoYSwgdFtpXSwgaSwgdCkpIHJldHVybiBpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZmluZE5leHRXaGVyZSA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gYSB8fCBudWxsID09PSBhKSAmJiAoYSA9IC0xKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYSArIDE7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHRbaV07XG4gICAgICAgICAgICAgICAgICBpZiAoZShuKSkgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZmluZFByZXZpb3VzV2hlcmUgPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICh2b2lkIDAgPT09IGEgfHwgbnVsbCA9PT0gYSkgJiYgKGEgPSB0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGEgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0W2ldO1xuICAgICAgICAgICAgICAgICAgaWYgKGUobikpIHJldHVybiBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmluaGVyaXRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAgICAgdCAmJiB0Lmhhc093blByb3BlcnR5KFwiY29uc3RydWN0b3JcIilcbiAgICAgICAgICAgICAgICAgICAgICA/IHQuY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBpID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gYTtcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIChpLnByb3RvdHlwZSA9IGUucHJvdG90eXBlKSxcbiAgICAgICAgICAgICAgICAgIChhLnByb3RvdHlwZSA9IG5ldyBpKCkpLFxuICAgICAgICAgICAgICAgICAgKGEuZXh0ZW5kID0gby5pbmhlcml0cyksXG4gICAgICAgICAgICAgICAgICB0ICYmIG8uZXh0ZW5kKGEucHJvdG90eXBlLCB0KSxcbiAgICAgICAgICAgICAgICAgIChhLl9fc3VwZXJfXyA9IGUucHJvdG90eXBlKSxcbiAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubm9vcCA9IGZ1bmN0aW9uICgpIHt9KSxcbiAgICAgICAgICAgICAgKG8udWlkID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0Kys7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSkoKSksXG4gICAgICAgICAgICAgIChvLmlzTnVtYmVyID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodCkpICYmIGlzRmluaXRlKHQpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uYWxtb3N0RXF1YWxzID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModCAtIGUpIDwgYTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLm1heCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQucmVkdWNlKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oZSkgPyB0IDogTWF0aC5tYXgodCwgZSk7XG4gICAgICAgICAgICAgICAgfSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLm1pbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQucmVkdWNlKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oZSkgPyB0IDogTWF0aC5taW4odCwgZSk7XG4gICAgICAgICAgICAgICAgfSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnNpZ24gPSBNYXRoLnNpZ25cbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnNpZ24odCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQgPSArdCksIDAgPT09IHQgfHwgaXNOYU4odCkgPyB0IDogdCA+IDAgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubG9nMTAgPSBNYXRoLmxvZzEwXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5sb2cxMCh0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmxvZyh0KSAvIE1hdGguTE4xMDtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby50b1JhZGlhbnMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ICogKE1hdGguUEkgLyAxODApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8udG9EZWdyZWVzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCAqICgxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldEFuZ2xlRnJvbVBvaW50ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGUueCAtIHQueCxcbiAgICAgICAgICAgICAgICAgIGkgPSBlLnkgLSB0LnksXG4gICAgICAgICAgICAgICAgICBuID0gTWF0aC5zcXJ0KGEgKiBhICsgaSAqIGkpLFxuICAgICAgICAgICAgICAgICAgbyA9IE1hdGguYXRhbjIoaSwgYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8gPCAtMC41ICogTWF0aC5QSSAmJiAobyArPSAyICogTWF0aC5QSSksXG4gICAgICAgICAgICAgICAgICB7IGFuZ2xlOiBvLCBkaXN0YW5jZTogbiB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmRpc3RhbmNlQmV0d2VlblBvaW50cyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydChcbiAgICAgICAgICAgICAgICAgIE1hdGgucG93KGUueCAtIHQueCwgMikgKyBNYXRoLnBvdyhlLnkgLSB0LnksIDIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmFsaWFzUGl4ZWwgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ICUgMiA9PT0gMCA/IDAgOiAwLjU7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5zcGxpbmVDdXJ2ZSA9IGZ1bmN0aW9uICh0LCBlLCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSB0LnNraXAgPyBlIDogdCxcbiAgICAgICAgICAgICAgICAgIG8gPSBlLFxuICAgICAgICAgICAgICAgICAgciA9IGEuc2tpcCA/IGUgOiBhLFxuICAgICAgICAgICAgICAgICAgbCA9IE1hdGguc3FydChcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coby54IC0gbi54LCAyKSArIE1hdGgucG93KG8ueSAtIG4ueSwgMilcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBzID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhyLnggLSBvLngsIDIpICsgTWF0aC5wb3coci55IC0gby55LCAyKVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIGQgPSBsIC8gKGwgKyBzKSxcbiAgICAgICAgICAgICAgICAgIHUgPSBzIC8gKGwgKyBzKTtcbiAgICAgICAgICAgICAgICAoZCA9IGlzTmFOKGQpID8gMCA6IGQpLCAodSA9IGlzTmFOKHUpID8gMCA6IHUpO1xuICAgICAgICAgICAgICAgIHZhciBjID0gaSAqIGQsXG4gICAgICAgICAgICAgICAgICBoID0gaSAqIHU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IG8ueCAtIGMgKiAoci54IC0gbi54KSxcbiAgICAgICAgICAgICAgICAgICAgeTogby55IC0gYyAqIChyLnkgLSBuLnkpLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG5leHQ6IHsgeDogby54ICsgaCAqIChyLnggLSBuLngpLCB5OiBvLnkgKyBoICogKHIueSAtIG4ueSkgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0KSxcbiAgICAgICAgICAgICAgKG8uc3BsaW5lQ3VydmVNb25vdG9uZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICByID0gKHQgfHwgW10pLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBtb2RlbDogdC5fbW9kZWwsIGRlbHRhSzogMCwgbUs6IDAgfTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgbCA9IHIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoZSA9IDA7IGwgPiBlOyArK2UpXG4gICAgICAgICAgICAgICAgICAoaSA9IHJbZV0pLFxuICAgICAgICAgICAgICAgICAgICBpLm1vZGVsLnNraXAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoKGEgPSBlID4gMCA/IHJbZSAtIDFdIDogbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgKG4gPSBsIC0gMSA+IGUgPyByW2UgKyAxXSA6IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgIG4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFuLm1vZGVsLnNraXAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLmRlbHRhSyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChuLm1vZGVsLnkgLSBpLm1vZGVsLnkpIC8gKG4ubW9kZWwueCAtIGkubW9kZWwueCkpLFxuICAgICAgICAgICAgICAgICAgICAgICFhIHx8IGEubW9kZWwuc2tpcFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5tSyA9IGkuZGVsdGFLKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAhbiB8fCBuLm1vZGVsLnNraXBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGkubUsgPSBhLmRlbHRhSylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5zaWduKGEuZGVsdGFLKSAhPT0gdGhpcy5zaWduKGkuZGVsdGFLKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5tSyA9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChpLm1LID0gKGEuZGVsdGFLICsgaS5kZWx0YUspIC8gMikpO1xuICAgICAgICAgICAgICAgIHZhciBzLCBkLCB1LCBjO1xuICAgICAgICAgICAgICAgIGZvciAoZSA9IDA7IGwgLSAxID4gZTsgKytlKVxuICAgICAgICAgICAgICAgICAgKGkgPSByW2VdKSxcbiAgICAgICAgICAgICAgICAgICAgKG4gPSByW2UgKyAxXSksXG4gICAgICAgICAgICAgICAgICAgIGkubW9kZWwuc2tpcCB8fFxuICAgICAgICAgICAgICAgICAgICAgIG4ubW9kZWwuc2tpcCB8fFxuICAgICAgICAgICAgICAgICAgICAgIChvLmFsbW9zdEVxdWFscyhpLmRlbHRhSywgMCwgdGhpcy5FUFNJTE9OKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5tSyA9IG4ubUsgPSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKHMgPSBpLm1LIC8gaS5kZWx0YUspLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZCA9IG4ubUsgLyBpLmRlbHRhSyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChjID0gTWF0aC5wb3cocywgMikgKyBNYXRoLnBvdyhkLCAyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDkgPj0gYyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodSA9IDMgLyBNYXRoLnNxcnQoYykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLm1LID0gcyAqIHUgKiBpLmRlbHRhSyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4ubUsgPSBkICogdSAqIGkuZGVsdGFLKSkpKTtcbiAgICAgICAgICAgICAgICB2YXIgaDtcbiAgICAgICAgICAgICAgICBmb3IgKGUgPSAwOyBsID4gZTsgKytlKVxuICAgICAgICAgICAgICAgICAgKGkgPSByW2VdKSxcbiAgICAgICAgICAgICAgICAgICAgaS5tb2RlbC5za2lwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKChhID0gZSA+IDAgPyByW2UgLSAxXSA6IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgIChuID0gbCAtIDEgPiBlID8gcltlICsgMV0gOiBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhYS5tb2RlbC5za2lwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGggPSAoaS5tb2RlbC54IC0gYS5tb2RlbC54KSAvIDMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkubW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gaS5tb2RlbC54IC0gaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5tb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBpLm1vZGVsLnkgLSBoICogaS5tSykpLFxuICAgICAgICAgICAgICAgICAgICAgIG4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFuLm1vZGVsLnNraXAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoaCA9IChuLm1vZGVsLnggLSBpLm1vZGVsLngpIC8gMyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5tb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGkubW9kZWwueCArIGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkubW9kZWwuY29udHJvbFBvaW50TmV4dFkgPSBpLm1vZGVsLnkgKyBoICogaS5tSykpKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLm5leHRJdGVtID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVxuICAgICAgICAgICAgICAgICAgPyBlID49IHQubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICA/IHRbMF1cbiAgICAgICAgICAgICAgICAgICAgOiB0W2UgKyAxXVxuICAgICAgICAgICAgICAgICAgOiBlID49IHQubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgPyB0W3QubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgICAgIDogdFtlICsgMV07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5wcmV2aW91c0l0ZW0gPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhXG4gICAgICAgICAgICAgICAgICA/IDAgPj0gZVxuICAgICAgICAgICAgICAgICAgICA/IHRbdC5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgICAgICA6IHRbZSAtIDFdXG4gICAgICAgICAgICAgICAgICA6IDAgPj0gZVxuICAgICAgICAgICAgICAgICAgPyB0WzBdXG4gICAgICAgICAgICAgICAgICA6IHRbZSAtIDFdO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubmljZU51bSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICBpID0gTWF0aC5mbG9vcihvLmxvZzEwKHQpKSxcbiAgICAgICAgICAgICAgICAgIG4gPSB0IC8gTWF0aC5wb3coMTAsIGkpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAoYSA9IGVcbiAgICAgICAgICAgICAgICAgICAgPyAxLjUgPiBuXG4gICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgOiAzID4gblxuICAgICAgICAgICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICAgICAgICAgIDogNyA+IG5cbiAgICAgICAgICAgICAgICAgICAgICA/IDVcbiAgICAgICAgICAgICAgICAgICAgICA6IDEwXG4gICAgICAgICAgICAgICAgICAgIDogMSA+PSBuXG4gICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICA6IDIgPj0gblxuICAgICAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICAgICAgOiA1ID49IG5cbiAgICAgICAgICAgICAgICAgICAgPyA1XG4gICAgICAgICAgICAgICAgICAgIDogMTApLFxuICAgICAgICAgICAgICAgICAgYSAqIE1hdGgucG93KDEwLCBpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHIgPSAoby5lYXNpbmdFZmZlY3RzID0ge1xuICAgICAgICAgICAgICBsaW5lYXI6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJblF1YWQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgKiB0O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlT3V0UXVhZDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTEgKiB0ICogKHQgLSAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluT3V0UXVhZDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHQgLz0gMC41KSA8IDFcbiAgICAgICAgICAgICAgICAgID8gMC41ICogdCAqIHRcbiAgICAgICAgICAgICAgICAgIDogLTAuNSAqICgtLXQgKiAodCAtIDIpIC0gMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbkN1YmljOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ICogdCAqIHQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRDdWJpYzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAqICgodCA9IHQgLyAxIC0gMSkgKiB0ICogdCArIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHQgLz0gMC41KSA8IDFcbiAgICAgICAgICAgICAgICAgID8gMC41ICogdCAqIHQgKiB0XG4gICAgICAgICAgICAgICAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJblF1YXJ0OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ICogdCAqIHQgKiB0O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xICogKCh0ID0gdCAvIDEgLSAxKSAqIHQgKiB0ICogdCAtIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRRdWFydDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHQgLz0gMC41KSA8IDFcbiAgICAgICAgICAgICAgICAgID8gMC41ICogdCAqIHQgKiB0ICogdFxuICAgICAgICAgICAgICAgICAgOiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJblF1aW50OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxICogKHQgLz0gMSkgKiB0ICogdCAqIHQgKiB0O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRRdWludDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHQgLz0gMC41KSA8IDFcbiAgICAgICAgICAgICAgICAgID8gMC41ICogdCAqIHQgKiB0ICogdCAqIHRcbiAgICAgICAgICAgICAgICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5TaW5lOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMSAqIE1hdGguY29zKCh0IC8gMSkgKiAoTWF0aC5QSSAvIDIpKSArIDE7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRTaW5lOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxICogTWF0aC5zaW4oKHQgLyAxKSAqIChNYXRoLlBJIC8gMikpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRTaW5lOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMC41ICogKE1hdGguY29zKChNYXRoLlBJICogdCkgLyAxKSAtIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5FeHBvOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID09PSB0ID8gMSA6IDEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC8gMSAtIDEpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZU91dEV4cG86IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IHQgPyAxIDogMSAqICgtTWF0aC5wb3coMiwgKC0xMCAqIHQpIC8gMSkgKyAxKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluT3V0RXhwbzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMCA9PT0gdFxuICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICA6IDEgPT09IHRcbiAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgOiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpXG4gICAgICAgICAgICAgICAgICA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5DaXJjOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ID49IDEgPyB0IDogLTEgKiAoTWF0aC5zcXJ0KDEgLSAodCAvPSAxKSAqIHQpIC0gMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRDaXJjOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxICogTWF0aC5zcXJ0KDEgLSAodCA9IHQgLyAxIC0gMSkgKiB0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluT3V0Q2lyYzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHQgLz0gMC41KSA8IDFcbiAgICAgICAgICAgICAgICAgID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpXG4gICAgICAgICAgICAgICAgICA6IDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluRWxhc3RpYzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IDEuNzAxNTgsXG4gICAgICAgICAgICAgICAgICBhID0gMCxcbiAgICAgICAgICAgICAgICAgIGkgPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAwID09PSB0XG4gICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgIDogMSA9PT0gKHQgLz0gMSlcbiAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgOiAoYSB8fCAoYSA9IDAuMyksXG4gICAgICAgICAgICAgICAgICAgIGkgPCBNYXRoLmFicygxKVxuICAgICAgICAgICAgICAgICAgICAgID8gKChpID0gMSksIChlID0gYSAvIDQpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGUgPSAoYSAvICgyICogTWF0aC5QSSkpICogTWF0aC5hc2luKDEgLyBpKSksXG4gICAgICAgICAgICAgICAgICAgIC0oXG4gICAgICAgICAgICAgICAgICAgICAgaSAqXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKlxuICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKCgoMSAqIHQgLSBlKSAqICgyICogTWF0aC5QSSkpIC8gYSlcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMS43MDE1OCxcbiAgICAgICAgICAgICAgICAgIGEgPSAwLFxuICAgICAgICAgICAgICAgICAgaSA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IHRcbiAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgOiAxID09PSAodCAvPSAxKVxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6IChhIHx8IChhID0gMC4zKSxcbiAgICAgICAgICAgICAgICAgICAgaSA8IE1hdGguYWJzKDEpXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKGkgPSAxKSwgKGUgPSBhIC8gNCkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoZSA9IChhIC8gKDIgKiBNYXRoLlBJKSkgKiBNYXRoLmFzaW4oMSAvIGkpKSxcbiAgICAgICAgICAgICAgICAgICAgaSAqXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coMiwgLTEwICogdCkgKlxuICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKCgoMSAqIHQgLSBlKSAqICgyICogTWF0aC5QSSkpIC8gYSkgK1xuICAgICAgICAgICAgICAgICAgICAgIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5PdXRFbGFzdGljOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMS43MDE1OCxcbiAgICAgICAgICAgICAgICAgIGEgPSAwLFxuICAgICAgICAgICAgICAgICAgaSA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IHRcbiAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgOiAyID09PSAodCAvPSAwLjUpXG4gICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgIDogKGEgfHwgKGEgPSAxICogKDAuMyAqIDEuNSkpLFxuICAgICAgICAgICAgICAgICAgICBpIDwgTWF0aC5hYnMoMSlcbiAgICAgICAgICAgICAgICAgICAgICA/ICgoaSA9IDEpLCAoZSA9IGEgLyA0KSlcbiAgICAgICAgICAgICAgICAgICAgICA6IChlID0gKGEgLyAoMiAqIE1hdGguUEkpKSAqIE1hdGguYXNpbigxIC8gaSkpLFxuICAgICAgICAgICAgICAgICAgICAxID4gdFxuICAgICAgICAgICAgICAgICAgICAgID8gLTAuNSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoaSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oKCgxICogdCAtIGUpICogKDIgKiBNYXRoLlBJKSkgLyBhKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbigoKDEgKiB0IC0gZSkgKiAoMiAqIE1hdGguUEkpKSAvIGEpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgMC41ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5CYWNrOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMS43MDE1ODtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAqICh0IC89IDEpICogdCAqICgoZSArIDEpICogdCAtIGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlT3V0QmFjazogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IDEuNzAxNTg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqICgoZSArIDEpICogdCArIGUpICsgMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVhc2VJbk91dEJhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSAxLjcwMTU4O1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAwLjUpIDwgMVxuICAgICAgICAgICAgICAgICAgPyAwLjUgKiAodCAqIHQgKiAoKChlICo9IDEuNTI1KSArIDEpICogdCAtIGUpKVxuICAgICAgICAgICAgICAgICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgoZSAqPSAxLjUyNSkgKyAxKSAqIHQgKyBlKSArIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlSW5Cb3VuY2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLSByLmVhc2VPdXRCb3VuY2UoMSAtIHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlYXNlT3V0Qm91bmNlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCAvPSAxKSA8IDEgLyAyLjc1XG4gICAgICAgICAgICAgICAgICA/IDEgKiAoNy41NjI1ICogdCAqIHQpXG4gICAgICAgICAgICAgICAgICA6IDIgLyAyLjc1ID4gdFxuICAgICAgICAgICAgICAgICAgPyAxICogKDcuNTYyNSAqICh0IC09IDEuNSAvIDIuNzUpICogdCArIDAuNzUpXG4gICAgICAgICAgICAgICAgICA6IDIuNSAvIDIuNzUgPiB0XG4gICAgICAgICAgICAgICAgICA/IDEgKiAoNy41NjI1ICogKHQgLT0gMi4yNSAvIDIuNzUpICogdCArIDAuOTM3NSlcbiAgICAgICAgICAgICAgICAgIDogMSAqICg3LjU2MjUgKiAodCAtPSAyLjYyNSAvIDIuNzUpICogdCArIDAuOTg0Mzc1KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWFzZUluT3V0Qm91bmNlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgPiB0XG4gICAgICAgICAgICAgICAgICA/IDAuNSAqIHIuZWFzZUluQm91bmNlKDIgKiB0KVxuICAgICAgICAgICAgICAgICAgOiAwLjUgKiByLmVhc2VPdXRCb3VuY2UoMiAqIHQgLSAxKSArIDAuNTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKG8ucmVxdWVzdEFuaW1GcmFtZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KHQsIDFlMyAvIDYwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSgpKSxcbiAgICAgICAgICAgICAgKG8uY2FuY2VsQW5pbUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgd2luZG93Lm9DYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgd2luZG93Lm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuY2xlYXJUaW1lb3V0KHQsIDFlMyAvIDYwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSgpKSxcbiAgICAgICAgICAgICAgKG8uZ2V0UmVsYXRpdmVQb3NpdGlvbiA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgbiA9IHQub3JpZ2luYWxFdmVudCB8fCB0LFxuICAgICAgICAgICAgICAgICAgciA9IHQuY3VycmVudFRhcmdldCB8fCB0LnNyY0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICBsID0gci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICAgIHMgPSBuLnRvdWNoZXM7XG4gICAgICAgICAgICAgICAgcyAmJiBzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgID8gKChhID0gc1swXS5jbGllbnRYKSwgKGkgPSBzWzBdLmNsaWVudFkpKVxuICAgICAgICAgICAgICAgICAgOiAoKGEgPSBuLmNsaWVudFgpLCAoaSA9IG4uY2xpZW50WSkpO1xuICAgICAgICAgICAgICAgIHZhciBkID0gcGFyc2VGbG9hdChvLmdldFN0eWxlKHIsIFwicGFkZGluZy1sZWZ0XCIpKSxcbiAgICAgICAgICAgICAgICAgIHUgPSBwYXJzZUZsb2F0KG8uZ2V0U3R5bGUociwgXCJwYWRkaW5nLXRvcFwiKSksXG4gICAgICAgICAgICAgICAgICBjID0gcGFyc2VGbG9hdChvLmdldFN0eWxlKHIsIFwicGFkZGluZy1yaWdodFwiKSksXG4gICAgICAgICAgICAgICAgICBoID0gcGFyc2VGbG9hdChvLmdldFN0eWxlKHIsIFwicGFkZGluZy1ib3R0b21cIikpLFxuICAgICAgICAgICAgICAgICAgZiA9IGwucmlnaHQgLSBsLmxlZnQgLSBkIC0gYyxcbiAgICAgICAgICAgICAgICAgIGcgPSBsLmJvdHRvbSAtIGwudG9wIC0gdSAtIGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIChhID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgICAgKCgoYSAtIGwubGVmdCAtIGQpIC8gZikgKiByLndpZHRoKSAvXG4gICAgICAgICAgICAgICAgICAgICAgZS5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAoaSA9IE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgICAgICgoKGkgLSBsLnRvcCAtIHUpIC8gZykgKiByLmhlaWdodCkgL1xuICAgICAgICAgICAgICAgICAgICAgIGUuY3VycmVudERldmljZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgeyB4OiBhLCB5OiBpIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uYWRkRXZlbnQgPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHQuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICAgICAgICAgICAgPyB0LmFkZEV2ZW50TGlzdGVuZXIoZSwgYSlcbiAgICAgICAgICAgICAgICAgIDogdC5hdHRhY2hFdmVudFxuICAgICAgICAgICAgICAgICAgPyB0LmF0dGFjaEV2ZW50KFwib25cIiArIGUsIGEpXG4gICAgICAgICAgICAgICAgICA6ICh0W1wib25cIiArIGVdID0gYSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgdC5yZW1vdmVFdmVudExpc3RlbmVyXG4gICAgICAgICAgICAgICAgICA/IHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBhLCAhMSlcbiAgICAgICAgICAgICAgICAgIDogdC5kZXRhY2hFdmVudFxuICAgICAgICAgICAgICAgICAgPyB0LmRldGFjaEV2ZW50KFwib25cIiArIGUsIGEpXG4gICAgICAgICAgICAgICAgICA6ICh0W1wib25cIiArIGVdID0gby5ub29wKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gKHQuZXZlbnRzID0gdC5ldmVudHMgfHwge30pO1xuICAgICAgICAgICAgICAgIG8uZWFjaChlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgKGlbZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuYXBwbHkodCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBvLmFkZEV2ZW50KHQuY2hhcnQuY2FudmFzLCBlLCBpW2VdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0LmNoYXJ0LmNhbnZhcztcbiAgICAgICAgICAgICAgICBvLmVhY2goZSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIG8ucmVtb3ZlRXZlbnQoYSwgZSwgdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5nZXRDb25zdHJhaW50V2lkdGggPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuKHQsIFwibWF4LXdpZHRoXCIsIFwiY2xpZW50V2lkdGhcIik7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5nZXRDb25zdHJhaW50SGVpZ2h0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbih0LCBcIm1heEhlaWdodFwiLCBcImNsaWVudEhlaWdodFwiKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldE1heGltdW1XaWR0aCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0LnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgICBhID0gcGFyc2VJbnQoby5nZXRTdHlsZShlLCBcInBhZGRpbmctbGVmdFwiKSwgMTApLFxuICAgICAgICAgICAgICAgICAgaSA9IHBhcnNlSW50KG8uZ2V0U3R5bGUoZSwgXCJwYWRkaW5nLXJpZ2h0XCIpLCAxMCksXG4gICAgICAgICAgICAgICAgICBuID0gZS5jbGllbnRXaWR0aCAtIGEgLSBpLFxuICAgICAgICAgICAgICAgICAgciA9IG8uZ2V0Q29uc3RyYWludFdpZHRoKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05hTihyKSA/IG4gOiBNYXRoLm1pbihuLCByKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldE1heGltdW1IZWlnaHQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgYSA9IHBhcnNlSW50KG8uZ2V0U3R5bGUoZSwgXCJwYWRkaW5nLXRvcFwiKSwgMTApLFxuICAgICAgICAgICAgICAgICAgaSA9IHBhcnNlSW50KG8uZ2V0U3R5bGUoZSwgXCJwYWRkaW5nLWJvdHRvbVwiKSwgMTApLFxuICAgICAgICAgICAgICAgICAgbiA9IGUuY2xpZW50SGVpZ2h0IC0gYSAtIGksXG4gICAgICAgICAgICAgICAgICByID0gby5nZXRDb25zdHJhaW50SGVpZ2h0KHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05hTihyKSA/IG4gOiBNYXRoLm1pbihuLCByKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmdldFN0eWxlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5jdXJyZW50U3R5bGVcbiAgICAgICAgICAgICAgICAgID8gdC5jdXJyZW50U3R5bGVbZV1cbiAgICAgICAgICAgICAgICAgIDogZG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q29tcHV0ZWRTdHlsZSh0LCBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKGUpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ucmV0aW5hU2NhbGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gKHQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPVxuICAgICAgICAgICAgICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKDEgIT09IGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdC5jYW52YXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAoYS5oZWlnaHQgPSBpICogZSksXG4gICAgICAgICAgICAgICAgICAgIChhLndpZHRoID0gbiAqIGUpLFxuICAgICAgICAgICAgICAgICAgICB0LmN0eC5zY2FsZShlLCBlKSxcbiAgICAgICAgICAgICAgICAgICAgKGEuc3R5bGUuaGVpZ2h0ID0gaSArIFwicHhcIiksXG4gICAgICAgICAgICAgICAgICAgIChhLnN0eWxlLndpZHRoID0gbiArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uY2xlYXIgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHQuY3R4LmNsZWFyUmVjdCgwLCAwLCB0LndpZHRoLCB0LmhlaWdodCk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5mb250U3RyaW5nID0gZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSArIFwiIFwiICsgdCArIFwicHggXCIgKyBhO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubG9uZ2VzdFRleHQgPSBmdW5jdGlvbiAodCwgZSwgYSwgaSkge1xuICAgICAgICAgICAgICAgIGkgPSBpIHx8IHt9O1xuICAgICAgICAgICAgICAgIHZhciBuID0gKGkuZGF0YSA9IGkuZGF0YSB8fCB7fSksXG4gICAgICAgICAgICAgICAgICByID0gKGkuZ2FyYmFnZUNvbGxlY3QgPSBpLmdhcmJhZ2VDb2xsZWN0IHx8IFtdKTtcbiAgICAgICAgICAgICAgICBpLmZvbnQgIT09IGUgJiZcbiAgICAgICAgICAgICAgICAgICgobiA9IGkuZGF0YSA9IHt9KSxcbiAgICAgICAgICAgICAgICAgIChyID0gaS5nYXJiYWdlQ29sbGVjdCA9IFtdKSxcbiAgICAgICAgICAgICAgICAgIChpLmZvbnQgPSBlKSksXG4gICAgICAgICAgICAgICAgICAodC5mb250ID0gZSk7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgICAgIG8uZWFjaChhLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBlICYmIG51bGwgIT09IGUgJiYgby5pc0FycmF5KGUpICE9PSAhMFxuICAgICAgICAgICAgICAgICAgICA/IChsID0gby5tZWFzdXJlVGV4dCh0LCBuLCByLCBsLCBlKSlcbiAgICAgICAgICAgICAgICAgICAgOiBvLmlzQXJyYXkoZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICBvLmVhY2goZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uaXNBcnJheShlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAobCA9IG8ubWVhc3VyZVRleHQodCwgbiwgciwgbCwgZSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBzID0gci5sZW5ndGggLyAyO1xuICAgICAgICAgICAgICAgIGlmIChzID4gYS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBzID4gZDsgZCsrKSBkZWxldGUgbltyW2RdXTtcbiAgICAgICAgICAgICAgICAgIHIuc3BsaWNlKDAsIHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLm1lYXN1cmVUZXh0ID0gZnVuY3Rpb24gKHQsIGUsIGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGVbbl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8gfHwgKChvID0gZVtuXSA9IHQubWVhc3VyZVRleHQobikud2lkdGgpLCBhLnB1c2gobikpLFxuICAgICAgICAgICAgICAgICAgbyA+IGkgJiYgKGkgPSBvKSxcbiAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8ubnVtYmVyT2ZMYWJlbExpbmVzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIG8uZWFjaCh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICBvLmlzQXJyYXkodCkgJiYgdC5sZW5ndGggPiBlICYmIChlID0gdC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmRyYXdSb3VuZGVkUmVjdGFuZ2xlID0gZnVuY3Rpb24gKHQsIGUsIGEsIGksIG4sIG8pIHtcbiAgICAgICAgICAgICAgICB0LmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgdC5tb3ZlVG8oZSArIG8sIGEpLFxuICAgICAgICAgICAgICAgICAgdC5saW5lVG8oZSArIGkgLSBvLCBhKSxcbiAgICAgICAgICAgICAgICAgIHQucXVhZHJhdGljQ3VydmVUbyhlICsgaSwgYSwgZSArIGksIGEgKyBvKSxcbiAgICAgICAgICAgICAgICAgIHQubGluZVRvKGUgKyBpLCBhICsgbiAtIG8pLFxuICAgICAgICAgICAgICAgICAgdC5xdWFkcmF0aWNDdXJ2ZVRvKGUgKyBpLCBhICsgbiwgZSArIGkgLSBvLCBhICsgbiksXG4gICAgICAgICAgICAgICAgICB0LmxpbmVUbyhlICsgbywgYSArIG4pLFxuICAgICAgICAgICAgICAgICAgdC5xdWFkcmF0aWNDdXJ2ZVRvKGUsIGEgKyBuLCBlLCBhICsgbiAtIG8pLFxuICAgICAgICAgICAgICAgICAgdC5saW5lVG8oZSwgYSArIG8pLFxuICAgICAgICAgICAgICAgICAgdC5xdWFkcmF0aWNDdXJ2ZVRvKGUsIGEsIGUgKyBvLCBhKSxcbiAgICAgICAgICAgICAgICAgIHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoby5jb2xvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgID8gaShcbiAgICAgICAgICAgICAgICAgICAgICBlIGluc3RhbmNlb2YgQ2FudmFzR3JhZGllbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdC5kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgOiAoY29uc29sZS5lcnJvcihcIkNvbG9yLmpzIG5vdCBmb3VuZCFcIiksIGUpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uYWRkUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICAgICAgICAgICAgICAoYS5jbGFzc05hbWUgPSBcImNoYXJ0anMtaGlkZGVuLWlmcmFtZVwiKSxcbiAgICAgICAgICAgICAgICAgIChhLnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXk6YmxvY2s7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlcjowO21hcmdpbjowO3RvcDowO2xlZnQ6MDtib3R0b206MDtyaWdodDowO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7cG9zaXRpb246YWJzb2x1dGU7cG9pbnRlci1ldmVudHM6bm9uZTt6LWluZGV4Oi0xO1wiKSxcbiAgICAgICAgICAgICAgICAgIChhLnRhYkluZGV4ID0gLTEpO1xuICAgICAgICAgICAgICAgIHZhciBpID0gKHQuX2NoYXJ0anMgPSB7IHJlc2l6ZXI6IGEsIHRpY2tpbmc6ICExIH0pLFxuICAgICAgICAgICAgICAgICAgbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaS50aWNraW5nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKChpLnRpY2tpbmcgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgby5yZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5yZXNpemVyID8gKChpLnRpY2tpbmcgPSAhMSksIGUoKSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvLmFkZEV2ZW50KGEsIFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBvLmFkZEV2ZW50KGEuY29udGVudFdpbmRvdyB8fCBhLCBcInJlc2l6ZVwiLCBuKSwgbigpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgdC5pbnNlcnRCZWZvcmUoYSwgdC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLnJlbW92ZVJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAodCAmJiB0Ll9jaGFydGpzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHQuX2NoYXJ0anMucmVzaXplcjtcbiAgICAgICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgICAgICAgKGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSwgKHQuX2NoYXJ0anMucmVzaXplciA9IG51bGwpKSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQuX2NoYXJ0anM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uaXNBcnJheSA9IEFycmF5LmlzQXJyYXlcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICBcIltvYmplY3QgQXJyYXldXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmFycmF5RXF1YWxzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSwgaSwgbiwgcjtcbiAgICAgICAgICAgICAgICBpZiAoIXQgfHwgIWUgfHwgdC5sZW5ndGggIT09IGUubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgZm9yIChhID0gMCwgaSA9IHQubGVuZ3RoOyBpID4gYTsgKythKVxuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoKG4gPSB0W2FdKSxcbiAgICAgICAgICAgICAgICAgICAgKHIgPSBlW2FdKSxcbiAgICAgICAgICAgICAgICAgICAgbiBpbnN0YW5jZW9mIEFycmF5ICYmIHIgaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW8uYXJyYXlFcXVhbHMobiwgcikpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiAhPT0gcikgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChvLmNhbGxDYWxsYmFjayA9IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQuY2FsbCAmJiB0LmFwcGx5KGEsIGUpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKG8uZ2V0SG92ZXJDb2xvciA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBDYW52YXNQYXR0ZXJuXG4gICAgICAgICAgICAgICAgICA/IHRcbiAgICAgICAgICAgICAgICAgIDogby5jb2xvcih0KS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLnJnYlN0cmluZygpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7IDM6IDMgfSxcbiAgICAgIF0sXG4gICAgICAyNzogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICBsID0gdC5kYXRhLmRhdGFzZXRzO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBvID0gbC5sZW5ndGg7IG8gPiBpOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKHQuaXNEYXRhc2V0VmlzaWJsZShpKSlcbiAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0LmdldERhdGFzZXRNZXRhKGkpLCBuID0gMCwgciA9IGEuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHIgPiBuO1xuICAgICAgICAgICAgICAgICAgICArK25cbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGEuZGF0YVtuXTtcbiAgICAgICAgICAgICAgICAgICAgcy5fdmlldy5za2lwIHx8IGUocyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhKHQsIGEpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSBbXTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBlKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB0LmluUmFuZ2UoYS54LCBhLnkpICYmIGkucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpKHQsIGEsIGksIG4pIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICAgICAgbCA9IFtdO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIG4gfHwgKG4gPSBvLmRpc3RhbmNlQmV0d2VlblBvaW50cyksXG4gICAgICAgICAgICAgICAgZSh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFpIHx8IHQuaW5SYW5nZShhLngsIGEueSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LmdldENlbnRlclBvaW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgbyA9IG4oYSwgZSk7XG4gICAgICAgICAgICAgICAgICAgIHIgPiBvID8gKChsID0gW3RdKSwgKHIgPSBvKSkgOiBvID09PSByICYmIGwucHVzaCh0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBuKHQsIGUsIG4pIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBvLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgdC5jaGFydCksXG4gICAgICAgICAgICAgICAgbCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModC54IC0gZS54KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHMgPSBuLmludGVyc2VjdCA/IGEodCwgcikgOiBpKHQsIHIsICExLCBsKSxcbiAgICAgICAgICAgICAgICBkID0gW107XG4gICAgICAgICAgICAgIHJldHVybiBzLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gKHQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzRGF0YXNldFZpc2libGUoYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHQuZ2V0RGF0YXNldE1ldGEoYSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gaS5kYXRhW3NbMF0uX2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICBuICYmICFuLl92aWV3LnNraXAgJiYgZC5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGQpXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgdC5JbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgbW9kZXM6IHtcbiAgICAgICAgICAgICAgICBzaW5nbGU6IGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IG8uZ2V0UmVsYXRpdmVQb3NpdGlvbihhLCB0LmNoYXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZSh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmluUmFuZ2UoaS54LCBpLnkpID8gKG4ucHVzaCh0KSwgbikgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuLnNsaWNlKDAsIDEpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IG4sXG4gICAgICAgICAgICAgICAgaW5kZXg6IG4sXG4gICAgICAgICAgICAgICAgZGF0YXNldDogZnVuY3Rpb24gKHQsIGUsIG4pIHtcbiAgICAgICAgICAgICAgICAgIHZhciByID0gby5nZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIHQuY2hhcnQpLFxuICAgICAgICAgICAgICAgICAgICBsID0gbi5pbnRlcnNlY3QgPyBhKHQsIHIpIDogaSh0LCByLCAhMSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBsLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAobCA9IHQuZ2V0RGF0YXNldE1ldGEobFswXS5fZGF0YXNldEluZGV4KS5kYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgbFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwieC1heGlzXCI6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbih0LCBlLCAhMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gby5nZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIHQuY2hhcnQpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEodCwgaSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZWFyZXN0OiBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBvLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgdC5jaGFydCksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpKHQsIG4sIGEuaW50ZXJzZWN0KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHIubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgICAgICAgICAgIHIuc29ydChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0LmdldEFyZWEoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGUuZ2V0QXJlYSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gYSAtIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAwID09PSBuICYmIChuID0gdC5fZGF0YXNldEluZGV4IC0gZS5fZGF0YXNldEluZGV4KSwgblxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgci5zbGljZSgwLCAxKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHg6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IG8uZ2V0UmVsYXRpdmVQb3NpdGlvbihhLCB0LmNoYXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgciA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBsID0gITE7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5pblhSYW5nZShuLngpICYmIHIucHVzaCh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuaW5SYW5nZShuLngsIG4ueSkgJiYgKGwgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpLmludGVyc2VjdCAmJiAhbCAmJiAociA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgclxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IG8uZ2V0UmVsYXRpdmVQb3NpdGlvbihhLCB0LmNoYXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgciA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBsID0gITE7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5pbllSYW5nZShuLnkpICYmIHIucHVzaCh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuaW5SYW5nZShuLngsIG4ueSkgJiYgKGwgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpLmludGVyc2VjdCAmJiAhbCAmJiAociA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgclxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAyODogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAodGhpcy5jb250cm9sbGVyID0gbmV3IHQuQ29udHJvbGxlcihlLCBhLCB0aGlzKSksXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKHQuZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsOiB7XG4gICAgICAgICAgICAgICAgICByZXNwb25zaXZlOiAhMCxcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbjogMCxcbiAgICAgICAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86ICEwLFxuICAgICAgICAgICAgICAgICAgZXZlbnRzOiBbXG4gICAgICAgICAgICAgICAgICAgIFwibW91c2Vtb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibW91c2VvdXRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgICAgICAgICBcInRvdWNoc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBvbkhvdmVyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBcIm5lYXJlc3RcIixcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiBcInJnYmEoMCwwLDAsMC4xKVwiLFxuICAgICAgICAgICAgICAgICAgZGVmYXVsdEZvbnRDb2xvcjogXCIjNjY2XCIsXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0Rm9udEZhbWlseTpcbiAgICAgICAgICAgICAgICAgICAgXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgICAgICAgZGVmYXVsdEZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHRGb250U3R5bGU6IFwibm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgICBzaG93TGluZXM6ICEwLFxuICAgICAgICAgICAgICAgICAgZWxlbWVudHM6IHt9LFxuICAgICAgICAgICAgICAgICAgbGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGUucHVzaCgnPHVsIGNsYXNzTmFtZT1cIicgKyB0LmlkICsgJy1sZWdlbmRcIj4nKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBhKyspXG4gICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsaT48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQuZGF0YS5kYXRhc2V0c1thXS5iYWNrZ3JvdW5kQ29sb3IgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI+PC9zcGFuPidcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5kYXRhLmRhdGFzZXRzW2FdLmxhYmVsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaCh0LmRhdGEuZGF0YXNldHNbYV0ubGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKFwiPC9saT5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnB1c2goXCI8L3VsPlwiKSwgZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuQ2hhcnQgPSB0KSxcbiAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAyOTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycztcbiAgICAgICAgICAgIHQubGF5b3V0U2VydmljZSA9IHtcbiAgICAgICAgICAgICAgZGVmYXVsdHM6IHt9LFxuICAgICAgICAgICAgICBhZGRCb3g6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdC5ib3hlcyB8fCAodC5ib3hlcyA9IFtdKSwgdC5ib3hlcy5wdXNoKGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByZW1vdmVCb3g6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgdC5ib3hlcyAmJiB0LmJveGVzLnNwbGljZSh0LmJveGVzLmluZGV4T2YoZSksIDEpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbih0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgID8gKChlID0gdC51cGRhdGUodC5vcHRpb25zLmZ1bGxXaWR0aCA/IHggOiBDLCBNKSksXG4gICAgICAgICAgICAgICAgICAgICAgKEQgLT0gZS5oZWlnaHQpKVxuICAgICAgICAgICAgICAgICAgICA6ICgoZSA9IHQudXBkYXRlKHcsIFMpKSwgKEMgLT0gZS53aWR0aCkpLFxuICAgICAgICAgICAgICAgICAgICBJLnB1c2goeyBob3Jpem9udGFsOiBhLCBtaW5TaXplOiBlLCBib3g6IHQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8odCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLmZpbmROZXh0V2hlcmUoSSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuYm94ID09PSB0O1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBpZiAoYSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHsgbGVmdDogQSwgcmlnaHQ6IFQsIHRvcDogMCwgYm90dG9tOiAwIH07XG4gICAgICAgICAgICAgICAgICAgICAgdC51cGRhdGUodC5vcHRpb25zLmZ1bGxXaWR0aCA/IHggOiBDLCB5IC8gMiwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0LnVwZGF0ZShhLm1pblNpemUud2lkdGgsIEQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5maW5kTmV4dFdoZXJlKEksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuYm94ID09PSB0O1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHsgbGVmdDogMCwgcmlnaHQ6IDAsIHRvcDogUCwgYm90dG9tOiBGIH07XG4gICAgICAgICAgICAgICAgICBhICYmIHQudXBkYXRlKGEubWluU2l6ZS53aWR0aCwgRCwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGwodCkge1xuICAgICAgICAgICAgICAgICAgdC5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICA/ICgodC5sZWZ0ID0gdC5vcHRpb25zLmZ1bGxXaWR0aCA/IHUgOiBBKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5yaWdodCA9IHQub3B0aW9ucy5mdWxsV2lkdGggPyBhIC0gYyA6IEEgKyBDKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC50b3AgPSBMKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5ib3R0b20gPSBMICsgdC5oZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgIChMID0gdC5ib3R0b20pKVxuICAgICAgICAgICAgICAgICAgICA6ICgodC5sZWZ0ID0gViksXG4gICAgICAgICAgICAgICAgICAgICAgKHQucmlnaHQgPSBWICsgdC53aWR0aCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQudG9wID0gUCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQuYm90dG9tID0gUCArIEQpLFxuICAgICAgICAgICAgICAgICAgICAgIChWID0gdC5yaWdodCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0Lm9wdGlvbnMubGF5b3V0LFxuICAgICAgICAgICAgICAgICAgICBkID0gcyA/IHMucGFkZGluZyA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHUgPSAwLFxuICAgICAgICAgICAgICAgICAgICBjID0gMCxcbiAgICAgICAgICAgICAgICAgICAgaCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGYgPSAwO1xuICAgICAgICAgICAgICAgICAgaXNOYU4oZClcbiAgICAgICAgICAgICAgICAgICAgPyAoKHUgPSBkLmxlZnQgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgKGMgPSBkLnJpZ2h0IHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgIChoID0gZC50b3AgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgKGYgPSBkLmJvdHRvbSB8fCAwKSlcbiAgICAgICAgICAgICAgICAgICAgOiAoKHUgPSBkKSwgKGMgPSBkKSwgKGggPSBkKSwgKGYgPSBkKSk7XG4gICAgICAgICAgICAgICAgICB2YXIgZyA9IGUud2hlcmUodC5ib3hlcywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsZWZ0XCIgPT09IHQub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHAgPSBlLndoZXJlKHQuYm94ZXMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmlnaHRcIiA9PT0gdC5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IGUud2hlcmUodC5ib3hlcywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0b3BcIiA9PT0gdC5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYiA9IGUud2hlcmUodC5ib3hlcywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJib3R0b21cIiA9PT0gdC5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdiA9IGUud2hlcmUodC5ib3hlcywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjaGFydEFyZWFcIiA9PT0gdC5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIG0uc29ydChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIChlLm9wdGlvbnMuZnVsbFdpZHRoID8gMSA6IDApIC1cbiAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLmZ1bGxXaWR0aCA/IDEgOiAwKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGIuc29ydChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLmZ1bGxXaWR0aCA/IDEgOiAwKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5vcHRpb25zLmZ1bGxXaWR0aCA/IDEgOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdmFyIHggPSBhIC0gdSAtIGMsXG4gICAgICAgICAgICAgICAgICAgIHkgPSBpIC0gaCAtIGYsXG4gICAgICAgICAgICAgICAgICAgIGsgPSB4IC8gMixcbiAgICAgICAgICAgICAgICAgICAgUyA9IHkgLyAyLFxuICAgICAgICAgICAgICAgICAgICB3ID0gKGEgLSBrKSAvIChnLmxlbmd0aCArIHAubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgTSA9IChpIC0gUykgLyAobS5sZW5ndGggKyBiLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIEMgPSB4LFxuICAgICAgICAgICAgICAgICAgICBEID0geSxcbiAgICAgICAgICAgICAgICAgICAgSSA9IFtdO1xuICAgICAgICAgICAgICAgICAgZS5lYWNoKGcuY29uY2F0KHAsIG0sIGIpLCBuKTtcbiAgICAgICAgICAgICAgICAgIHZhciBBID0gdSxcbiAgICAgICAgICAgICAgICAgICAgVCA9IGMsXG4gICAgICAgICAgICAgICAgICAgIFAgPSBoLFxuICAgICAgICAgICAgICAgICAgICBGID0gZjtcbiAgICAgICAgICAgICAgICAgIGUuZWFjaChnLmNvbmNhdChwKSwgbyksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChnLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIEEgKz0gdC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChwLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIFQgKz0gdC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChtLmNvbmNhdChiKSwgbyksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChtLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIFAgKz0gdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2goYiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBGICs9IHQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGcuY29uY2F0KHApLCByKSxcbiAgICAgICAgICAgICAgICAgICAgKEEgPSB1KSxcbiAgICAgICAgICAgICAgICAgICAgKFQgPSBjKSxcbiAgICAgICAgICAgICAgICAgICAgKFAgPSBoKSxcbiAgICAgICAgICAgICAgICAgICAgKEYgPSBmKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGcsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgQSArPSB0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHAsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgVCArPSB0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgUCArPSB0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIEYgKz0gdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdmFyIF8gPSBpIC0gUCAtIEYsXG4gICAgICAgICAgICAgICAgICAgIFIgPSBhIC0gQSAtIFQ7XG4gICAgICAgICAgICAgICAgICAoUiAhPT0gQyB8fCBfICE9PSBEKSAmJlxuICAgICAgICAgICAgICAgICAgICAoZS5lYWNoKGcsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5oZWlnaHQgPSBfO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHAsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5oZWlnaHQgPSBfO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLmZ1bGxXaWR0aCB8fCAodC53aWR0aCA9IFIpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLmZ1bGxXaWR0aCB8fCAodC53aWR0aCA9IFIpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKEQgPSBfKSxcbiAgICAgICAgICAgICAgICAgICAgKEMgPSBSKSk7XG4gICAgICAgICAgICAgICAgICB2YXIgViA9IHUsXG4gICAgICAgICAgICAgICAgICAgIEwgPSBoO1xuICAgICAgICAgICAgICAgICAgZS5lYWNoKGcuY29uY2F0KG0pLCBsKSxcbiAgICAgICAgICAgICAgICAgICAgKFYgKz0gQyksXG4gICAgICAgICAgICAgICAgICAgIChMICs9IEQpLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2gocCwgbCksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChiLCBsKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuY2hhcnRBcmVhID0ge1xuICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IEEsXG4gICAgICAgICAgICAgICAgICAgICAgdG9wOiBQLFxuICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBBICsgQyxcbiAgICAgICAgICAgICAgICAgICAgICBib3R0b206IFAgKyBELFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHYsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgKGUubGVmdCA9IHQuY2hhcnRBcmVhLmxlZnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUudG9wID0gdC5jaGFydEFyZWEudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnJpZ2h0ID0gdC5jaGFydEFyZWEucmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuYm90dG9tID0gdC5jaGFydEFyZWEuYm90dG9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudXBkYXRlKEMsIEQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDMwOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdC51c2VQb2ludFN0eWxlID8gZSAqIE1hdGguU1FSVDIgOiB0LmJveFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGEgPSB0LmhlbHBlcnMsXG4gICAgICAgICAgICAgIGkgPSBhLm5vb3A7XG4gICAgICAgICAgICAodC5kZWZhdWx0cy5nbG9iYWwubGVnZW5kID0ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiAhMCxcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwidG9wXCIsXG4gICAgICAgICAgICAgIGZ1bGxXaWR0aDogITAsXG4gICAgICAgICAgICAgIHJldmVyc2U6ICExLFxuICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZS5kYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICBpID0gdGhpcy5jaGFydCxcbiAgICAgICAgICAgICAgICAgIG4gPSBpLmdldERhdGFzZXRNZXRhKGEpO1xuICAgICAgICAgICAgICAgIChuLmhpZGRlbiA9XG4gICAgICAgICAgICAgICAgICBudWxsID09PSBuLmhpZGRlbiA/ICFpLmRhdGEuZGF0YXNldHNbYV0uaGlkZGVuIDogbnVsbCksXG4gICAgICAgICAgICAgICAgICBpLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbkhvdmVyOiBudWxsLFxuICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBib3hXaWR0aDogNDAsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlzQXJyYXkoZS5kYXRhc2V0cylcbiAgICAgICAgICAgICAgICAgICAgPyBlLmRhdGFzZXRzLm1hcChmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBhLmlzQXJyYXkoZS5iYWNrZ3JvdW5kQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLmJhY2tncm91bmRDb2xvclswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogIXQuaXNEYXRhc2V0VmlzaWJsZShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNhcDogZS5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2g6IGUuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2hPZmZzZXQ6IGUuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUpvaW46IGUuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LkxlZ2VuZCA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICBhLmV4dGVuZCh0aGlzLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmRvdWdobnV0TW9kZSA9ICExKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJlZm9yZVVwZGF0ZTogaSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBpLmJlZm9yZVVwZGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAoaS5tYXhXaWR0aCA9IHQpLFxuICAgICAgICAgICAgICAgICAgICAoaS5tYXhIZWlnaHQgPSBlKSxcbiAgICAgICAgICAgICAgICAgICAgKGkubWFyZ2lucyA9IGEpLFxuICAgICAgICAgICAgICAgICAgICBpLmJlZm9yZVNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5zZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIGkuYWZ0ZXJTZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIGkuYmVmb3JlQnVpbGRMYWJlbHMoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5idWlsZExhYmVscygpLFxuICAgICAgICAgICAgICAgICAgICBpLmFmdGVyQnVpbGRMYWJlbHMoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5iZWZvcmVGaXQoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5maXQoKSxcbiAgICAgICAgICAgICAgICAgICAgaS5hZnRlckZpdCgpLFxuICAgICAgICAgICAgICAgICAgICBpLmFmdGVyVXBkYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIGkubWluU2l6ZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFmdGVyVXBkYXRlOiBpLFxuICAgICAgICAgICAgICAgIGJlZm9yZVNldERpbWVuc2lvbnM6IGksXG4gICAgICAgICAgICAgICAgc2V0RGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgdC5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICA/ICgodC53aWR0aCA9IHQubWF4V2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAgICh0LmxlZnQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5yaWdodCA9IHQud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICA6ICgodC5oZWlnaHQgPSB0Lm1heEhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQudG9wID0gMCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQuYm90dG9tID0gdC5oZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ0xlZnQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ1RvcCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nUmlnaHQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ0JvdHRvbSA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5taW5TaXplID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJTZXREaW1lbnNpb25zOiBpLFxuICAgICAgICAgICAgICAgIGJlZm9yZUJ1aWxkTGFiZWxzOiBpLFxuICAgICAgICAgICAgICAgIGJ1aWxkTGFiZWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAodC5sZWdlbmRJdGVtcyA9IHQub3B0aW9ucy5sYWJlbHMuZ2VuZXJhdGVMYWJlbHMuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgdC5jaGFydFxuICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIHQub3B0aW9ucy5yZXZlcnNlICYmIHQubGVnZW5kSXRlbXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJCdWlsZExhYmVsczogaSxcbiAgICAgICAgICAgICAgICBiZWZvcmVGaXQ6IGksXG4gICAgICAgICAgICAgICAgZml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBuLmxhYmVscyxcbiAgICAgICAgICAgICAgICAgICAgciA9IG4uZGlzcGxheSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGkuY3R4LFxuICAgICAgICAgICAgICAgICAgICBzID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBhLmdldFZhbHVlT3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICB1ID0gZChvLmZvbnRTaXplLCBzLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIGMgPSBkKG8uZm9udFN0eWxlLCBzLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBoID0gZChvLmZvbnRGYW1pbHksIHMuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICBmID0gYS5mb250U3RyaW5nKHUsIGMsIGgpLFxuICAgICAgICAgICAgICAgICAgICBnID0gKGkubGVnZW5kSGl0Qm94ZXMgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgIHAgPSBpLm1pblNpemUsXG4gICAgICAgICAgICAgICAgICAgIG0gPSBpLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAobVxuICAgICAgICAgICAgICAgICAgICAgID8gKChwLndpZHRoID0gaS5tYXhXaWR0aCksIChwLmhlaWdodCA9IHIgPyAxMCA6IDApKVxuICAgICAgICAgICAgICAgICAgICAgIDogKChwLndpZHRoID0gciA/IDEwIDogMCksIChwLmhlaWdodCA9IGkubWF4SGVpZ2h0KSksXG4gICAgICAgICAgICAgICAgICAgIHIpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGlmICgoKGwuZm9udCA9IGYpLCBtKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gKGkubGluZVdpZHRocyA9IFswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gaS5sZWdlbmRJdGVtcy5sZW5ndGggPyB1ICsgby5wYWRkaW5nIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAobC50ZXh0QWxpZ24gPSBcImxlZnRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAobC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZWFjaChpLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbiAodCwgYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUobywgdSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG4gKyB1IC8gMiArIGwubWVhc3VyZVRleHQodC50ZXh0KS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYltiLmxlbmd0aCAtIDFdICsgciArIG8ucGFkZGluZyA+PSBpLndpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh2ICs9IHUgKyBvLnBhZGRpbmcpLCAoYltiLmxlbmd0aF0gPSBpLmxlZnQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ1thXSA9IHsgbGVmdDogMCwgdG9wOiAwLCB3aWR0aDogciwgaGVpZ2h0OiB1IH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiW2IubGVuZ3RoIC0gMV0gKz0gciArIG8ucGFkZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChwLmhlaWdodCArPSB2KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IG8ucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAoaS5jb2x1bW5XaWR0aHMgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gby5wYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgUyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIE0gPSB1ICsgeDtcbiAgICAgICAgICAgICAgICAgICAgICBhLmVhY2goaS5sZWdlbmRJdGVtcywgZnVuY3Rpb24gKHQsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZShvLCB1KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGkgKyB1IC8gMiArIGwubWVhc3VyZVRleHQodC50ZXh0KS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgKyBNID4gcC5oZWlnaHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKChrICs9IFMgKyBvLnBhZGRpbmcpLCB5LnB1c2goUyksIChTID0gMCksICh3ID0gMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoUyA9IE1hdGgubWF4KFMsIG4pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHcgKz0gTSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChnW2FdID0geyBsZWZ0OiAwLCB0b3A6IDAsIHdpZHRoOiBuLCBoZWlnaHQ6IHUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoayArPSBTKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkucHVzaChTKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChwLndpZHRoICs9IGspO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAoaS53aWR0aCA9IHAud2lkdGgpLCAoaS5oZWlnaHQgPSBwLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlckZpdDogaSxcbiAgICAgICAgICAgICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIFwidG9wXCIgPT09IHRoaXMub3B0aW9ucy5wb3NpdGlvbiB8fFxuICAgICAgICAgICAgICAgICAgICBcImJvdHRvbVwiID09PSB0aGlzLm9wdGlvbnMucG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBuLmxhYmVscyxcbiAgICAgICAgICAgICAgICAgICAgciA9IHQuZGVmYXVsdHMuZ2xvYmFsLFxuICAgICAgICAgICAgICAgICAgICBsID0gci5lbGVtZW50cy5saW5lLFxuICAgICAgICAgICAgICAgICAgICBzID0gaS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGkubGluZVdpZHRocztcbiAgICAgICAgICAgICAgICAgIGlmIChuLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUsXG4gICAgICAgICAgICAgICAgICAgICAgYyA9IGkuY3R4LFxuICAgICAgICAgICAgICAgICAgICAgIGggPSBhLmdldFZhbHVlT3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgIGYgPSBoKG8uZm9udENvbG9yLCByLmRlZmF1bHRGb250Q29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAgIGcgPSBoKG8uZm9udFNpemUsIHIuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICBwID0gaChvLmZvbnRTdHlsZSwgci5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICBtID0gaChvLmZvbnRGYW1pbHksIHIuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICAgIGIgPSBhLmZvbnRTdHJpbmcoZywgcCwgbSk7XG4gICAgICAgICAgICAgICAgICAgIChjLnRleHRBbGlnbiA9IFwibGVmdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYy50ZXh0QmFzZWxpbmUgPSBcInRvcFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAoYy5saW5lV2lkdGggPSAwLjUpLFxuICAgICAgICAgICAgICAgICAgICAgIChjLnN0cm9rZVN0eWxlID0gZiksXG4gICAgICAgICAgICAgICAgICAgICAgKGMuZmlsbFN0eWxlID0gZiksXG4gICAgICAgICAgICAgICAgICAgICAgKGMuZm9udCA9IGIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IGUobywgZyksXG4gICAgICAgICAgICAgICAgICAgICAgeCA9IGkubGVnZW5kSGl0Qm94ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgeSA9IGZ1bmN0aW9uIChlLCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpc05hTih2KSB8fCAwID49IHYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMuc2F2ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmZpbGxTdHlsZSA9IGgoaS5maWxsU3R5bGUsIHIuZGVmYXVsdENvbG9yKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMubGluZUNhcCA9IGgoaS5saW5lQ2FwLCBsLmJvcmRlckNhcFN0eWxlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMubGluZURhc2hPZmZzZXQgPSBoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5saW5lRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuYm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmxpbmVKb2luID0gaChpLmxpbmVKb2luLCBsLmJvcmRlckpvaW5TdHlsZSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmxpbmVXaWR0aCA9IGgoaS5saW5lV2lkdGgsIGwuYm9yZGVyV2lkdGgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5zdHJva2VTdHlsZSA9IGgoaS5zdHJva2VTdHlsZSwgci5kZWZhdWx0Q29sb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSAwID09PSBoKGkubGluZVdpZHRoLCBsLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLnNldExpbmVEYXNoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnNldExpbmVEYXNoKGgoaS5saW5lRGFzaCwgbC5ib3JkZXJEYXNoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5sYWJlbHMgJiYgbi5sYWJlbHMudXNlUG9pbnRTdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAoZyAqIE1hdGguU1FSVDIpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBzIC8gTWF0aC5TUVJUMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBlICsgZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBhICsgZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNhbnZhc0hlbHBlcnMuZHJhd1BvaW50KGMsIGkucG9pbnRTdHlsZSwgcywgdSwgZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gfHwgYy5zdHJva2VSZWN0KGUsIGEsIHYsIGcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5maWxsUmVjdChlLCBhLCB2LCBnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBrID0gZnVuY3Rpb24gKHQsIGUsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuZmlsbFRleHQoYS50ZXh0LCB2ICsgZyAvIDIgKyB0LCBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5oaWRkZW4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5saW5lV2lkdGggPSAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyh2ICsgZyAvIDIgKyB0LCBlICsgZyAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHYgKyBnIC8gMiArIHQgKyBpLCBlICsgZyAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc3Ryb2tlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgUyA9IGkuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgICAgIHUgPSBTXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGkubGVmdCArIChzIC0gZFswXSkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBpLnRvcCArIG8ucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDogaS5sZWZ0ICsgby5wYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBpLnRvcCArIG8ucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gZyArIG8ucGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgYS5lYWNoKGkubGVnZW5kSXRlbXMsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBjLm1lYXN1cmVUZXh0KHQudGV4dCkud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gdiArIGcgLyAyICsgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB1LngsXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdS55O1xuICAgICAgICAgICAgICAgICAgICAgIFNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gciArIG4gPj0gcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGwgPSB1LnkgKz0gdyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHUubGluZSsrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAociA9IHUueCA9IGkubGVmdCArIChzIC0gZFt1LmxpbmVdKSAvIDIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBsICsgdyA+IGkuYm90dG9tICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgociA9IHUueCA9IHIgKyBpLmNvbHVtbldpZHRoc1t1LmxpbmVdICsgby5wYWRkaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSB1LnkgPSBpLnRvcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHUubGluZSsrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkociwgbCwgdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoeFtlXS5sZWZ0ID0gciksXG4gICAgICAgICAgICAgICAgICAgICAgICAoeFtlXS50b3AgPSBsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGsociwgbCwgdCwgYSksXG4gICAgICAgICAgICAgICAgICAgICAgICBTID8gKHUueCArPSBuICsgby5wYWRkaW5nKSA6ICh1LnkgKz0gdyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBcIm1vdXNldXBcIiA9PT0gdC50eXBlID8gXCJjbGlja1wiIDogdC50eXBlLFxuICAgICAgICAgICAgICAgICAgICBvID0gITE7XG4gICAgICAgICAgICAgICAgICBpZiAoXCJtb3VzZW1vdmVcIiA9PT0gbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWkub25Ib3ZlcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2xpY2tcIiAhPT0gbikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWkub25DbGljaykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHIgPSBhLmdldFJlbGF0aXZlUG9zaXRpb24odCwgZS5jaGFydC5jaGFydCksXG4gICAgICAgICAgICAgICAgICAgIGwgPSByLngsXG4gICAgICAgICAgICAgICAgICAgIHMgPSByLnk7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGwgPj0gZS5sZWZ0ICYmXG4gICAgICAgICAgICAgICAgICAgIGwgPD0gZS5yaWdodCAmJlxuICAgICAgICAgICAgICAgICAgICBzID49IGUudG9wICYmXG4gICAgICAgICAgICAgICAgICAgIHMgPD0gZS5ib3R0b21cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IGUubGVnZW5kSGl0Qm94ZXMsIHUgPSAwOyB1IDwgZC5sZW5ndGg7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZFt1XTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBsID49IGMubGVmdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbCA8PSBjLmxlZnQgKyBjLndpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzID49IGMudG9wICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzIDw9IGMudG9wICsgYy5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImNsaWNrXCIgPT09IG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vbkNsaWNrLmNhbGwoZSwgdCwgZS5sZWdlbmRJdGVtc1t1XSksIChvID0gITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIm1vdXNlbW92ZVwiID09PSBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkub25Ib3Zlci5jYWxsKGUsIHQsIGUubGVnZW5kSXRlbXNbdV0pLCAobyA9ICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgIHQucGx1Z2lucy5yZWdpc3Rlcih7XG4gICAgICAgICAgICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5sZWdlbmQ7XG4gICAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgICgoZS5sZWdlbmQgPSBuZXcgdC5MZWdlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgIGN0eDogZS5jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogaSxcbiAgICAgICAgICAgICAgICAgICAgICBjaGFydDogZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICB0LmxheW91dFNlcnZpY2UuYWRkQm94KGUsIGUubGVnZW5kKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgMzE6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnMubm9vcDtcbiAgICAgICAgICAgICh0LnBsdWdpbnMgPSB7XG4gICAgICAgICAgICAgIF9wbHVnaW5zOiBbXSxcbiAgICAgICAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9wbHVnaW5zO1xuICAgICAgICAgICAgICAgIFtdLmNvbmNhdCh0KS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAtMSA9PT0gZS5pbmRleE9mKHQpICYmIGUucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdW5yZWdpc3RlcjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3BsdWdpbnM7XG4gICAgICAgICAgICAgICAgW10uY29uY2F0KHQpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5pbmRleE9mKHQpO1xuICAgICAgICAgICAgICAgICAgLTEgIT09IGEgJiYgZS5zcGxpY2UoYSwgMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2lucyA9IFtdO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLmxlbmd0aDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0QWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnM7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5vdGlmeTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICBuID0gdGhpcy5fcGx1Z2lucyxcbiAgICAgICAgICAgICAgICAgIG8gPSBuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGEgPSAwOyBvID4gYTsgKythKVxuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoKGkgPSBuW2FdKSxcbiAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBpW3RdICYmIGlbdF0uYXBwbHkoaSwgZSB8fCBbXSkgPT09ICExKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LlBsdWdpbkJhc2UgPSB0LkVsZW1lbnQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBiZWZvcmVJbml0OiBlLFxuICAgICAgICAgICAgICAgIGFmdGVySW5pdDogZSxcbiAgICAgICAgICAgICAgICBiZWZvcmVVcGRhdGU6IGUsXG4gICAgICAgICAgICAgICAgYWZ0ZXJVcGRhdGU6IGUsXG4gICAgICAgICAgICAgICAgYmVmb3JlRHJhdzogZSxcbiAgICAgICAgICAgICAgICBhZnRlckRyYXc6IGUsXG4gICAgICAgICAgICAgICAgZGVzdHJveTogZSxcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAodC5wbHVnaW5TZXJ2aWNlID0gdC5wbHVnaW5zKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAzMjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycztcbiAgICAgICAgICAgICh0LmRlZmF1bHRzLnNjYWxlID0ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiAhMCxcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwibGVmdFwiLFxuICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAhMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMSlcIixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogITAsXG4gICAgICAgICAgICAgICAgZHJhd09uQ2hhcnRBcmVhOiAhMCxcbiAgICAgICAgICAgICAgICBkcmF3VGlja3M6ICEwLFxuICAgICAgICAgICAgICAgIHRpY2tNYXJrTGVuZ3RoOiAxMCxcbiAgICAgICAgICAgICAgICB6ZXJvTGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIHplcm9MaW5lQ29sb3I6IFwicmdiYSgwLDAsMCwwLjI1KVwiLFxuICAgICAgICAgICAgICAgIG9mZnNldEdyaWRMaW5lczogITEsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2NhbGVMYWJlbDogeyBsYWJlbFN0cmluZzogXCJcIiwgZGlzcGxheTogITEgfSxcbiAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogITEsXG4gICAgICAgICAgICAgICAgbWluUm90YXRpb246IDAsXG4gICAgICAgICAgICAgICAgbWF4Um90YXRpb246IDUwLFxuICAgICAgICAgICAgICAgIG1pcnJvcjogITEsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogITEsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogITAsXG4gICAgICAgICAgICAgICAgYXV0b1NraXA6ICEwLFxuICAgICAgICAgICAgICAgIGF1dG9Ta2lwUGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICBsYWJlbE9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogdC5UaWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5TY2FsZSA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG4uYmVmb3JlVXBkYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIChuLm1heFdpZHRoID0gdCksXG4gICAgICAgICAgICAgICAgICAgIChuLm1heEhlaWdodCA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAobi5tYXJnaW5zID0gZS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgeyBsZWZ0OiAwLCByaWdodDogMCwgdG9wOiAwLCBib3R0b206IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICBuLmJlZm9yZVNldERpbWVuc2lvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5zZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYWZ0ZXJTZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYmVmb3JlRGF0YUxpbWl0cygpLFxuICAgICAgICAgICAgICAgICAgICBuLmRldGVybWluZURhdGFMaW1pdHMoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5hZnRlckRhdGFMaW1pdHMoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5iZWZvcmVCdWlsZFRpY2tzKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYnVpbGRUaWNrcygpLFxuICAgICAgICAgICAgICAgICAgICBuLmFmdGVyQnVpbGRUaWNrcygpLFxuICAgICAgICAgICAgICAgICAgICBuLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpLFxuICAgICAgICAgICAgICAgICAgICBuLmNvbnZlcnRUaWNrc1RvTGFiZWxzKCksXG4gICAgICAgICAgICAgICAgICAgIG4uYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbi5iZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbi5jYWxjdWxhdGVUaWNrUm90YXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgbi5hZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBuLmJlZm9yZUZpdCgpLFxuICAgICAgICAgICAgICAgICAgICBuLmZpdCgpLFxuICAgICAgICAgICAgICAgICAgICBuLmFmdGVyRml0KCksXG4gICAgICAgICAgICAgICAgICAgIG4uYWZ0ZXJVcGRhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgbi5taW5TaXplXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSwgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJlZm9yZVNldERpbWVuc2lvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0RGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgdC5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICA/ICgodC53aWR0aCA9IHQubWF4V2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAgICh0LmxlZnQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAodC5yaWdodCA9IHQud2lkdGgpKVxuICAgICAgICAgICAgICAgICAgICA6ICgodC5oZWlnaHQgPSB0Lm1heEhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQudG9wID0gMCksXG4gICAgICAgICAgICAgICAgICAgICAgKHQuYm90dG9tID0gdC5oZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ0xlZnQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ1RvcCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAodC5wYWRkaW5nUmlnaHQgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ0JvdHRvbSA9IDApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJTZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlRGF0YUxpbWl0czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZURhdGFMaW1pdHMsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmVEYXRhTGltaXRzOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgYWZ0ZXJEYXRhTGltaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJEYXRhTGltaXRzLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlQnVpbGRUaWNrczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUJ1aWxkVGlja3MsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidWlsZFRpY2tzOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgYWZ0ZXJCdWlsZFRpY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJCdWlsZFRpY2tzLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlLmNhbGxDYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm9wdGlvbnMudGlja3M7XG4gICAgICAgICAgICAgICAgICB0LnRpY2tzID0gdC50aWNrcy5tYXAoZS51c2VyQ2FsbGJhY2sgfHwgZS5jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbiwgW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEuY3R4LFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBhLm9wdGlvbnMudGlja3MsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBlLmdldFZhbHVlT3JEZWZhdWx0KG8uZm9udFNpemUsIG4uZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoby5mb250U3R5bGUsIG4uZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBlLmdldFZhbHVlT3JEZWZhdWx0KG8uZm9udEZhbWlseSwgbi5kZWZhdWx0Rm9udEZhbWlseSksXG4gICAgICAgICAgICAgICAgICAgIGQgPSBlLmZvbnRTdHJpbmcociwgbCwgcyk7XG4gICAgICAgICAgICAgICAgICBpLmZvbnQgPSBkO1xuICAgICAgICAgICAgICAgICAgdmFyIHUsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBpLm1lYXN1cmVUZXh0KGEudGlja3NbMF0pLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoID0gaS5tZWFzdXJlVGV4dChhLnRpY2tzW2EudGlja3MubGVuZ3RoIC0gMV0pLndpZHRoO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoKGEubGFiZWxSb3RhdGlvbiA9IG8ubWluUm90YXRpb24gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdSaWdodCA9IDApLFxuICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nTGVmdCA9IDApLFxuICAgICAgICAgICAgICAgICAgICBhLm9wdGlvbnMuZGlzcGxheSAmJiBhLmlzSG9yaXpvbnRhbCgpKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdSaWdodCA9IGggLyAyICsgMyksXG4gICAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ0xlZnQgPSBjIC8gMiArIDMpLFxuICAgICAgICAgICAgICAgICAgICAgIGEubG9uZ2VzdFRleHRDYWNoZSB8fCAoYS5sb25nZXN0VGV4dENhY2hlID0ge30pO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBlLmxvbmdlc3RUZXh0KGksIGQsIGEudGlja3MsIGEubG9uZ2VzdFRleHRDYWNoZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBhLmdldFBpeGVsRm9yVGljaygxKSAtIGEuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gNjtcbiAgICAgICAgICAgICAgICAgICAgICBtID4gYiAmJiBhLmxhYmVsUm90YXRpb24gPCBvLm1heFJvdGF0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICgoZiA9IE1hdGguY29zKGUudG9SYWRpYW5zKGEubGFiZWxSb3RhdGlvbikpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChnID0gTWF0aC5zaW4oZS50b1JhZGlhbnMoYS5sYWJlbFJvdGF0aW9uKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPSBmICogYyksXG4gICAgICAgICAgICAgICAgICAgICAgICB1ICsgciAvIDIgPiBhLnlMYWJlbFdpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdMZWZ0ID0gdSArIHIgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLnBhZGRpbmdSaWdodCA9IHIgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGcgKiBwID4gYS5tYXhIZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmxhYmVsUm90YXRpb24tLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBhLmxhYmVsUm90YXRpb24rKywgKG0gPSBmICogcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGEubWFyZ2lucyAmJlxuICAgICAgICAgICAgICAgICAgICAoKGEucGFkZGluZ0xlZnQgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBhLnBhZGRpbmdMZWZ0IC0gYS5tYXJnaW5zLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ1JpZ2h0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgYS5wYWRkaW5nUmlnaHQgLSBhLm1hcmdpbnMucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICApKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uLCBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJlZm9yZUZpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZS5jYWxsQ2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gKGEubWluU2l6ZSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuZGVmYXVsdHMuZ2xvYmFsLFxuICAgICAgICAgICAgICAgICAgICByID0gbi50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgbCA9IG4uc2NhbGVMYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgcyA9IG4uZ3JpZExpbmVzLFxuICAgICAgICAgICAgICAgICAgICBkID0gbi5kaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgICB1ID0gYS5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoci5mb250U2l6ZSwgby5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICBoID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChyLmZvbnRTdHlsZSwgby5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoci5mb250RmFtaWx5LCBvLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICAgICAgZyA9IGUuZm9udFN0cmluZyhjLCBoLCBmKSxcbiAgICAgICAgICAgICAgICAgICAgcCA9IGUuZ2V0VmFsdWVPckRlZmF1bHQobC5mb250U2l6ZSwgby5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICBtID0gbi5ncmlkTGluZXMudGlja01hcmtMZW5ndGg7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICh1XG4gICAgICAgICAgICAgICAgICAgICAgPyAoaS53aWR0aCA9IGEuaXNGdWxsV2lkdGgoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGEubWF4V2lkdGggLSBhLm1hcmdpbnMubGVmdCAtIGEubWFyZ2lucy5yaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGEubWF4V2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoaS53aWR0aCA9IGQgJiYgcy5kcmF3VGlja3MgPyBtIDogMCksXG4gICAgICAgICAgICAgICAgICAgIHVcbiAgICAgICAgICAgICAgICAgICAgICA/IChpLmhlaWdodCA9IGQgJiYgcy5kcmF3VGlja3MgPyBtIDogMClcbiAgICAgICAgICAgICAgICAgICAgICA6IChpLmhlaWdodCA9IGEubWF4SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgbC5kaXNwbGF5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICh1ID8gKGkuaGVpZ2h0ICs9IDEuNSAqIHApIDogKGkud2lkdGggKz0gMS41ICogcCkpLFxuICAgICAgICAgICAgICAgICAgICByLmRpc3BsYXkgJiYgZClcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBhLmxvbmdlc3RUZXh0Q2FjaGUgfHwgKGEubG9uZ2VzdFRleHRDYWNoZSA9IHt9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBlLmxvbmdlc3RUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEubG9uZ2VzdFRleHRDYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgdiA9IGUubnVtYmVyT2ZMYWJlbExpbmVzKGEudGlja3MpLFxuICAgICAgICAgICAgICAgICAgICAgIHggPSAwLjUgKiBjO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSkge1xuICAgICAgICAgICAgICAgICAgICAgIGEubG9uZ2VzdExhYmVsV2lkdGggPSBiO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGUudG9SYWRpYW5zKGEubGFiZWxSb3RhdGlvbikpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5sb25nZXN0TGFiZWxXaWR0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICBjICogdiArXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICogdjtcbiAgICAgICAgICAgICAgICAgICAgICAoaS5oZWlnaHQgPSBNYXRoLm1pbihhLm1heEhlaWdodCwgaS5oZWlnaHQgKyB5KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5jdHguZm9udCA9IGcpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0gYS5jdHgubWVhc3VyZVRleHQoYS50aWNrc1swXSkud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBTID0gYS5jdHgubWVhc3VyZVRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEudGlja3NbYS50aWNrcy5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgICAgICAgICAgKS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBNYXRoLmNvcyhlLnRvUmFkaWFucyhhLmxhYmVsUm90YXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE0gPSBNYXRoLnNpbihlLnRvUmFkaWFucyhhLmxhYmVsUm90YXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nTGVmdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAwICE9PSBhLmxhYmVsUm90YXRpb24gPyB3ICogayArIDMgOiBrIC8gMiArIDMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ1JpZ2h0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgMCAhPT0gYS5sYWJlbFJvdGF0aW9uID8gTSAqIChjIC8gMikgKyAzIDogUyAvIDIgKyAzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgQyA9IGEubWF4V2lkdGggLSBpLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgRCA9IHIubWlycm9yO1xuICAgICAgICAgICAgICAgICAgICAgIEQgPyAoYiA9IDApIDogKGIgKz0gYS5vcHRpb25zLnRpY2tzLnBhZGRpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgQyA+IGIgPyAoaS53aWR0aCArPSBiKSA6IChpLndpZHRoID0gYS5tYXhXaWR0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nVG9wID0gYyAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEucGFkZGluZ0JvdHRvbSA9IGMgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYS5tYXJnaW5zICYmXG4gICAgICAgICAgICAgICAgICAgICgoYS5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgIGEucGFkZGluZ0xlZnQgLSBhLm1hcmdpbnMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nVG9wID0gTWF0aC5tYXgoYS5wYWRkaW5nVG9wIC0gYS5tYXJnaW5zLnRvcCwgMCkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBhLnBhZGRpbmdSaWdodCAtIGEubWFyZ2lucy5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5wYWRkaW5nQm90dG9tID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgYS5wYWRkaW5nQm90dG9tIC0gYS5tYXJnaW5zLmJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICkpKSxcbiAgICAgICAgICAgICAgICAgICAgKGEud2lkdGggPSBpLndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgKGEuaGVpZ2h0ID0gaS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJGaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGUuY2FsbENhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIiA9PT0gdGhpcy5vcHRpb25zLnBvc2l0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgIFwiYm90dG9tXCIgPT09IHRoaXMub3B0aW9ucy5wb3NpdGlvblxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlzRnVsbFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxXaWR0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFJpZ2h0VmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gdCB8fCBcInVuZGVmaW5lZFwiID09IHR5cGVvZiB0XG4gICAgICAgICAgICAgICAgICAgID8gTmFOXG4gICAgICAgICAgICAgICAgICAgIDogXCJudW1iZXJcIiAhPSB0eXBlb2YgdCB8fCBpc0Zpbml0ZSh0KVxuICAgICAgICAgICAgICAgICAgICA/IFwib2JqZWN0XCIgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgICAgICA/IHQgaW5zdGFuY2VvZiBEYXRlIHx8IHQuaXNWYWxpZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZ2V0UmlnaHRWYWx1ZSh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdC54IDogdC55KVxuICAgICAgICAgICAgICAgICAgICAgIDogdFxuICAgICAgICAgICAgICAgICAgICA6IE5hTjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGUubm9vcCxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclZhbHVlOiBlLm5vb3AsXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWVGb3JQaXhlbDogZS5ub29wLFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIGlmIChhLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gYS53aWR0aCAtIChhLnBhZGRpbmdMZWZ0ICsgYS5wYWRkaW5nUmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPVxuICAgICAgICAgICAgICAgICAgICAgICAgaSAvXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS50aWNrcy5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhLm9wdGlvbnMuZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcyA/IDAgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBvID0gbiAqIHQgKyBhLnBhZGRpbmdMZWZ0O1xuICAgICAgICAgICAgICAgICAgICBlICYmIChvICs9IG4gLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBhLmxlZnQgKyBNYXRoLnJvdW5kKG8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHIgKz0gYS5pc0Z1bGxXaWR0aCgpID8gYS5tYXJnaW5zLmxlZnQgOiAwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBsID0gYS5oZWlnaHQgLSAoYS5wYWRkaW5nVG9wICsgYS5wYWRkaW5nQm90dG9tKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhLnRvcCArIHQgKiAobCAvIChhLnRpY2tzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBpeGVsRm9yRGVjaW1hbDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIGlmIChlLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gZS53aWR0aCAtIChlLnBhZGRpbmdMZWZ0ICsgZS5wYWRkaW5nUmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPSBhICogdCArIGUucGFkZGluZ0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgbiA9IGUubGVmdCArIE1hdGgucm91bmQoaSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobiArPSBlLmlzRnVsbFdpZHRoKCkgPyBlLm1hcmdpbnMubGVmdCA6IDApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudG9wICsgdCAqIGUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QmFzZVBpeGVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm1pbixcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQubWF4O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2V0UGl4ZWxGb3JWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgdC5iZWdpbkF0WmVyb1xuICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgIDogMCA+IGUgJiYgMCA+IGFcbiAgICAgICAgICAgICAgICAgICAgICA/IGFcbiAgICAgICAgICAgICAgICAgICAgICA6IGUgPiAwICYmIGEgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgPyBlXG4gICAgICAgICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgIGlmIChuLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8sXG4gICAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgICBsID0gaS5jdHgsXG4gICAgICAgICAgICAgICAgICAgICAgcyA9IHQuZGVmYXVsdHMuZ2xvYmFsLFxuICAgICAgICAgICAgICAgICAgICAgIGQgPSBuLnRpY2tzLFxuICAgICAgICAgICAgICAgICAgICAgIHUgPSBuLmdyaWRMaW5lcyxcbiAgICAgICAgICAgICAgICAgICAgICBjID0gbi5zY2FsZUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgIGggPSAwICE9PSBpLmxhYmVsUm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgZiA9IGQuYXV0b1NraXAsXG4gICAgICAgICAgICAgICAgICAgICAgZyA9IGkuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGQubWF4VGlja3NMaW1pdCAmJiAociA9IGQubWF4VGlja3NMaW1pdCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuZm9udENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5kZWZhdWx0Rm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBtID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChkLmZvbnRTaXplLCBzLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgYiA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoZC5mb250U3R5bGUsIHMuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgdiA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBkLmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmRlZmF1bHRGb250RmFtaWx5XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB4ID0gZS5mb250U3RyaW5nKG0sIGIsIHYpLFxuICAgICAgICAgICAgICAgICAgICAgIHkgPSB1LnRpY2tNYXJrTGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgIGsgPSBlLmdldFZhbHVlT3JEZWZhdWx0KHUuYm9yZGVyRGFzaCwgcy5ib3JkZXJEYXNoKSxcbiAgICAgICAgICAgICAgICAgICAgICBTID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHUuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgdyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoYy5mb250Q29sb3IsIHMuZGVmYXVsdEZvbnRDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgTSA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoYy5mb250U2l6ZSwgcy5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgIEMgPSBlLmdldFZhbHVlT3JEZWZhdWx0KGMuZm9udFN0eWxlLCBzLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAgIEQgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYy5mb250RmFtaWx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5kZWZhdWx0Rm9udEZhbWlseVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgSSA9IGUuZm9udFN0cmluZyhNLCBDLCBEKSxcbiAgICAgICAgICAgICAgICAgICAgICBBID0gZS50b1JhZGlhbnMoaS5sYWJlbFJvdGF0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICBUID0gTWF0aC5jb3MoQSksXG4gICAgICAgICAgICAgICAgICAgICAgUCA9IGkubG9uZ2VzdExhYmVsV2lkdGggKiBUO1xuICAgICAgICAgICAgICAgICAgICBsLmZpbGxTdHlsZSA9IHA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBGID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKChvID0gITEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaCAmJiAoUCAvPSAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChQICsgZC5hdXRvU2tpcFBhZGRpbmcpICogaS50aWNrcy5sZW5ndGggPlxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLndpZHRoIC0gKGkucGFkZGluZ0xlZnQgKyBpLnBhZGRpbmdSaWdodCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKG8gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKFAgKyBkLmF1dG9Ta2lwUGFkZGluZykgKiBpLnRpY2tzLmxlbmd0aCkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS53aWR0aCAtIChpLnBhZGRpbmdMZWZ0ICsgaS5wYWRkaW5nUmlnaHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgciAmJiBpLnRpY2tzLmxlbmd0aCA+IHIpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICFvIHx8IGkudGlja3MubGVuZ3RoIC8gKG8gfHwgMSkgPiByOyApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8gfHwgKG8gPSAxKSwgKG8gKz0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgZiB8fCAobyA9ICExKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgXyA9IFwicmlnaHRcIiA9PT0gbi5wb3NpdGlvbiA/IGkubGVmdCA6IGkucmlnaHQgLSB5LFxuICAgICAgICAgICAgICAgICAgICAgIFIgPSBcInJpZ2h0XCIgPT09IG4ucG9zaXRpb24gPyBpLmxlZnQgKyB5IDogaS5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICBWID0gXCJib3R0b21cIiA9PT0gbi5wb3NpdGlvbiA/IGkudG9wIDogaS5ib3R0b20gLSB5LFxuICAgICAgICAgICAgICAgICAgICAgIEwgPSBcImJvdHRvbVwiID09PSBuLnBvc2l0aW9uID8gaS50b3AgKyB5IDogaS5ib3R0b207XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAoZS5lYWNoKGkudGlja3MsIGZ1bmN0aW9uICh0LCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0ICYmIG51bGwgIT09IHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBpLnRpY2tzLmxlbmd0aCA9PT0gciArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobyA+IDEgJiYgciAlIG8gPiAwKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIgJSBvID09PSAwICYmIHIgKyBvID49IGkudGlja3MubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghcyB8fCBsKSAmJiB2b2lkIDAgIT09IHQgJiYgbnVsbCAhPT0gdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjLCBmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGkuemVyb0xpbmVJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLnplcm9MaW5lSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChjID0gdS56ZXJvTGluZVdpZHRoKSwgKGYgPSB1Lnplcm9MaW5lQ29sb3IpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGMgPSBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LmxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZiA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KHUuY29sb3IsIHIpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUID0gXCJtaWRkbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFAgPSBcIm1pZGRsZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChQID0gXCJ0b3BcIiA9PT0gbi5wb3NpdGlvbiA/IFwiYm90dG9tXCIgOiBcInRvcFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFQgPSBoID8gXCJyaWdodFwiIDogXCJjZW50ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTyA9IGkuZ2V0UGl4ZWxGb3JUaWNrKHIpICsgZS5hbGlhc1BpeGVsKGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmdldFBpeGVsRm9yVGljayhyLCB1Lm9mZnNldEdyaWRMaW5lcykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxhYmVsT2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEkgPSBoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLnRvcCArIDEyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcInRvcFwiID09PSBuLnBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLmJvdHRvbSAtIHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkudG9wICsgeSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwID0gYiA9IHggPSBNID0gTyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtID0gViksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2ID0gTCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3ID0gYS50b3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQyA9IGEuYm90dG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCIgPT09IG4ucG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkLm1pcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChEID0gaS5yaWdodCArIGQucGFkZGluZyksIChUID0gXCJsZWZ0XCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKChEID0gaS5yaWdodCAtIGQucGFkZGluZyksIChUID0gXCJyaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkLm1pcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgoRCA9IGkubGVmdCAtIGQucGFkZGluZyksIChUID0gXCJyaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKEQgPSBpLmxlZnQgKyBkLnBhZGRpbmcpLCAoVCA9IFwibGVmdFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgQiA9IGkuZ2V0UGl4ZWxGb3JUaWNrKHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEIgKz0gZS5hbGlhc1BpeGVsKGMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEkgPSBpLmdldFBpeGVsRm9yVGljayhyLCB1Lm9mZnNldEdyaWRMaW5lcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocCA9IF8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYiA9IFIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeCA9IGEubGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChNID0gYS5yaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtID0gdiA9IHcgPSBDID0gQik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eDE6IHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eTE6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eDI6IGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eTI6IHYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxOiB3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDI6IE0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogQyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsWDogRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsWTogSSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsV2lkdGg6IGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbENvbG9yOiBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xCb3JkZXJEYXNoOiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xCb3JkZXJEYXNoT2Zmc2V0OiBTLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IC0xICogQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiBQLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKEYsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh1LmRpc3BsYXkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5zYXZlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwubGluZVdpZHRoID0gdC5nbFdpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC5zdHJva2VTdHlsZSA9IHQuZ2xDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5zZXRMaW5lRGFzaCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwuc2V0TGluZURhc2godC5nbEJvcmRlckRhc2gpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwubGluZURhc2hPZmZzZXQgPSB0LmdsQm9yZGVyRGFzaE9mZnNldCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5kcmF3VGlja3MgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsLm1vdmVUbyh0LnR4MSwgdC50eTEpLCBsLmxpbmVUbyh0LnR4MiwgdC50eTIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LmRyYXdPbkNoYXJ0QXJlYSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwubW92ZVRvKHQueDEsIHQueTEpLCBsLmxpbmVUbyh0LngyLCB0LnkyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5zdHJva2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnJlc3RvcmUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuZGlzcGxheSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsLnNhdmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnRyYW5zbGF0ZSh0LmxhYmVsWCwgdC5sYWJlbFkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwucm90YXRlKHQucm90YXRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsLmZvbnQgPSB4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobC50ZXh0QmFzZWxpbmUgPSB0LnRleHRCYXNlbGluZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwudGV4dEFsaWduID0gdC50ZXh0QWxpZ24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHQubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmlzQXJyYXkoYSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gMCwgbiA9IC0oYS5sZW5ndGggLSAxKSAqIG0gKiAwLjc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA8IGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5maWxsVGV4dChcIlwiICsgYVtpXSwgMCwgbiksIChuICs9IDEuNSAqIG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGwuZmlsbFRleHQoYSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGwucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGMuZGlzcGxheSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIE8sXG4gICAgICAgICAgICAgICAgICAgICAgICBCLFxuICAgICAgICAgICAgICAgICAgICAgICAgVyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGcpXG4gICAgICAgICAgICAgICAgICAgICAgICAoTyA9IGkubGVmdCArIChpLnJpZ2h0IC0gaS5sZWZ0KSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoQiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIiA9PT0gbi5wb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLmJvdHRvbSAtIE0gLyAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkudG9wICsgTSAvIDIpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHogPSBcImxlZnRcIiA9PT0gbi5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIChPID0geiA/IGkubGVmdCArIE0gLyAyIDogaS5yaWdodCAtIE0gLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKEIgPSBpLnRvcCArIChpLmJvdHRvbSAtIGkudG9wKSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoVyA9IHogPyAtMC41ICogTWF0aC5QSSA6IDAuNSAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBsLnNhdmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwudHJhbnNsYXRlKE8sIEIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC5yb3RhdGUoVyksXG4gICAgICAgICAgICAgICAgICAgICAgICAobC50ZXh0QWxpZ24gPSBcImNlbnRlclwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsLnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGwuZmlsbFN0eWxlID0gdyksXG4gICAgICAgICAgICAgICAgICAgICAgICAobC5mb250ID0gSSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLmZpbGxUZXh0KGMubGFiZWxTdHJpbmcsIDAsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHUuZHJhd0JvcmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgIChsLmxpbmVXaWR0aCA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdS5saW5lV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAobC5zdHJva2VTdHlsZSA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1LmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgTiA9IGkubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEUgPSBpLnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgSCA9IGkudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgVSA9IGkuYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGUuYWxpYXNQaXhlbChsLmxpbmVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKEggPSBVID0gXCJ0b3BcIiA9PT0gbi5wb3NpdGlvbiA/IGkuYm90dG9tIDogaS50b3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoSCArPSBqKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKFUgKz0gaikpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgoTiA9IEUgPSBcImxlZnRcIiA9PT0gbi5wb3NpdGlvbiA/IGkucmlnaHQgOiBpLmxlZnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoTiArPSBqKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKEUgKz0gaikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwubW92ZVRvKE4sIEgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbC5saW5lVG8oRSwgVSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDMzOiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgdC5zY2FsZVNlcnZpY2UgPSB7XG4gICAgICAgICAgICAgIGNvbnN0cnVjdG9yczoge30sXG4gICAgICAgICAgICAgIGRlZmF1bHRzOiB7fSxcbiAgICAgICAgICAgICAgcmVnaXN0ZXJTY2FsZVR5cGU6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgKHRoaXMuY29uc3RydWN0b3JzW3RdID0gYSksICh0aGlzLmRlZmF1bHRzW3RdID0gZS5jbG9uZShpKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldFNjYWxlQ29uc3RydWN0b3I6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3JzLmhhc093blByb3BlcnR5KHQpXG4gICAgICAgICAgICAgICAgICA/IHRoaXMuY29uc3RydWN0b3JzW3RdXG4gICAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0U2NhbGVEZWZhdWx0czogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShhKVxuICAgICAgICAgICAgICAgICAgPyBlLnNjYWxlTWVyZ2UodC5kZWZhdWx0cy5zY2FsZSwgdGhpcy5kZWZhdWx0c1thXSlcbiAgICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHVwZGF0ZVNjYWxlRGVmYXVsdHM6IGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmRlZmF1bHRzO1xuICAgICAgICAgICAgICAgIGkuaGFzT3duUHJvcGVydHkodCkgJiYgKGlbdF0gPSBlLmV4dGVuZChpW3RdLCBhKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFkZFNjYWxlc1RvTGF5b3V0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIGUuZWFjaChhLnNjYWxlcywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHQubGF5b3V0U2VydmljZS5hZGRCb3goYSwgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDM0OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgdC5UaWNrcyA9IHtcbiAgICAgICAgICAgICAgZ2VuZXJhdG9yczoge1xuICAgICAgICAgICAgICAgIGxpbmVhcjogZnVuY3Rpb24gKHQsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBuID0gW107XG4gICAgICAgICAgICAgICAgICBpZiAodC5zdGVwU2l6ZSAmJiB0LnN0ZXBTaXplID4gMCkgaSA9IHQuc3RlcFNpemU7XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLm5pY2VOdW0oYS5tYXggLSBhLm1pbiwgITEpO1xuICAgICAgICAgICAgICAgICAgICBpID0gZS5uaWNlTnVtKG8gLyAodC5tYXhUaWNrcyAtIDEpLCAhMCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgciA9IE1hdGguZmxvb3IoYS5taW4gLyBpKSAqIGksXG4gICAgICAgICAgICAgICAgICAgIGwgPSBNYXRoLmNlaWwoYS5tYXggLyBpKSAqIGk7XG4gICAgICAgICAgICAgICAgICBpZiAodC5taW4gJiYgdC5tYXggJiYgdC5zdGVwU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICh0Lm1heCAtIHQubWluKSAlIHQuc3RlcFNpemUgPT09IDA7XG4gICAgICAgICAgICAgICAgICAgIHMgJiYgKChyID0gdC5taW4pLCAobCA9IHQubWF4KSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgZCA9IChsIC0gcikgLyBpO1xuICAgICAgICAgICAgICAgICAgKGQgPSBlLmFsbW9zdEVxdWFscyhkLCBNYXRoLnJvdW5kKGQpLCBpIC8gMWUzKVxuICAgICAgICAgICAgICAgICAgICA/IE1hdGgucm91bmQoZClcbiAgICAgICAgICAgICAgICAgICAgOiBNYXRoLmNlaWwoZCkpLFxuICAgICAgICAgICAgICAgICAgICBuLnB1c2godm9pZCAwICE9PSB0Lm1pbiA/IHQubWluIDogcik7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciB1ID0gMTsgZCA+IHU7ICsrdSkgbi5wdXNoKHIgKyB1ICogaSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbi5wdXNoKHZvaWQgMCAhPT0gdC5tYXggPyB0Lm1heCA6IGwpLCBuO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbG9nYXJpdGhtaWM6IGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPSBlLmdldFZhbHVlT3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgIG8gPSBuKHQubWluLCBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihlLmxvZzEwKGEubWluKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgbyA8IGEubWF4O1xuXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG8pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgciwgbDtcbiAgICAgICAgICAgICAgICAgICAgMCA9PT0gb1xuICAgICAgICAgICAgICAgICAgICAgID8gKChyID0gTWF0aC5mbG9vcihlLmxvZzEwKGEubWluTm90WmVybykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsID0gTWF0aC5yb3VuZChhLm1pbk5vdFplcm8gLyBNYXRoLnBvdygxMCwgcikpKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICgociA9IE1hdGguZmxvb3IoZS5sb2cxMChvKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSBNYXRoLmZsb29yKG8gLyBNYXRoLnBvdygxMCwgcikpICsgMSkpLFxuICAgICAgICAgICAgICAgICAgICAgIDEwID09PSBsICYmICgobCA9IDEpLCArK3IpLFxuICAgICAgICAgICAgICAgICAgICAgIChvID0gbCAqIE1hdGgucG93KDEwLCByKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgcyA9IG4odC5tYXgsIG8pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkucHVzaChzKSwgaTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuaXNBcnJheSh0KSA/IHQgOiBcIlwiICsgdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxpbmVhcjogZnVuY3Rpb24gKHQsIGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gaS5sZW5ndGggPiAzID8gaVsyXSAtIGlbMV0gOiBpWzFdIC0gaVswXTtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKG4pID4gMSAmJlxuICAgICAgICAgICAgICAgICAgICB0ICE9PSBNYXRoLmZsb29yKHQpICYmXG4gICAgICAgICAgICAgICAgICAgIChuID0gdCAtIE1hdGguZmxvb3IodCkpO1xuICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLmxvZzEwKE1hdGguYWJzKG4pKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICBpZiAoMCAhPT0gdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IC0xICogTWF0aC5mbG9vcihvKTtcbiAgICAgICAgICAgICAgICAgICAgKGwgPSBNYXRoLm1heChNYXRoLm1pbihsLCAyMCksIDApKSwgKHIgPSB0LnRvRml4ZWQobCkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHIgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbG9nYXJpdGhtaWM6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbiA9IHQgLyBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihlLmxvZzEwKHQpKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMCA9PT0gdFxuICAgICAgICAgICAgICAgICAgICA/IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgIDogMSA9PT0gbiB8fFxuICAgICAgICAgICAgICAgICAgICAgIDIgPT09IG4gfHxcbiAgICAgICAgICAgICAgICAgICAgICA1ID09PSBuIHx8XG4gICAgICAgICAgICAgICAgICAgICAgMCA9PT0gYSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGEgPT09IGkubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICA/IHQudG9FeHBvbmVudGlhbCgpXG4gICAgICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAzNTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycztcbiAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlID0ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiAhMSxcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwidG9wXCIsXG4gICAgICAgICAgICAgIGZ1bGxXaWR0aDogITAsXG4gICAgICAgICAgICAgIGZvbnRTdHlsZTogXCJib2xkXCIsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBhID0gZS5ub29wO1xuICAgICAgICAgICAgKHQuVGl0bGUgPSB0LkVsZW1lbnQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgZS5leHRlbmQoaSwgYSksXG4gICAgICAgICAgICAgICAgICAoaS5vcHRpb25zID0gZS5jb25maWdNZXJnZShcbiAgICAgICAgICAgICAgICAgICAgdC5kZWZhdWx0cy5nbG9iYWwudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGEub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAoaS5sZWdlbmRIaXRCb3hlcyA9IFtdKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgYSAmJlxuICAgICAgICAgICAgICAgICAgYS50aXRsZSAmJlxuICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucyA9IGUuY29uZmlnTWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBhLnRpdGxlXG4gICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgaS5iZWZvcmVVcGRhdGUoKSxcbiAgICAgICAgICAgICAgICAgIChpLm1heFdpZHRoID0gdCksXG4gICAgICAgICAgICAgICAgICAoaS5tYXhIZWlnaHQgPSBlKSxcbiAgICAgICAgICAgICAgICAgIChpLm1hcmdpbnMgPSBhKSxcbiAgICAgICAgICAgICAgICAgIGkuYmVmb3JlU2V0RGltZW5zaW9ucygpLFxuICAgICAgICAgICAgICAgICAgaS5zZXREaW1lbnNpb25zKCksXG4gICAgICAgICAgICAgICAgICBpLmFmdGVyU2V0RGltZW5zaW9ucygpLFxuICAgICAgICAgICAgICAgICAgaS5iZWZvcmVCdWlsZExhYmVscygpLFxuICAgICAgICAgICAgICAgICAgaS5idWlsZExhYmVscygpLFxuICAgICAgICAgICAgICAgICAgaS5hZnRlckJ1aWxkTGFiZWxzKCksXG4gICAgICAgICAgICAgICAgICBpLmJlZm9yZUZpdCgpLFxuICAgICAgICAgICAgICAgICAgaS5maXQoKSxcbiAgICAgICAgICAgICAgICAgIGkuYWZ0ZXJGaXQoKSxcbiAgICAgICAgICAgICAgICAgIGkuYWZ0ZXJVcGRhdGUoKSxcbiAgICAgICAgICAgICAgICAgIGkubWluU2l6ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFmdGVyVXBkYXRlOiBhLFxuICAgICAgICAgICAgICBiZWZvcmVTZXREaW1lbnNpb25zOiBhLFxuICAgICAgICAgICAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHQuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgID8gKCh0LndpZHRoID0gdC5tYXhXaWR0aCksICh0LmxlZnQgPSAwKSwgKHQucmlnaHQgPSB0LndpZHRoKSlcbiAgICAgICAgICAgICAgICAgIDogKCh0LmhlaWdodCA9IHQubWF4SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgKHQudG9wID0gMCksXG4gICAgICAgICAgICAgICAgICAgICh0LmJvdHRvbSA9IHQuaGVpZ2h0KSksXG4gICAgICAgICAgICAgICAgICAodC5wYWRkaW5nTGVmdCA9IDApLFxuICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ1RvcCA9IDApLFxuICAgICAgICAgICAgICAgICAgKHQucGFkZGluZ1JpZ2h0ID0gMCksXG4gICAgICAgICAgICAgICAgICAodC5wYWRkaW5nQm90dG9tID0gMCksXG4gICAgICAgICAgICAgICAgICAodC5taW5TaXplID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhZnRlclNldERpbWVuc2lvbnM6IGEsXG4gICAgICAgICAgICAgIGJlZm9yZUJ1aWxkTGFiZWxzOiBhLFxuICAgICAgICAgICAgICBidWlsZExhYmVsczogYSxcbiAgICAgICAgICAgICAgYWZ0ZXJCdWlsZExhYmVsczogYSxcbiAgICAgICAgICAgICAgYmVmb3JlRml0OiBhLFxuICAgICAgICAgICAgICBmaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICBpID0gZS5nZXRWYWx1ZU9yRGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgIG4gPSBhLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICBvID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgICByID0gbi5kaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgbCA9IGkobi5mb250U2l6ZSwgby5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgcyA9IGEubWluU2l6ZTtcbiAgICAgICAgICAgICAgICBhLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICA/ICgocy53aWR0aCA9IGEubWF4V2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAocy5oZWlnaHQgPSByID8gbCArIDIgKiBuLnBhZGRpbmcgOiAwKSlcbiAgICAgICAgICAgICAgICAgIDogKChzLndpZHRoID0gciA/IGwgKyAyICogbi5wYWRkaW5nIDogMCksXG4gICAgICAgICAgICAgICAgICAgIChzLmhlaWdodCA9IGEubWF4SGVpZ2h0KSksXG4gICAgICAgICAgICAgICAgICAoYS53aWR0aCA9IHMud2lkdGgpLFxuICAgICAgICAgICAgICAgICAgKGEuaGVpZ2h0ID0gcy5oZWlnaHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhZnRlckZpdDogYSxcbiAgICAgICAgICAgICAgaXNIb3Jpem9udGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidG9wXCIgPT09IHQgfHwgXCJib3R0b21cIiA9PT0gdDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgIGkgPSBhLmN0eCxcbiAgICAgICAgICAgICAgICAgIG4gPSBlLmdldFZhbHVlT3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgbyA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgIHIgPSB0LmRlZmF1bHRzLmdsb2JhbDtcbiAgICAgICAgICAgICAgICBpZiAoby5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbCxcbiAgICAgICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgdSA9IG4oby5mb250U2l6ZSwgci5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICBjID0gbihvLmZvbnRTdHlsZSwgci5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgaCA9IG4oby5mb250RmFtaWx5LCByLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IGUuZm9udFN0cmluZyh1LCBjLCBoKSxcbiAgICAgICAgICAgICAgICAgICAgZyA9IDAsXG4gICAgICAgICAgICAgICAgICAgIHAgPSBhLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgbSA9IGEubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgYiA9IGEuYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICB2ID0gYS5yaWdodDtcbiAgICAgICAgICAgICAgICAgIChpLmZpbGxTdHlsZSA9IG4oby5mb250Q29sb3IsIHIuZGVmYXVsdEZvbnRDb2xvcikpLFxuICAgICAgICAgICAgICAgICAgICAoaS5mb250ID0gZiksXG4gICAgICAgICAgICAgICAgICAgIGEuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgICAgICA/ICgobCA9IG0gKyAodiAtIG0pIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAocyA9IHAgKyAoYiAtIHApIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZCA9IHYgLSBtKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICgobCA9IFwibGVmdFwiID09PSBvLnBvc2l0aW9uID8gbSArIHUgLyAyIDogdiAtIHUgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzID0gcCArIChiIC0gcCkgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChkID0gYiAtIHApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGcgPSBNYXRoLlBJICogKFwibGVmdFwiID09PSBvLnBvc2l0aW9uID8gLTAuNSA6IDAuNSkpKSxcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlKCksXG4gICAgICAgICAgICAgICAgICAgIGkudHJhbnNsYXRlKGwsIHMpLFxuICAgICAgICAgICAgICAgICAgICBpLnJvdGF0ZShnKSxcbiAgICAgICAgICAgICAgICAgICAgKGkudGV4dEFsaWduID0gXCJjZW50ZXJcIiksXG4gICAgICAgICAgICAgICAgICAgIChpLnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCIpLFxuICAgICAgICAgICAgICAgICAgICBpLmZpbGxUZXh0KG8udGV4dCwgMCwgMCwgZCksXG4gICAgICAgICAgICAgICAgICAgIGkucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgdC5wbHVnaW5zLnJlZ2lzdGVyKHtcbiAgICAgICAgICAgICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgaSAmJlxuICAgICAgICAgICAgICAgICAgICAoKGUudGl0bGVCbG9jayA9IG5ldyB0LlRpdGxlKHtcbiAgICAgICAgICAgICAgICAgICAgICBjdHg6IGUuY2hhcnQuY3R4LFxuICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGksXG4gICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgdC5sYXlvdXRTZXJ2aWNlLmFkZEJveChlLCBlLnRpdGxlQmxvY2spKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAzNjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGUpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSBzLmNvbG9yKHQpO1xuICAgICAgICAgICAgICByZXR1cm4gYS5hbHBoYShlICogYS5hbHBoYSgpKS5yZ2JhU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhKHQsIGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBlICYmXG4gICAgICAgICAgICAgICAgICAocy5pc0FycmF5KGUpID8gQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodCwgZSkgOiB0LnB1c2goZSkpLFxuICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGkodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHQuX3hTY2FsZSxcbiAgICAgICAgICAgICAgICBhID0gdC5feVNjYWxlIHx8IHQuX3NjYWxlLFxuICAgICAgICAgICAgICAgIGkgPSB0Ll9pbmRleCxcbiAgICAgICAgICAgICAgICBuID0gdC5fZGF0YXNldEluZGV4O1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHhMYWJlbDogZSA/IGUuZ2V0TGFiZWxGb3JJbmRleChpLCBuKSA6IFwiXCIsXG4gICAgICAgICAgICAgICAgeUxhYmVsOiBhID8gYS5nZXRMYWJlbEZvckluZGV4KGksIG4pIDogXCJcIixcbiAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG4sXG4gICAgICAgICAgICAgICAgeDogdC5fbW9kZWwueCxcbiAgICAgICAgICAgICAgICB5OiB0Ll9tb2RlbC55LFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbihlKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgICAgaSA9IHMuZ2V0VmFsdWVPckRlZmF1bHQ7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeFBhZGRpbmc6IGUueFBhZGRpbmcsXG4gICAgICAgICAgICAgICAgeVBhZGRpbmc6IGUueVBhZGRpbmcsXG4gICAgICAgICAgICAgICAgeEFsaWduOiBlLnhBbGlnbixcbiAgICAgICAgICAgICAgICB5QWxpZ246IGUueUFsaWduLFxuICAgICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IGUuYm9keUZvbnRDb2xvcixcbiAgICAgICAgICAgICAgICBfYm9keUZvbnRGYW1pbHk6IGkoZS5ib2R5Rm9udEZhbWlseSwgYS5kZWZhdWx0Rm9udEZhbWlseSksXG4gICAgICAgICAgICAgICAgX2JvZHlGb250U3R5bGU6IGkoZS5ib2R5Rm9udFN0eWxlLCBhLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgIF9ib2R5QWxpZ246IGUuYm9keUFsaWduLFxuICAgICAgICAgICAgICAgIGJvZHlGb250U2l6ZTogaShlLmJvZHlGb250U2l6ZSwgYS5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgIGJvZHlTcGFjaW5nOiBlLmJvZHlTcGFjaW5nLFxuICAgICAgICAgICAgICAgIHRpdGxlRm9udENvbG9yOiBlLnRpdGxlRm9udENvbG9yLFxuICAgICAgICAgICAgICAgIF90aXRsZUZvbnRGYW1pbHk6IGkoZS50aXRsZUZvbnRGYW1pbHksIGEuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgIF90aXRsZUZvbnRTdHlsZTogaShlLnRpdGxlRm9udFN0eWxlLCBhLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgIHRpdGxlRm9udFNpemU6IGkoZS50aXRsZUZvbnRTaXplLCBhLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgX3RpdGxlQWxpZ246IGUudGl0bGVBbGlnbixcbiAgICAgICAgICAgICAgICB0aXRsZVNwYWNpbmc6IGUudGl0bGVTcGFjaW5nLFxuICAgICAgICAgICAgICAgIHRpdGxlTWFyZ2luQm90dG9tOiBlLnRpdGxlTWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICAgIGZvb3RlckZvbnRDb2xvcjogZS5mb290ZXJGb250Q29sb3IsXG4gICAgICAgICAgICAgICAgX2Zvb3RlckZvbnRGYW1pbHk6IGkoZS5mb290ZXJGb250RmFtaWx5LCBhLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICBfZm9vdGVyRm9udFN0eWxlOiBpKGUuZm9vdGVyRm9udFN0eWxlLCBhLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgIGZvb3RlckZvbnRTaXplOiBpKGUuZm9vdGVyRm9udFNpemUsIGEuZGVmYXVsdEZvbnRTaXplKSxcbiAgICAgICAgICAgICAgICBfZm9vdGVyQWxpZ246IGUuZm9vdGVyQWxpZ24sXG4gICAgICAgICAgICAgICAgZm9vdGVyU3BhY2luZzogZS5mb290ZXJTcGFjaW5nLFxuICAgICAgICAgICAgICAgIGZvb3Rlck1hcmdpblRvcDogZS5mb290ZXJNYXJnaW5Ub3AsXG4gICAgICAgICAgICAgICAgY2FyZXRTaXplOiBlLmNhcmV0U2l6ZSxcbiAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXM6IGUuY29ybmVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICBsZWdlbmRDb2xvckJhY2tncm91bmQ6IGUubXVsdGlLZXlCYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGUuZGlzcGxheUNvbG9ycyxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG8odCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IHQuX2NoYXJ0LmN0eCxcbiAgICAgICAgICAgICAgICBpID0gMiAqIGUueVBhZGRpbmcsXG4gICAgICAgICAgICAgICAgbiA9IDAsXG4gICAgICAgICAgICAgICAgbyA9IGUuYm9keSxcbiAgICAgICAgICAgICAgICByID0gby5yZWR1Y2UoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0ICsgZS5iZWZvcmUubGVuZ3RoICsgZS5saW5lcy5sZW5ndGggKyBlLmFmdGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgciArPSBlLmJlZm9yZUJvZHkubGVuZ3RoICsgZS5hZnRlckJvZHkubGVuZ3RoO1xuICAgICAgICAgICAgICB2YXIgbCA9IGUudGl0bGUubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGQgPSBlLmZvb3Rlci5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdSA9IGUudGl0bGVGb250U2l6ZSxcbiAgICAgICAgICAgICAgICBjID0gZS5ib2R5Rm9udFNpemUsXG4gICAgICAgICAgICAgICAgaCA9IGUuZm9vdGVyRm9udFNpemU7XG4gICAgICAgICAgICAgIChpICs9IGwgKiB1KSxcbiAgICAgICAgICAgICAgICAoaSArPSBsID8gKGwgLSAxKSAqIGUudGl0bGVTcGFjaW5nIDogMCksXG4gICAgICAgICAgICAgICAgKGkgKz0gbCA/IGUudGl0bGVNYXJnaW5Cb3R0b20gOiAwKSxcbiAgICAgICAgICAgICAgICAoaSArPSByICogYyksXG4gICAgICAgICAgICAgICAgKGkgKz0gciA/IChyIC0gMSkgKiBlLmJvZHlTcGFjaW5nIDogMCksXG4gICAgICAgICAgICAgICAgKGkgKz0gZCA/IGUuZm9vdGVyTWFyZ2luVG9wIDogMCksXG4gICAgICAgICAgICAgICAgKGkgKz0gZCAqIGgpLFxuICAgICAgICAgICAgICAgIChpICs9IGQgPyAoZCAtIDEpICogZS5mb290ZXJTcGFjaW5nIDogMCk7XG4gICAgICAgICAgICAgIHZhciBmID0gMCxcbiAgICAgICAgICAgICAgICBnID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIG4gPSBNYXRoLm1heChuLCBhLm1lYXN1cmVUZXh0KHQpLndpZHRoICsgZik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoYS5mb250ID0gcy5mb250U3RyaW5nKFxuICAgICAgICAgICAgICAgICAgdSxcbiAgICAgICAgICAgICAgICAgIGUuX3RpdGxlRm9udFN0eWxlLFxuICAgICAgICAgICAgICAgICAgZS5fdGl0bGVGb250RmFtaWx5XG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgcy5lYWNoKGUudGl0bGUsIGcpLFxuICAgICAgICAgICAgICAgIChhLmZvbnQgPSBzLmZvbnRTdHJpbmcoYywgZS5fYm9keUZvbnRTdHlsZSwgZS5fYm9keUZvbnRGYW1pbHkpKSxcbiAgICAgICAgICAgICAgICBzLmVhY2goZS5iZWZvcmVCb2R5LmNvbmNhdChlLmFmdGVyQm9keSksIGcpLFxuICAgICAgICAgICAgICAgIChmID0gZS5kaXNwbGF5Q29sb3JzID8gYyArIDIgOiAwKSxcbiAgICAgICAgICAgICAgICBzLmVhY2gobywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHMuZWFjaCh0LmJlZm9yZSwgZyksIHMuZWFjaCh0LmxpbmVzLCBnKSwgcy5lYWNoKHQuYWZ0ZXIsIGcpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChmID0gMCksXG4gICAgICAgICAgICAgICAgKGEuZm9udCA9IHMuZm9udFN0cmluZyhcbiAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICBlLl9mb290ZXJGb250U3R5bGUsXG4gICAgICAgICAgICAgICAgICBlLl9mb290ZXJGb250RmFtaWx5XG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgcy5lYWNoKGUuZm9vdGVyLCBnKSxcbiAgICAgICAgICAgICAgICAobiArPSAyICogZS54UGFkZGluZyksXG4gICAgICAgICAgICAgICAgeyB3aWR0aDogbiwgaGVpZ2h0OiBpIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHIodCwgZSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IHQuX21vZGVsLFxuICAgICAgICAgICAgICAgIGkgPSB0Ll9jaGFydCxcbiAgICAgICAgICAgICAgICBuID0gdC5fY2hhcnRJbnN0YW5jZS5jaGFydEFyZWEsXG4gICAgICAgICAgICAgICAgbyA9IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgciA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgIGEueSA8IGUuaGVpZ2h0XG4gICAgICAgICAgICAgICAgPyAociA9IFwidG9wXCIpXG4gICAgICAgICAgICAgICAgOiBhLnkgPiBpLmhlaWdodCAtIGUuaGVpZ2h0ICYmIChyID0gXCJib3R0b21cIik7XG4gICAgICAgICAgICAgIHZhciBsLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgaCA9IChuLmxlZnQgKyBuLnJpZ2h0KSAvIDIsXG4gICAgICAgICAgICAgICAgZiA9IChuLnRvcCArIG4uYm90dG9tKSAvIDI7XG4gICAgICAgICAgICAgIFwiY2VudGVyXCIgPT09IHJcbiAgICAgICAgICAgICAgICA/ICgobCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoID49IHQ7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPiBoO1xuICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgOiAoKGwgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA8PSBlLndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA+PSBpLndpZHRoIC0gZS53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgKGQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgKyBlLndpZHRoID4gaS53aWR0aDtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAodSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCAtIGUud2lkdGggPCAwO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChjID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmID49IHQgPyBcInRvcFwiIDogXCJib3R0b21cIjtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBsKGEueClcbiAgICAgICAgICAgICAgICAgID8gKChvID0gXCJsZWZ0XCIpLCBkKGEueCkgJiYgKChvID0gXCJjZW50ZXJcIiksIChyID0gYyhhLnkpKSkpXG4gICAgICAgICAgICAgICAgICA6IHMoYS54KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKG8gPSBcInJpZ2h0XCIpLCB1KGEueCkgJiYgKChvID0gXCJjZW50ZXJcIiksIChyID0gYyhhLnkpKSkpO1xuICAgICAgICAgICAgICB2YXIgZyA9IHQuX29wdGlvbnM7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeEFsaWduOiBnLnhBbGlnbiA/IGcueEFsaWduIDogbyxcbiAgICAgICAgICAgICAgICB5QWxpZ246IGcueUFsaWduID8gZy55QWxpZ24gOiByLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbCh0LCBlLCBhKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gdC54LFxuICAgICAgICAgICAgICAgIG4gPSB0LnksXG4gICAgICAgICAgICAgICAgbyA9IHQuY2FyZXRTaXplLFxuICAgICAgICAgICAgICAgIHIgPSB0LmNhcmV0UGFkZGluZyxcbiAgICAgICAgICAgICAgICBsID0gdC5jb3JuZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgcyA9IGEueEFsaWduLFxuICAgICAgICAgICAgICAgIGQgPSBhLnlBbGlnbixcbiAgICAgICAgICAgICAgICB1ID0gbyArIHIsXG4gICAgICAgICAgICAgICAgYyA9IGwgKyByO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIFwicmlnaHRcIiA9PT0gc1xuICAgICAgICAgICAgICAgICAgPyAoaSAtPSBlLndpZHRoKVxuICAgICAgICAgICAgICAgICAgOiBcImNlbnRlclwiID09PSBzICYmIChpIC09IGUud2lkdGggLyAyKSxcbiAgICAgICAgICAgICAgICBcInRvcFwiID09PSBkXG4gICAgICAgICAgICAgICAgICA/IChuICs9IHUpXG4gICAgICAgICAgICAgICAgICA6IChuIC09IFwiYm90dG9tXCIgPT09IGQgPyBlLmhlaWdodCArIHUgOiBlLmhlaWdodCAvIDIpLFxuICAgICAgICAgICAgICAgIFwiY2VudGVyXCIgPT09IGRcbiAgICAgICAgICAgICAgICAgID8gXCJsZWZ0XCIgPT09IHNcbiAgICAgICAgICAgICAgICAgICAgPyAoaSArPSB1KVxuICAgICAgICAgICAgICAgICAgICA6IFwicmlnaHRcIiA9PT0gcyAmJiAoaSAtPSB1KVxuICAgICAgICAgICAgICAgICAgOiBcImxlZnRcIiA9PT0gc1xuICAgICAgICAgICAgICAgICAgPyAoaSAtPSBjKVxuICAgICAgICAgICAgICAgICAgOiBcInJpZ2h0XCIgPT09IHMgJiYgKGkgKz0gYyksXG4gICAgICAgICAgICAgICAgeyB4OiBpLCB5OiBuIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzID0gdC5oZWxwZXJzO1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMuZ2xvYmFsLnRvb2x0aXBzID0ge1xuICAgICAgICAgICAgICBlbmFibGVkOiAhMCxcbiAgICAgICAgICAgICAgY3VzdG9tOiBudWxsLFxuICAgICAgICAgICAgICBtb2RlOiBcIm5lYXJlc3RcIixcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYXZlcmFnZVwiLFxuICAgICAgICAgICAgICBpbnRlcnNlY3Q6ICEwLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLDAsMCwwLjgpXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFN0eWxlOiBcImJvbGRcIixcbiAgICAgICAgICAgICAgdGl0bGVTcGFjaW5nOiAyLFxuICAgICAgICAgICAgICB0aXRsZU1hcmdpbkJvdHRvbTogNixcbiAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICB0aXRsZUFsaWduOiBcImxlZnRcIixcbiAgICAgICAgICAgICAgYm9keVNwYWNpbmc6IDIsXG4gICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICBib2R5QWxpZ246IFwibGVmdFwiLFxuICAgICAgICAgICAgICBmb290ZXJGb250U3R5bGU6IFwiYm9sZFwiLFxuICAgICAgICAgICAgICBmb290ZXJTcGFjaW5nOiAyLFxuICAgICAgICAgICAgICBmb290ZXJNYXJnaW5Ub3A6IDYsXG4gICAgICAgICAgICAgIGZvb3RlckZvbnRDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICAgIGZvb3RlckFsaWduOiBcImxlZnRcIixcbiAgICAgICAgICAgICAgeVBhZGRpbmc6IDYsXG4gICAgICAgICAgICAgIHhQYWRkaW5nOiA2LFxuICAgICAgICAgICAgICBjYXJldFNpemU6IDUsXG4gICAgICAgICAgICAgIGNvcm5lclJhZGl1czogNixcbiAgICAgICAgICAgICAgbXVsdGlLZXlCYWNrZ3JvdW5kOiBcIiNmZmZcIixcbiAgICAgICAgICAgICAgZGlzcGxheUNvbG9yczogITAsXG4gICAgICAgICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgICAgIGJlZm9yZVRpdGxlOiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLmxhYmVscyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkgPyBpLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgICBpZiAodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gdFswXTtcbiAgICAgICAgICAgICAgICAgICAgby54TGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICA/IChhID0gby54TGFiZWwpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuID4gMCAmJiBvLmluZGV4IDwgbiAmJiAoYSA9IGlbby5pbmRleF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlclRpdGxlOiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgYmVmb3JlQm9keTogcy5ub29wLFxuICAgICAgICAgICAgICAgIGJlZm9yZUxhYmVsOiBzLm5vb3AsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IGUuZGF0YXNldHNbdC5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYSArIFwiOiBcIiArIHQueUxhYmVsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxDb2xvcjogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5nZXREYXRhc2V0TWV0YSh0LmRhdGFzZXRJbmRleCksXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmRhdGFbdC5pbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG4uYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbi5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWZ0ZXJMYWJlbDogcy5ub29wLFxuICAgICAgICAgICAgICAgIGFmdGVyQm9keTogcy5ub29wLFxuICAgICAgICAgICAgICAgIGJlZm9yZUZvb3Rlcjogcy5ub29wLFxuICAgICAgICAgICAgICAgIGZvb3Rlcjogcy5ub29wLFxuICAgICAgICAgICAgICAgIGFmdGVyRm9vdGVyOiBzLm5vb3AsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuVG9vbHRpcCA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsID0gbih0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Ll9vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5jYWxsYmFja3MsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmJlZm9yZVRpdGxlLmFwcGx5KHQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBpLnRpdGxlLmFwcGx5KHQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLmFmdGVyVGl0bGUuYXBwbHkodCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IFtdO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChsID0gYShsLCBuKSksIChsID0gYShsLCBvKSksIChsID0gYShsLCByKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRCZWZvcmVCb2R5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX29wdGlvbnMuY2FsbGJhY2tzLmJlZm9yZUJvZHkuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzLmlzQXJyYXkodCkgPyB0IDogdm9pZCAwICE9PSB0ID8gW3RdIDogW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRCb2R5OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5fb3B0aW9ucy5jYWxsYmFja3MsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBbXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHMuZWFjaCh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciByID0geyBiZWZvcmU6IFtdLCBsaW5lczogW10sIGFmdGVyOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgIGEoci5iZWZvcmUsIG4uYmVmb3JlTGFiZWwuY2FsbChpLCB0LCBlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhKHIubGluZXMsIG4ubGFiZWwuY2FsbChpLCB0LCBlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhKHIuYWZ0ZXIsIG4uYWZ0ZXJMYWJlbC5jYWxsKGksIHQsIGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG9cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRBZnRlckJvZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fb3B0aW9ucy5jYWxsYmFja3MuYWZ0ZXJCb2R5LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcy5pc0FycmF5KHQpID8gdCA6IHZvaWQgMCAhPT0gdCA/IFt0XSA6IFtdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0Rm9vdGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Ll9vcHRpb25zLmNhbGxiYWNrcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUuYmVmb3JlRm9vdGVyLmFwcGx5KHQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIG4gPSBlLmZvb3Rlci5hcHBseSh0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICBvID0gZS5hZnRlckZvb3Rlci5hcHBseSh0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICByID0gW107XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKHIgPSBhKHIsIGkpKSwgKHIgPSBhKHIsIG4pKSwgKHIgPSBhKHIsIG8pKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICB1ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYyA9IHUuX29wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGggPSB1Ll9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgZiA9ICh1Ll9tb2RlbCA9IG4oYykpLFxuICAgICAgICAgICAgICAgICAgICBnID0gdS5fYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBwID0gdS5fZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IHUuX2NoYXJ0SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgIGIgPSB7IHhBbGlnbjogaC54QWxpZ24sIHlBbGlnbjogaC55QWxpZ24gfSxcbiAgICAgICAgICAgICAgICAgICAgdiA9IHsgeDogaC54LCB5OiBoLnkgfSxcbiAgICAgICAgICAgICAgICAgICAgeCA9IHsgd2lkdGg6IGgud2lkdGgsIGhlaWdodDogaC5oZWlnaHQgfSxcbiAgICAgICAgICAgICAgICAgICAgeSA9IHsgeDogaC5jYXJldFgsIHk6IGguY2FyZXRZIH07XG4gICAgICAgICAgICAgICAgICBpZiAoZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZi5vcGFjaXR5ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHQuVG9vbHRpcC5wb3NpdGlvbmVyc1tjLnBvc2l0aW9uXShnLCB1Ll9ldmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIFMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChhID0gMCwgZCA9IGcubGVuZ3RoOyBkID4gYTsgKythKSBTLnB1c2goaShnW2FdKSk7XG4gICAgICAgICAgICAgICAgICAgIGMuZmlsdGVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgKFMgPSBTLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuZmlsdGVyKHQsIHApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICBjLml0ZW1Tb3J0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoUyA9IFMuc29ydChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5pdGVtU29ydCh0LCBlLCBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICBzLmVhY2goUywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGsucHVzaChjLmNhbGxiYWNrcy5sYWJlbENvbG9yLmNhbGwodSwgdCwgbSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIChmLnRpdGxlID0gdS5nZXRUaXRsZShTLCBwKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYuYmVmb3JlQm9keSA9IHUuZ2V0QmVmb3JlQm9keShTLCBwKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYuYm9keSA9IHUuZ2V0Qm9keShTLCBwKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYuYWZ0ZXJCb2R5ID0gdS5nZXRBZnRlckJvZHkoUywgcCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChmLmZvb3RlciA9IHUuZ2V0Rm9vdGVyKFMsIHApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi54ID0gTWF0aC5yb3VuZCh5LngpKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi55ID0gTWF0aC5yb3VuZCh5LnkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZi5jYXJldFBhZGRpbmcgPSBzLmdldFZhbHVlT3JEZWZhdWx0KHkucGFkZGluZywgMikpLFxuICAgICAgICAgICAgICAgICAgICAgIChmLmxhYmVsQ29sb3JzID0gayksXG4gICAgICAgICAgICAgICAgICAgICAgKGYuZGF0YVBvaW50cyA9IFMpLFxuICAgICAgICAgICAgICAgICAgICAgICh4ID0gbyh0aGlzLCBmKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGIgPSByKHRoaXMsIHgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAodiA9IGwoZiwgeCwgYikpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGYub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAoZi54QWxpZ24gPSBiLnhBbGlnbiksXG4gICAgICAgICAgICAgICAgICAgIChmLnlBbGlnbiA9IGIueUFsaWduKSxcbiAgICAgICAgICAgICAgICAgICAgKGYueCA9IHYueCksXG4gICAgICAgICAgICAgICAgICAgIChmLnkgPSB2LnkpLFxuICAgICAgICAgICAgICAgICAgICAoZi53aWR0aCA9IHgud2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAoZi5oZWlnaHQgPSB4LmhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgIChmLmNhcmV0WCA9IHkueCksXG4gICAgICAgICAgICAgICAgICAgIChmLmNhcmV0WSA9IHkueSksXG4gICAgICAgICAgICAgICAgICAgICh1Ll9tb2RlbCA9IGYpLFxuICAgICAgICAgICAgICAgICAgICBlICYmIGMuY3VzdG9tICYmIGMuY3VzdG9tLmNhbGwodSwgZiksXG4gICAgICAgICAgICAgICAgICAgIHVcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3Q2FyZXQ6IGZ1bmN0aW9uICh0LCBhLCBpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgdSA9IHRoaXMuX3ZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLl9jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGggPSB1LmNhcmV0U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IHUuY29ybmVyUmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICBnID0gdS54QWxpZ24sXG4gICAgICAgICAgICAgICAgICAgIHAgPSB1LnlBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgbSA9IHQueCxcbiAgICAgICAgICAgICAgICAgICAgYiA9IHQueSxcbiAgICAgICAgICAgICAgICAgICAgdiA9IGEud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHggPSBhLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgIFwiY2VudGVyXCIgPT09IHBcbiAgICAgICAgICAgICAgICAgICAgPyAoXCJsZWZ0XCIgPT09IGdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChuID0gbSksIChvID0gbiAtIGgpLCAociA9IG4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKG4gPSBtICsgdiksIChvID0gbiArIGgpLCAociA9IG4pKSxcbiAgICAgICAgICAgICAgICAgICAgICAocyA9IGIgKyB4IC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgKGwgPSBzIC0gaCksXG4gICAgICAgICAgICAgICAgICAgICAgKGQgPSBzICsgaCkpXG4gICAgICAgICAgICAgICAgICAgIDogKFwibGVmdFwiID09PSBnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgobiA9IG0gKyBmKSwgKG8gPSBuICsgaCksIChyID0gbyArIGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcInJpZ2h0XCIgPT09IGdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChuID0gbSArIHYgLSBmKSwgKG8gPSBuIC0gaCksIChyID0gbyAtIGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKG8gPSBtICsgdiAvIDIpLCAobiA9IG8gLSBoKSwgKHIgPSBvICsgaCkpLFxuICAgICAgICAgICAgICAgICAgICAgIFwidG9wXCIgPT09IHBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChsID0gYiksIChzID0gbCAtIGgpLCAoZCA9IGwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGwgPSBiICsgeCksIChzID0gbCArIGgpLCAoZCA9IGwpKSksXG4gICAgICAgICAgICAgICAgICAgIChjLmZpbGxTdHlsZSA9IGUodS5iYWNrZ3JvdW5kQ29sb3IsIGkpKSxcbiAgICAgICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8obiwgbCksXG4gICAgICAgICAgICAgICAgICAgIGMubGluZVRvKG8sIHMpLFxuICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhyLCBkKSxcbiAgICAgICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgYy5maWxsKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3VGl0bGU6IGZ1bmN0aW9uICh0LCBhLCBpLCBuKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbyA9IGEudGl0bGU7XG4gICAgICAgICAgICAgICAgICBpZiAoby5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgKGkudGV4dEFsaWduID0gYS5fdGl0bGVBbGlnbiksIChpLnRleHRCYXNlbGluZSA9IFwidG9wXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGEudGl0bGVGb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICBsID0gYS50aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgIChpLmZpbGxTdHlsZSA9IGUoYS50aXRsZUZvbnRDb2xvciwgbikpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLmZvbnQgPSBzLmZvbnRTdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5fdGl0bGVGb250U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhLl90aXRsZUZvbnRGYW1pbHlcbiAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQsIHU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoZCA9IDAsIHUgPSBvLmxlbmd0aDsgdSA+IGQ7ICsrZClcbiAgICAgICAgICAgICAgICAgICAgICBpLmZpbGxUZXh0KG9bZF0sIHQueCwgdC55KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LnkgKz0gciArIGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCArIDEgPT09IG8ubGVuZ3RoICYmICh0LnkgKz0gYS50aXRsZU1hcmdpbkJvdHRvbSAtIGwpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhd0JvZHk6IGZ1bmN0aW9uICh0LCBhLCBpLCBuKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbyA9IGEuYm9keUZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICByID0gYS5ib2R5U3BhY2luZyxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGEuYm9keTtcbiAgICAgICAgICAgICAgICAgIChpLnRleHRBbGlnbiA9IGEuX2JvZHlBbGlnbiksIChpLnRleHRCYXNlbGluZSA9IFwidG9wXCIpO1xuICAgICAgICAgICAgICAgICAgdmFyIGQgPSBlKGEuYm9keUZvbnRDb2xvciwgbik7XG4gICAgICAgICAgICAgICAgICAoaS5maWxsU3R5bGUgPSBkKSxcbiAgICAgICAgICAgICAgICAgICAgKGkuZm9udCA9IHMuZm9udFN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgIGEuX2JvZHlGb250U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgYS5fYm9keUZvbnRGYW1pbHlcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGkuZmlsbFRleHQoZSwgdC54ICsgdSwgdC55KSwgKHQueSArPSBvICsgcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBzLmVhY2goYS5iZWZvcmVCb2R5LCBjKTtcbiAgICAgICAgICAgICAgICAgIHZhciBoID0gYS5kaXNwbGF5Q29sb3JzO1xuICAgICAgICAgICAgICAgICAgKHUgPSBoID8gbyArIDIgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgcy5lYWNoKGwsIGZ1bmN0aW9uIChyLCBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcy5lYWNoKHIuYmVmb3JlLCBjKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZWFjaChyLmxpbmVzLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChpLmZpbGxTdHlsZSA9IGUoYS5sZWdlbmRDb2xvckJhY2tncm91bmQsIG4pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmZpbGxSZWN0KHQueCwgdC55LCBvLCBvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5zdHJva2VTdHlsZSA9IGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmxhYmVsQ29sb3JzW2xdLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3Ryb2tlUmVjdCh0LngsIHQueSwgbywgbyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuZmlsbFN0eWxlID0gZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubGFiZWxDb2xvcnNbbF0uYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZmlsbFJlY3QodC54ICsgMSwgdC55ICsgMSwgbyAtIDIsIG8gLSAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5maWxsU3R5bGUgPSBkKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5lYWNoKHIuYWZ0ZXIsIGMpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKHUgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgcy5lYWNoKGEuYWZ0ZXJCb2R5LCBjKSxcbiAgICAgICAgICAgICAgICAgICAgKHQueSAtPSByKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXdGb290ZXI6IGZ1bmN0aW9uICh0LCBhLCBpLCBuKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbyA9IGEuZm9vdGVyO1xuICAgICAgICAgICAgICAgICAgby5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgKCh0LnkgKz0gYS5mb290ZXJNYXJnaW5Ub3ApLFxuICAgICAgICAgICAgICAgICAgICAoaS50ZXh0QWxpZ24gPSBhLl9mb290ZXJBbGlnbiksXG4gICAgICAgICAgICAgICAgICAgIChpLnRleHRCYXNlbGluZSA9IFwidG9wXCIpLFxuICAgICAgICAgICAgICAgICAgICAoaS5maWxsU3R5bGUgPSBlKGEuZm9vdGVyRm9udENvbG9yLCBuKSksXG4gICAgICAgICAgICAgICAgICAgIChpLmZvbnQgPSBzLmZvbnRTdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICAgYS5mb290ZXJGb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICBhLl9mb290ZXJGb250U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgYS5fZm9vdGVyRm9udEZhbWlseVxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgcy5lYWNoKG8sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaS5maWxsVGV4dChlLCB0LngsIHQueSksXG4gICAgICAgICAgICAgICAgICAgICAgICAodC55ICs9IGEuZm9vdGVyRm9udFNpemUgKyBhLmZvb3RlclNwYWNpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3QmFja2dyb3VuZDogZnVuY3Rpb24gKHQsIGEsIGksIG4sIG8pIHtcbiAgICAgICAgICAgICAgICAgIChpLmZpbGxTdHlsZSA9IGUoYS5iYWNrZ3JvdW5kQ29sb3IsIG8pKSxcbiAgICAgICAgICAgICAgICAgICAgcy5kcmF3Um91bmRlZFJlY3RhbmdsZShcbiAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgIHQueCxcbiAgICAgICAgICAgICAgICAgICAgICB0LnksXG4gICAgICAgICAgICAgICAgICAgICAgbi53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICBuLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICBhLmNvcm5lclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBpLmZpbGwoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fY2hhcnQuY3R4LFxuICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIGlmICgwICE9PSBlLm9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB7IHdpZHRoOiBlLndpZHRoLCBoZWlnaHQ6IGUuaGVpZ2h0IH0sXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IHsgeDogZS54LCB5OiBlLnkgfSxcbiAgICAgICAgICAgICAgICAgICAgICBuID0gTWF0aC5hYnMoZS5vcGFjaXR5IDwgMC4wMDEpID8gMCA6IGUub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5lbmFibGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZHJhd0JhY2tncm91bmQoaSwgZSwgdCwgYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQoaSwgYSwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgKGkueCArPSBlLnhQYWRkaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaS55ICs9IGUueVBhZGRpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1RpdGxlKGksIGUsIHQsIG4pLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JvZHkoaSwgZSwgdCwgbiksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Rm9vdGVyKGksIGUsIHQsIG4pKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5fb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgaSA9ICExO1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoKGUuX2xhc3RBY3RpdmUgPSBlLl9sYXN0QWN0aXZlIHx8IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgXCJtb3VzZW91dFwiID09PSB0LnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICA/IChlLl9hY3RpdmUgPSBbXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IChlLl9hY3RpdmUgPSBlLl9jaGFydEluc3RhbmNlLmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEubW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChpID0gIXMuYXJyYXlFcXVhbHMoZS5fYWN0aXZlLCBlLl9sYXN0QWN0aXZlKSksXG4gICAgICAgICAgICAgICAgICAgIChlLl9sYXN0QWN0aXZlID0gZS5fYWN0aXZlKSxcbiAgICAgICAgICAgICAgICAgICAgYS5lbmFibGVkIHx8IGEuY3VzdG9tKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuX2V2ZW50UG9zaXRpb24gPSBzLmdldFJlbGF0aXZlUG9zaXRpb24odCwgZS5fY2hhcnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUuX21vZGVsO1xuICAgICAgICAgICAgICAgICAgICBlLnVwZGF0ZSghMCksXG4gICAgICAgICAgICAgICAgICAgICAgZS5waXZvdCgpLFxuICAgICAgICAgICAgICAgICAgICAgIChpIHw9IG4ueCAhPT0gZS5fbW9kZWwueCB8fCBuLnkgIT09IGUuX21vZGVsLnkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAodC5Ub29sdGlwLnBvc2l0aW9uZXJzID0ge1xuICAgICAgICAgICAgICAgIGF2ZXJhZ2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIXQubGVuZ3RoKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG4gPSAwLFxuICAgICAgICAgICAgICAgICAgICBvID0gMDtcbiAgICAgICAgICAgICAgICAgIGZvciAoZSA9IDAsIGEgPSB0Lmxlbmd0aDsgYSA+IGU7ICsrZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRbZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChyICYmIHIuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gci50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAoaSArPSBsLngpLCAobiArPSBsLnkpLCArK287XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IE1hdGgucm91bmQoaSAvIG8pLCB5OiBNYXRoLnJvdW5kKG4gLyBvKSB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmVhcmVzdDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvID0gZS54LFxuICAgICAgICAgICAgICAgICAgICByID0gZS55LFxuICAgICAgICAgICAgICAgICAgICBsID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbiA9IHQubGVuZ3RoOyBuID4gaTsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgJiYgZC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBkLmdldENlbnRlclBvaW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gcy5kaXN0YW5jZUJldHdlZW5Qb2ludHMoZSwgdSk7XG4gICAgICAgICAgICAgICAgICAgICAgbCA+IGMgJiYgKChsID0gYyksIChhID0gZCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGEudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIChvID0gaC54KSwgKHIgPSBoLnkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogbywgeTogciB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDM3OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBhID0gdC5kZWZhdWx0cy5nbG9iYWw7XG4gICAgICAgICAgICAoYS5lbGVtZW50cy5hcmMgPSB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYS5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiNmZmZcIixcbiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKHQuZWxlbWVudHMuQXJjID0gdC5FbGVtZW50LmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgaW5MYWJlbFJhbmdlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGVcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLnBvdyh0IC0gZS54LCAyKSA8XG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhlLnJhZGl1cyArIGUuaG92ZXJSYWRpdXMsIDIpXG4gICAgICAgICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpblJhbmdlOiBmdW5jdGlvbiAodCwgYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUuZ2V0QW5nbGVGcm9tUG9pbnQoaSwgeyB4OiB0LCB5OiBhIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG4uYW5nbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gbi5kaXN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBpLnN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gaS5lbmRBbmdsZTtcbiAgICAgICAgICAgICAgICAgICAgICBsID4gcztcblxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgcyArPSAyICogTWF0aC5QSTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IG8gPiBzOyApIG8gLT0gMiAqIE1hdGguUEk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBsID4gbzsgKSBvICs9IDIgKiBNYXRoLlBJO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IG8gPj0gbCAmJiBzID49IG8sXG4gICAgICAgICAgICAgICAgICAgICAgdSA9IHIgPj0gaS5pbm5lclJhZGl1cyAmJiByIDw9IGkub3V0ZXJSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkICYmIHU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl92aWV3LFxuICAgICAgICAgICAgICAgICAgICBlID0gKHQuc3RhcnRBbmdsZSArIHQuZW5kQW5nbGUpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgYSA9ICh0LmlubmVyUmFkaXVzICsgdC5vdXRlclJhZGl1cykgLyAyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogdC54ICsgTWF0aC5jb3MoZSkgKiBhLCB5OiB0LnkgKyBNYXRoLnNpbihlKSAqIGEgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIE1hdGguUEkgKlxuICAgICAgICAgICAgICAgICAgICAoKHQuZW5kQW5nbGUgLSB0LnN0YXJ0QW5nbGUpIC8gKDIgKiBNYXRoLlBJKSkgKlxuICAgICAgICAgICAgICAgICAgICAoTWF0aC5wb3codC5vdXRlclJhZGl1cywgMikgLSBNYXRoLnBvdyh0LmlubmVyUmFkaXVzLCAyKSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fdmlldyxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQuc3RhcnRBbmdsZSArICh0LmVuZEFuZ2xlIC0gdC5zdGFydEFuZ2xlKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgIGEgPSAodC5vdXRlclJhZGl1cyAtIHQuaW5uZXJSYWRpdXMpIC8gMiArIHQuaW5uZXJSYWRpdXM7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB0LnggKyBNYXRoLmNvcyhlKSAqIGEsIHk6IHQueSArIE1hdGguc2luKGUpICogYSB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl92aWV3LFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5zdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5lbmRBbmdsZTtcbiAgICAgICAgICAgICAgICAgIHQuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgIHQuYXJjKGUueCwgZS55LCBlLm91dGVyUmFkaXVzLCBhLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgdC5hcmMoZS54LCBlLnksIGUuaW5uZXJSYWRpdXMsIGksIGEsICEwKSxcbiAgICAgICAgICAgICAgICAgICAgdC5jbG9zZVBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuc3Ryb2tlU3R5bGUgPSBlLmJvcmRlckNvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgKHQubGluZVdpZHRoID0gZS5ib3JkZXJXaWR0aCksXG4gICAgICAgICAgICAgICAgICAgICh0LmZpbGxTdHlsZSA9IGUuYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgdC5maWxsKCksXG4gICAgICAgICAgICAgICAgICAgICh0LmxpbmVKb2luID0gXCJiZXZlbFwiKSxcbiAgICAgICAgICAgICAgICAgICAgZS5ib3JkZXJXaWR0aCAmJiB0LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAzODogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgYSA9IHQuZGVmYXVsdHMuZ2xvYmFsO1xuICAgICAgICAgICAgKHQuZGVmYXVsdHMuZ2xvYmFsLmVsZW1lbnRzLmxpbmUgPSB7XG4gICAgICAgICAgICAgIHRlbnNpb246IDAuNCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBhLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDMsXG4gICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBhLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgYm9yZGVyQ2FwU3R5bGU6IFwiYnV0dFwiLFxuICAgICAgICAgICAgICBib3JkZXJEYXNoOiBbXSxcbiAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgICAgICAgICAgICAgYm9yZGVySm9pblN0eWxlOiBcIm1pdGVyXCIsXG4gICAgICAgICAgICAgIGNhcEJlemllclBvaW50czogITAsXG4gICAgICAgICAgICAgIGZpbGw6ICEwLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICh0LmVsZW1lbnRzLkxpbmUgPSB0LkVsZW1lbnQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLl92aWV3O1xuICAgICAgICAgICAgICAgICAgICBlLl92aWV3LnN0ZXBwZWRMaW5lID09PSAhMFxuICAgICAgICAgICAgICAgICAgICAgID8gKHMubGluZVRvKGEueCwgdC5fdmlldy55KSwgcy5saW5lVG8oYS54LCBhLnkpKVxuICAgICAgICAgICAgICAgICAgICAgIDogMCA9PT0gZS5fdmlldy50ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgPyBzLmxpbmVUbyhhLngsIGEueSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHMuYmV6aWVyQ3VydmVUbyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5fdmlldy5jb250cm9sUG9pbnROZXh0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5fdmlldy5jb250cm9sUG9pbnROZXh0WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5jb250cm9sUG9pbnRQcmV2aW91c1gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuY29udHJvbFBvaW50UHJldmlvdXNZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEueVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuX3ZpZXcsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBuLnNwYW5HYXBzLFxuICAgICAgICAgICAgICAgICAgICByID0gbi5zY2FsZVplcm8sXG4gICAgICAgICAgICAgICAgICAgIGwgPSBpLl9sb29wO1xuICAgICAgICAgICAgICAgICAgbCB8fFxuICAgICAgICAgICAgICAgICAgICAoXCJ0b3BcIiA9PT0gbi5maWxsXG4gICAgICAgICAgICAgICAgICAgICAgPyAociA9IG4uc2NhbGVUb3ApXG4gICAgICAgICAgICAgICAgICAgICAgOiBcImJvdHRvbVwiID09PSBuLmZpbGwgJiYgKHIgPSBuLnNjYWxlQm90dG9tKSk7XG4gICAgICAgICAgICAgICAgICB2YXIgcyA9IGkuX2NoYXJ0LmN0eDtcbiAgICAgICAgICAgICAgICAgIHMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgdmFyIGQgPSBpLl9jaGlsZHJlbi5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICB1ID0gLTE7XG4gICAgICAgICAgICAgICAgICBsICYmIGQubGVuZ3RoICYmIGQucHVzaChkWzBdKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjLCBoLCBmLCBnO1xuICAgICAgICAgICAgICAgICAgaWYgKGQubGVuZ3RoICYmIG4uZmlsbCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHMuYmVnaW5QYXRoKCksIGMgPSAwOyBjIDwgZC5sZW5ndGg7ICsrYylcbiAgICAgICAgICAgICAgICAgICAgICAoaCA9IGRbY10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSBlLnByZXZpb3VzSXRlbShkLCBjKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZyA9IGguX3ZpZXcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCA9PT0gY1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IChsID8gcy5tb3ZlVG8oci54LCByLnkpIDogcy5tb3ZlVG8oZy54LCByKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnLnNraXAgfHwgKCh1ID0gYyksIHMubGluZVRvKGcueCwgZy55KSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogKChmID0gLTEgPT09IHUgPyBmIDogZFt1XSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZy5za2lwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSAhPT0gYyAtIDEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMubGluZVRvKHIueCwgci55KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcy5saW5lVG8oZi5fdmlldy54LCByKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHUgIT09IGMgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvICYmIC0xICE9PSB1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQoZiwgaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzLmxpbmVUbyhnLngsIGcueSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHMubGluZVRvKGcueCwgciksIHMubGluZVRvKGcueCwgZy55KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHQoZiwgaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1ID0gYykpKTtcbiAgICAgICAgICAgICAgICAgICAgbCB8fCAtMSA9PT0gdSB8fCBzLmxpbmVUbyhkW3VdLl92aWV3LngsIHIpLFxuICAgICAgICAgICAgICAgICAgICAgIChzLmZpbGxTdHlsZSA9IG4uYmFja2dyb3VuZENvbG9yIHx8IGEuZGVmYXVsdENvbG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICBzLmNsb3NlUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHMuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHAgPSBhLmVsZW1lbnRzLmxpbmU7XG4gICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICBzLmxpbmVDYXAgPSBuLmJvcmRlckNhcFN0eWxlIHx8IHAuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgcy5zZXRMaW5lRGFzaCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcy5zZXRMaW5lRGFzaChuLmJvcmRlckRhc2ggfHwgcC5ib3JkZXJEYXNoKSxcbiAgICAgICAgICAgICAgICAgICAgICBzLmxpbmVEYXNoT2Zmc2V0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG4uYm9yZGVyRGFzaE9mZnNldCB8fCBwLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgcy5saW5lSm9pbiA9IG4uYm9yZGVySm9pblN0eWxlIHx8IHAuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgIHMubGluZVdpZHRoID0gbi5ib3JkZXJXaWR0aCB8fCBwLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgIHMuc3Ryb2tlU3R5bGUgPSBuLmJvcmRlckNvbG9yIHx8IGEuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgIHMuYmVnaW5QYXRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgdSA9IC0xLFxuICAgICAgICAgICAgICAgICAgICAgIGMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBjIDwgZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICsrY1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAoaCA9IGRbY10pLFxuICAgICAgICAgICAgICAgICAgICAgIChmID0gZS5wcmV2aW91c0l0ZW0oZCwgYykpLFxuICAgICAgICAgICAgICAgICAgICAgIChnID0gaC5fdmlldyksXG4gICAgICAgICAgICAgICAgICAgICAgMCA9PT0gY1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBnLnNraXAgfHwgKHMubW92ZVRvKGcueCwgZy55KSwgKHUgPSBjKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKChmID0gLTEgPT09IHUgPyBmIDogZFt1XSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGcuc2tpcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodSAhPT0gYyAtIDEgJiYgIW8pIHx8IC0xID09PSB1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHMubW92ZVRvKGcueCwgZy55KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0KGYsIGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1ID0gYykpKTtcbiAgICAgICAgICAgICAgICAgIHMuc3Ryb2tlKCksIHMucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICAzOTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICByZXR1cm4gZVxuICAgICAgICAgICAgICAgID8gTWF0aC5wb3codCAtIGUueCwgMikgPCBNYXRoLnBvdyhlLnJhZGl1cyArIGUuaGl0UmFkaXVzLCAyKVxuICAgICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICByZXR1cm4gZVxuICAgICAgICAgICAgICAgID8gTWF0aC5wb3codCAtIGUueSwgMikgPCBNYXRoLnBvdyhlLnJhZGl1cyArIGUuaGl0UmFkaXVzLCAyKVxuICAgICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgbiA9IHQuZGVmYXVsdHMuZ2xvYmFsLFxuICAgICAgICAgICAgICBvID0gbi5kZWZhdWx0Q29sb3I7XG4gICAgICAgICAgICAobi5lbGVtZW50cy5wb2ludCA9IHtcbiAgICAgICAgICAgICAgcmFkaXVzOiAzLFxuICAgICAgICAgICAgICBwb2ludFN0eWxlOiBcImNpcmNsZVwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG8sXG4gICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICAgICAgICBib3JkZXJDb2xvcjogbyxcbiAgICAgICAgICAgICAgaGl0UmFkaXVzOiAxLFxuICAgICAgICAgICAgICBob3ZlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgaG92ZXJCb3JkZXJXaWR0aDogMSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5lbGVtZW50cy5Qb2ludCA9IHQuRWxlbWVudC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGluUmFuZ2U6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYVxuICAgICAgICAgICAgICAgICAgICA/IE1hdGgucG93KHQgLSBhLngsIDIpICsgTWF0aC5wb3coZSAtIGEueSwgMikgPFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coYS5oaXRSYWRpdXMgKyBhLnJhZGl1cywgMilcbiAgICAgICAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluTGFiZWxSYW5nZTogZSxcbiAgICAgICAgICAgICAgICBpblhSYW5nZTogZSxcbiAgICAgICAgICAgICAgICBpbllSYW5nZTogYSxcbiAgICAgICAgICAgICAgICBnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogdC54LCB5OiB0LnkgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLlBJICogTWF0aC5wb3codGhpcy5fdmlldy5yYWRpdXMsIDIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB0LngsIHk6IHQueSwgcGFkZGluZzogdC5yYWRpdXMgKyB0LmJvcmRlcldpZHRoIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3ZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLl9jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGUueCxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGUueTtcbiAgICAgICAgICAgICAgICAgIGUuc2tpcCB8fFxuICAgICAgICAgICAgICAgICAgICAoKGEuc3Ryb2tlU3R5bGUgPSBlLmJvcmRlckNvbG9yIHx8IG8pLFxuICAgICAgICAgICAgICAgICAgICAoYS5saW5lV2lkdGggPSBpLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgIGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgbi5lbGVtZW50cy5wb2ludC5ib3JkZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKGEuZmlsbFN0eWxlID0gZS5iYWNrZ3JvdW5kQ29sb3IgfHwgbyksXG4gICAgICAgICAgICAgICAgICAgIHQuY2FudmFzSGVscGVycy5kcmF3UG9pbnQoYSwgciwgbCwgcywgZCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA0MDogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdC5fdmlldy53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGEodCkge1xuICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICByID0gdC5fdmlldztcbiAgICAgICAgICAgICAgaWYgKGUodCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IHIud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIChhID0gci54IC0gbCksXG4gICAgICAgICAgICAgICAgICAoaSA9IHIueCArIGwpLFxuICAgICAgICAgICAgICAgICAgKG4gPSBNYXRoLm1pbihyLnksIHIuYmFzZSkpLFxuICAgICAgICAgICAgICAgICAgKG8gPSBNYXRoLm1heChyLnksIHIuYmFzZSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzID0gci5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgIChhID0gTWF0aC5taW4oci54LCByLmJhc2UpKSxcbiAgICAgICAgICAgICAgICAgIChpID0gTWF0aC5tYXgoci54LCByLmJhc2UpKSxcbiAgICAgICAgICAgICAgICAgIChuID0gci55IC0gcyksXG4gICAgICAgICAgICAgICAgICAobyA9IHIueSArIHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB7IGxlZnQ6IGEsIHRvcDogbiwgcmlnaHQ6IGksIGJvdHRvbTogbyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSB0LmRlZmF1bHRzLmdsb2JhbDtcbiAgICAgICAgICAgIChpLmVsZW1lbnRzLnJlY3RhbmdsZSA9IHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBpLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgYm9yZGVyU2tpcHBlZDogXCJib3R0b21cIixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAodC5lbGVtZW50cy5SZWN0YW5nbGUgPSB0LkVsZW1lbnQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNbKHUgKyB0KSAlIDRdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9jaGFydC5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLl92aWV3LFxuICAgICAgICAgICAgICAgICAgICBpID0gYS53aWR0aCAvIDIsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLnggLSBpLFxuICAgICAgICAgICAgICAgICAgICBvID0gYS54ICsgaSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGEuYmFzZSAtIChhLmJhc2UgLSBhLnkpLFxuICAgICAgICAgICAgICAgICAgICBsID0gYS5ib3JkZXJXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICBhLmJvcmRlcldpZHRoICYmICgobiArPSBsKSwgKG8gLT0gbCksIChyICs9IGwpKSxcbiAgICAgICAgICAgICAgICAgICAgZS5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgKGUuZmlsbFN0eWxlID0gYS5iYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAoZS5zdHJva2VTdHlsZSA9IGEuYm9yZGVyQ29sb3IpLFxuICAgICAgICAgICAgICAgICAgICAoZS5saW5lV2lkdGggPSBhLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgIHZhciBzID0gW1xuICAgICAgICAgICAgICAgICAgICAgIFtuLCBhLmJhc2VdLFxuICAgICAgICAgICAgICAgICAgICAgIFtuLCByXSxcbiAgICAgICAgICAgICAgICAgICAgICBbbywgcl0sXG4gICAgICAgICAgICAgICAgICAgICAgW28sIGEuYmFzZV0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGQgPSBbXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwidG9wXCIsIFwicmlnaHRcIl0sXG4gICAgICAgICAgICAgICAgICAgIHUgPSBkLmluZGV4T2YoYS5ib3JkZXJTa2lwcGVkLCAwKTtcbiAgICAgICAgICAgICAgICAgIC0xID09PSB1ICYmICh1ID0gMCk7XG4gICAgICAgICAgICAgICAgICB2YXIgYyA9IHQoMCk7XG4gICAgICAgICAgICAgICAgICBlLm1vdmVUbyhjWzBdLCBjWzFdKTtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSAxOyA0ID4gaDsgaCsrKSAoYyA9IHQoaCkpLCBlLmxpbmVUbyhjWzBdLCBjWzFdKTtcbiAgICAgICAgICAgICAgICAgIGUuZmlsbCgpLCBhLmJvcmRlcldpZHRoICYmIGUuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LmJhc2UgLSB0Lnk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpblJhbmdlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSAhMTtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl92aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gYSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaSA9XG4gICAgICAgICAgICAgICAgICAgICAgdCA+PSBuLmxlZnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0IDw9IG4ucmlnaHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICBlID49IG4udG9wICYmXG4gICAgICAgICAgICAgICAgICAgICAgZSA8PSBuLmJvdHRvbTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5MYWJlbFJhbmdlOiBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgaWYgKCFuLl92aWV3KSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICB2YXIgbyA9ICExLFxuICAgICAgICAgICAgICAgICAgICByID0gYShuKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAobyA9IGUobilcbiAgICAgICAgICAgICAgICAgICAgPyB0ID49IHIubGVmdCAmJiB0IDw9IHIucmlnaHRcbiAgICAgICAgICAgICAgICAgICAgOiBpID49IHIudG9wICYmIGkgPD0gci5ib3R0b20pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5YUmFuZ2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IGEodGhpcyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCA+PSBlLmxlZnQgJiYgdCA8PSBlLnJpZ2h0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5ZUmFuZ2U6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IGEodGhpcyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCA+PSBlLnRvcCAmJiB0IDw9IGUuYm90dG9tO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5fdmlldztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICA/ICgodCA9IGkueCksIChhID0gKGkueSArIGkuYmFzZSkgLyAyKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICgodCA9IChpLnggKyBpLmJhc2UpIC8gMiksIChhID0gaS55KSksXG4gICAgICAgICAgICAgICAgICAgIHsgeDogdCwgeTogYSB9XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QXJlYTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl92aWV3O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQud2lkdGggKiBNYXRoLmFicyh0LnkgLSB0LmJhc2UpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB4OiB0LngsIHk6IHQueSB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA0MTogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgYSA9IHsgcG9zaXRpb246IFwiYm90dG9tXCIgfSxcbiAgICAgICAgICAgICAgaSA9IHQuU2NhbGUuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBnZXRMYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5jaGFydC5kYXRhO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0LnhMYWJlbHMgOiB0LnlMYWJlbHMpIHx8IHQubGFiZWxzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhID0gdC5nZXRMYWJlbHMoKTtcbiAgICAgICAgICAgICAgICAgICh0Lm1pbkluZGV4ID0gMCksICh0Lm1heEluZGV4ID0gYS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSB0Lm9wdGlvbnMudGlja3MubWluICYmXG4gICAgICAgICAgICAgICAgICAgICgoaSA9IGUuaW5kZXhPZihhLCB0Lm9wdGlvbnMudGlja3MubWluKSksXG4gICAgICAgICAgICAgICAgICAgICh0Lm1pbkluZGV4ID0gLTEgIT09IGkgPyBpIDogdC5taW5JbmRleCkpLFxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHQub3B0aW9ucy50aWNrcy5tYXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAoKGkgPSBlLmluZGV4T2YoYSwgdC5vcHRpb25zLnRpY2tzLm1heCkpLFxuICAgICAgICAgICAgICAgICAgICAgICh0Lm1heEluZGV4ID0gLTEgIT09IGkgPyBpIDogdC5tYXhJbmRleCkpLFxuICAgICAgICAgICAgICAgICAgICAodC5taW4gPSBhW3QubWluSW5kZXhdKSxcbiAgICAgICAgICAgICAgICAgICAgKHQubWF4ID0gYVt0Lm1heEluZGV4XSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidWlsZFRpY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0LmdldExhYmVscygpO1xuICAgICAgICAgICAgICAgICAgdC50aWNrcyA9XG4gICAgICAgICAgICAgICAgICAgIDAgPT09IHQubWluSW5kZXggJiYgdC5tYXhJbmRleCA9PT0gZS5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICAgPyBlXG4gICAgICAgICAgICAgICAgICAgICAgOiBlLnNsaWNlKHQubWluSW5kZXgsIHQubWF4SW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmNoYXJ0LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBhLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChpLnhMYWJlbHMgJiYgbikgfHwgKGkueUxhYmVscyAmJiAhbilcbiAgICAgICAgICAgICAgICAgICAgPyBhLmdldFJpZ2h0VmFsdWUoaS5kYXRhc2V0c1tlXS5kYXRhW3RdKVxuICAgICAgICAgICAgICAgICAgICA6IGEudGlja3NbdF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbiAodCwgZSwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBvID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgbi5tYXhJbmRleCArXG4gICAgICAgICAgICAgICAgICAgICAgICAxIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubWluSW5kZXggLVxuICAgICAgICAgICAgICAgICAgICAgICAgKG4ub3B0aW9ucy5ncmlkTGluZXMub2Zmc2V0R3JpZExpbmVzID8gMCA6IDEpLFxuICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHQgJiYgaXNOYU4oZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBuLmdldExhYmVscygpLFxuICAgICAgICAgICAgICAgICAgICAgIGwgPSByLmluZGV4T2YodCk7XG4gICAgICAgICAgICAgICAgICAgIGUgPSAtMSAhPT0gbCA/IGwgOiBlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKG4uaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBuLndpZHRoIC0gKG4ucGFkZGluZ0xlZnQgKyBuLnBhZGRpbmdSaWdodCksXG4gICAgICAgICAgICAgICAgICAgICAgZCA9IHMgLyBvLFxuICAgICAgICAgICAgICAgICAgICAgIHUgPSBkICogKGUgLSBuLm1pbkluZGV4KSArIG4ucGFkZGluZ0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgKChuLm9wdGlvbnMuZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcyAmJiBpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKG4ubWF4SW5kZXggPT09IG4ubWluSW5kZXggJiYgaSkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodSArPSBkIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgbi5sZWZ0ICsgTWF0aC5yb3VuZCh1KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGMgPSBuLmhlaWdodCAtIChuLnBhZGRpbmdUb3AgKyBuLnBhZGRpbmdCb3R0b20pLFxuICAgICAgICAgICAgICAgICAgICBoID0gYyAvIG8sXG4gICAgICAgICAgICAgICAgICAgIGYgPSBoICogKGUgLSBuLm1pbkluZGV4KSArIG4ucGFkZGluZ1RvcDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG4ub3B0aW9ucy5ncmlkTGluZXMub2Zmc2V0R3JpZExpbmVzICYmIGkgJiYgKGYgKz0gaCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICBuLnRvcCArIE1hdGgucm91bmQoZilcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclRpY2s6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpY2tzW3RdLFxuICAgICAgICAgICAgICAgICAgICB0ICsgdGhpcy5taW5JbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICBhLnRpY2tzLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5vcHRpb25zLmdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMgPyAwIDogMSksXG4gICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IG5cbiAgICAgICAgICAgICAgICAgICAgICA/IGEud2lkdGggLSAoYS5wYWRkaW5nTGVmdCArIGEucGFkZGluZ1JpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgIDogYS5oZWlnaHQgLSAoYS5wYWRkaW5nVG9wICsgYS5wYWRkaW5nQm90dG9tKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG8gLyBpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHQgLT0gbiA/IGEubGVmdCA6IGEudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgYS5vcHRpb25zLmdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMgJiYgKHQgLT0gciAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAodCAtPSBuID8gYS5wYWRkaW5nTGVmdCA6IGEucGFkZGluZ1RvcCksXG4gICAgICAgICAgICAgICAgICAgIChlID0gMCA+PSB0ID8gMCA6IE1hdGgucm91bmQodCAvIHIpKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldEJhc2VQaXhlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm90dG9tO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdC5zY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoXCJjYXRlZ29yeVwiLCBpLCBhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA0MjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgYSA9IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgICAgdGlja3M6IHsgY2FsbGJhY2s6IHQuVGlja3MuZm9ybWF0dGVycy5saW5lYXIgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaSA9IHQuTGluZWFyU2NhbGVCYXNlLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdCh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsID8gdC54QXhpc0lEID09PSBhLmlkIDogdC55QXhpc0lEID09PSBhLmlkO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBuID0gYS5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IG4uZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG8uZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBhLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICAgICAgICAgICAgaWYgKCgoYS5taW4gPSBudWxsKSwgKGEubWF4ID0gbnVsbCksIGkuc3RhY2tlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKHIsIGZ1bmN0aW9uIChvLCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBuLmdldERhdGFzZXRNZXRhKHIpO1xuICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gc1tsLnR5cGVdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoc1tsLnR5cGVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGl2ZVZhbHVlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aXZlVmFsdWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gc1tsLnR5cGVdLnBvc2l0aXZlVmFsdWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHNbbC50eXBlXS5uZWdhdGl2ZVZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICBuLmlzRGF0YXNldFZpc2libGUocikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQobCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChvLmRhdGEsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gK2EuZ2V0UmlnaHRWYWx1ZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4obikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLmRhdGFbZV0uaGlkZGVuIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChkW2VdID0gZFtlXSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodVtlXSA9IHVbZV0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5yZWxhdGl2ZVBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZFtlXSA9IDEwMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCA+IG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHVbZV0gKz0gbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGRbZV0gKz0gbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0LnBvc2l0aXZlVmFsdWVzLmNvbmNhdCh0Lm5lZ2F0aXZlVmFsdWVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUubWluKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gZS5tYXgoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5taW4gPSBudWxsID09PSBhLm1pbiA/IG4gOiBNYXRoLm1pbihhLm1pbiwgbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5tYXggPSBudWxsID09PSBhLm1heCA/IG8gOiBNYXRoLm1heChhLm1heCwgbykpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChyLCBmdW5jdGlvbiAoaSwgbykge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gbi5nZXREYXRhc2V0TWV0YShvKTtcbiAgICAgICAgICAgICAgICAgICAgICBuLmlzRGF0YXNldFZpc2libGUobykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQocikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChpLmRhdGEsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gK2EuZ2V0UmlnaHRWYWx1ZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4oaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmRhdGFbZV0uaGlkZGVuIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT09IGEubWluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhLm1pbiA9IGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkgPCBhLm1pbiAmJiAoYS5taW4gPSBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSBhLm1heFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoYS5tYXggPSBpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpID4gYS5tYXggJiYgKGEubWF4ID0gaSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRUaWNrTGltaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkub3B0aW9ucy50aWNrcztcbiAgICAgICAgICAgICAgICAgIGlmIChpLmlzSG9yaXpvbnRhbCgpKVxuICAgICAgICAgICAgICAgICAgICBhID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgICAgbi5tYXhUaWNrc0xpbWl0ID8gbi5tYXhUaWNrc0xpbWl0IDogMTEsXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGkud2lkdGggLyA1MClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgbi5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICB0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgIG4ubWF4VGlja3NMaW1pdCA/IG4ubWF4VGlja3NMaW1pdCA6IDExLFxuICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChpLmhlaWdodCAvICgyICogbykpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5pc0hvcml6b250YWwoKSB8fCB0aGlzLnRpY2tzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2VdLmRhdGFbdF1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5wYWRkaW5nTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkucGFkZGluZ0JvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgciA9IGkuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGwgPSAraS5nZXRSaWdodFZhbHVlKHQpLFxuICAgICAgICAgICAgICAgICAgICBzID0gaS5lbmQgLSByO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgICAgPyAoKGEgPSBpLndpZHRoIC0gKG4gKyBpLnBhZGRpbmdSaWdodCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChlID0gaS5sZWZ0ICsgKGEgLyBzKSAqIChsIC0gcikpLFxuICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoZSArIG4pKVxuICAgICAgICAgICAgICAgICAgICA6ICgoYSA9IGkuaGVpZ2h0IC0gKGkucGFkZGluZ1RvcCArIG8pKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZSA9IGkuYm90dG9tIC0gbyAtIChhIC8gcykgKiAobCAtIHIpKSxcbiAgICAgICAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGUpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBlLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5wYWRkaW5nTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGUucGFkZGluZ0JvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGFcbiAgICAgICAgICAgICAgICAgICAgICA/IGUud2lkdGggLSAoaSArIGUucGFkZGluZ1JpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgIDogZS5oZWlnaHQgLSAoZS5wYWRkaW5nVG9wICsgbiksXG4gICAgICAgICAgICAgICAgICAgIHIgPSAoYSA/IHQgLSBlLmxlZnQgLSBpIDogZS5ib3R0b20gLSBuIC0gdCkgLyBvO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc3RhcnQgKyAoZS5lbmQgLSBlLnN0YXJ0KSAqIHI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclRpY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMudGlja3NBc051bWJlcnNbdF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdC5zY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoXCJsaW5lYXJcIiwgaSwgYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgNDM6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnMsXG4gICAgICAgICAgICAgIGEgPSBlLm5vb3A7XG4gICAgICAgICAgICB0LkxpbmVhclNjYWxlQmFzZSA9IHQuU2NhbGUuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgaGFuZGxlVGlja1JhbmdlT3B0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgIGEgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICBpID0gYS50aWNrcztcbiAgICAgICAgICAgICAgICBpZiAoaS5iZWdpbkF0WmVybykge1xuICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlLnNpZ24odC5taW4pLFxuICAgICAgICAgICAgICAgICAgICBvID0gZS5zaWduKHQubWF4KTtcbiAgICAgICAgICAgICAgICAgIDAgPiBuICYmIDAgPiBvID8gKHQubWF4ID0gMCkgOiBuID4gMCAmJiBvID4gMCAmJiAodC5taW4gPSAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSBpLm1pblxuICAgICAgICAgICAgICAgICAgPyAodC5taW4gPSBpLm1pbilcbiAgICAgICAgICAgICAgICAgIDogdm9pZCAwICE9PSBpLnN1Z2dlc3RlZE1pbiAmJlxuICAgICAgICAgICAgICAgICAgICAodC5taW4gPSBNYXRoLm1pbih0Lm1pbiwgaS5zdWdnZXN0ZWRNaW4pKSxcbiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gaS5tYXhcbiAgICAgICAgICAgICAgICAgICAgPyAodC5tYXggPSBpLm1heClcbiAgICAgICAgICAgICAgICAgICAgOiB2b2lkIDAgIT09IGkuc3VnZ2VzdGVkTWF4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHQubWF4ID0gTWF0aC5tYXgodC5tYXgsIGkuc3VnZ2VzdGVkTWF4KSksXG4gICAgICAgICAgICAgICAgICB0Lm1pbiA9PT0gdC5tYXggJiYgKHQubWF4KyssIGkuYmVnaW5BdFplcm8gfHwgdC5taW4tLSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldFRpY2tMaW1pdDogYSxcbiAgICAgICAgICAgICAgaGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzOiBhLFxuICAgICAgICAgICAgICBidWlsZFRpY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgaSA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgIG4gPSBpLnRpY2tzLFxuICAgICAgICAgICAgICAgICAgbyA9IGEuZ2V0VGlja0xpbWl0KCk7XG4gICAgICAgICAgICAgICAgbyA9IE1hdGgubWF4KDIsIG8pO1xuICAgICAgICAgICAgICAgIHZhciByID0ge1xuICAgICAgICAgICAgICAgICAgICBtYXhUaWNrczogbyxcbiAgICAgICAgICAgICAgICAgICAgbWluOiBuLm1pbixcbiAgICAgICAgICAgICAgICAgICAgbWF4OiBuLm1heCxcbiAgICAgICAgICAgICAgICAgICAgc3RlcFNpemU6IGUuZ2V0VmFsdWVPckRlZmF1bHQobi5maXhlZFN0ZXBTaXplLCBuLnN0ZXBTaXplKSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBsID0gKGEudGlja3MgPSB0LlRpY2tzLmdlbmVyYXRvcnMubGluZWFyKHIsIGEpKTtcbiAgICAgICAgICAgICAgICBhLmhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlcygpLFxuICAgICAgICAgICAgICAgICAgKGEubWF4ID0gZS5tYXgobCkpLFxuICAgICAgICAgICAgICAgICAgKGEubWluID0gZS5taW4obCkpLFxuICAgICAgICAgICAgICAgICAgbi5yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgID8gKGwucmV2ZXJzZSgpLCAoYS5zdGFydCA9IGEubWF4KSwgKGEuZW5kID0gYS5taW4pKVxuICAgICAgICAgICAgICAgICAgICA6ICgoYS5zdGFydCA9IGEubWluKSwgKGEuZW5kID0gYS5tYXgpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgKGUudGlja3NBc051bWJlcnMgPSBlLnRpY2tzLnNsaWNlKCkpLFxuICAgICAgICAgICAgICAgICAgKGUuemVyb0xpbmVJbmRleCA9IGUudGlja3MuaW5kZXhPZigwKSksXG4gICAgICAgICAgICAgICAgICB0LlNjYWxlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICBdLFxuICAgICAgNDQ6IFtcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGEpIHtcbiAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmhlbHBlcnMsXG4gICAgICAgICAgICAgIGEgPSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwibGVmdFwiLFxuICAgICAgICAgICAgICAgIHRpY2tzOiB7IGNhbGxiYWNrOiB0LlRpY2tzLmZvcm1hdHRlcnMubG9nYXJpdGhtaWMgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaSA9IHQuU2NhbGUuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQgPyB0LnhBeGlzSUQgPT09IGEuaWQgOiB0LnlBeGlzSUQgPT09IGEuaWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLnRpY2tzLFxuICAgICAgICAgICAgICAgICAgICBvID0gYS5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgciA9IG8uZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IHIuZGF0YXNldHMsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBlLmdldFZhbHVlT3JEZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBkID0gYS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKChhLm1pbiA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAoYS5tYXggPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgKGEubWluTm90WmVybyA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBpLnN0YWNrZWQpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGwsIGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBvLmdldERhdGFzZXRNZXRhKHIpO1xuICAgICAgICAgICAgICAgICAgICAgIG8uaXNEYXRhc2V0VmlzaWJsZShyKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdChsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gdVtsLnR5cGVdICYmICh1W2wudHlwZV0gPSBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmVhY2gobi5kYXRhLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHVbbC50eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gK2EuZ2V0UmlnaHRWYWx1ZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4obykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLmRhdGFbZV0uaGlkZGVuIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChuW2VdID0gbltlXSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnJlbGF0aXZlUG9pbnRzID8gKG5bZV0gPSAxMDApIDogKG5bZV0gKz0gbykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBlLmVhY2godSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZS5taW4odCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlLm1heCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLm1pbiA9IG51bGwgPT09IGEubWluID8gaSA6IE1hdGgubWluKGEubWluLCBpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhLm1heCA9IG51bGwgPT09IGEubWF4ID8gbiA6IE1hdGgubWF4KGEubWF4LCBuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGwsIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBvLmdldERhdGFzZXRNZXRhKG4pO1xuICAgICAgICAgICAgICAgICAgICAgIG8uaXNEYXRhc2V0VmlzaWJsZShuKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdChyKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGkuZGF0YSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSArYS5nZXRSaWdodFZhbHVlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZGF0YVtlXS5oaWRkZW4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PT0gYS5taW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGEubWluID0gaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaSA8IGEubWluICYmIChhLm1pbiA9IGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IGEubWF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhLm1heCA9IGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkgPiBhLm1heCAmJiAoYS5tYXggPSBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwICE9PSBpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PT0gYS5taW5Ob3RaZXJvIHx8IGkgPCBhLm1pbk5vdFplcm8pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5taW5Ob3RaZXJvID0gaSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgKGEubWluID0gcyhuLm1pbiwgYS5taW4pKSxcbiAgICAgICAgICAgICAgICAgICAgKGEubWF4ID0gcyhuLm1heCwgYS5tYXgpKSxcbiAgICAgICAgICAgICAgICAgICAgYS5taW4gPT09IGEubWF4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgKDAgIT09IGEubWluICYmIG51bGwgIT09IGEubWluXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoYS5taW4gPSBNYXRoLnBvdyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKGUubG9nMTAoYS5taW4pKSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhLm1heCA9IE1hdGgucG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoZS5sb2cxMChhLm1heCkpICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKChhLm1pbiA9IDEpLCAoYS5tYXggPSAxMCkpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkVGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkudGlja3MsXG4gICAgICAgICAgICAgICAgICAgIG8gPSB7IG1pbjogbi5taW4sIG1heDogbi5tYXggfSxcbiAgICAgICAgICAgICAgICAgICAgciA9IChhLnRpY2tzID0gdC5UaWNrcy5nZW5lcmF0b3JzLmxvZ2FyaXRobWljKG8sIGEpKTtcbiAgICAgICAgICAgICAgICAgIGEuaXNIb3Jpem9udGFsKCkgfHwgci5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgIChhLm1heCA9IGUubWF4KHIpKSxcbiAgICAgICAgICAgICAgICAgICAgKGEubWluID0gZS5taW4ocikpLFxuICAgICAgICAgICAgICAgICAgICBuLnJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgICA/IChyLnJldmVyc2UoKSwgKGEuc3RhcnQgPSBhLm1heCksIChhLmVuZCA9IGEubWluKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICgoYS5zdGFydCA9IGEubWluKSwgKGEuZW5kID0gYS5tYXgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAodGhpcy50aWNrVmFsdWVzID0gdGhpcy50aWNrcy5zbGljZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgdC5TY2FsZS5wcm90b3R5cGUuY29udmVydFRpY2tzVG9MYWJlbHMuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2VdLmRhdGFbdF1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclRpY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMudGlja1ZhbHVlc1t0XSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICByID0gby5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgbCA9ICtvLmdldFJpZ2h0VmFsdWUodCksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBvLnBhZGRpbmdUb3AsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBvLnBhZGRpbmdCb3R0b20sXG4gICAgICAgICAgICAgICAgICAgIHUgPSBvLnBhZGRpbmdMZWZ0LFxuICAgICAgICAgICAgICAgICAgICBjID0gby5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBoID0gYy50aWNrcztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG8uaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgICAgICA/ICgobiA9IGUubG9nMTAoby5lbmQpIC0gZS5sb2cxMChyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAwID09PSBsXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKGkgPSBvLmxlZnQgKyB1KVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoYSA9IG8ud2lkdGggLSAodSArIG8ucGFkZGluZ1JpZ2h0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBvLmxlZnQgKyAoYSAvIG4pICogKGUubG9nMTAobCkgLSBlLmxvZzEwKHIpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgKz0gdSkpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKChhID0gby5oZWlnaHQgLSAocyArIGQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgIT09IHIgfHwgaC5yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gMCA9PT0gby5lbmQgJiYgaC5yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKG4gPSBlLmxvZzEwKG8uc3RhcnQpIC0gZS5sb2cxMChvLm1pbk5vdFplcm8pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9PT0gby5lbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8udG9wICsgc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbCA9PT0gby5taW5Ob3RaZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvLnRvcCArIHMgKyAwLjAyICogYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogby50b3AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAyICogYSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKDAuOTggKiBhKSAvIG4pICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUubG9nMTAobCkgLSBlLmxvZzEwKG8ubWluTm90WmVybykpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgobiA9IGUubG9nMTAoby5lbmQpIC0gZS5sb2cxMChyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9IG8uaGVpZ2h0IC0gKHMgKyBkKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uYm90dG9tIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhIC8gbikgKiAoZS5sb2cxMChsKSAtIGUubG9nMTAocikpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKG4gPSBlLmxvZzEwKG8uZW5kKSAtIGUubG9nMTAoby5taW5Ob3RaZXJvKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9PT0gclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm90dG9tIC0gZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwgPT09IG8ubWluTm90WmVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG8uYm90dG9tIC0gZCAtIDAuMDIgKiBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogby5ib3R0b20gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDIgKiBhIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKDAuOTggKiBhKSAvIG4pICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmxvZzEwKGwpIC0gZS5sb2cxMChvLm1pbk5vdFplcm8pKSkpKSxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLmxvZzEwKG4uZW5kKSAtIGUubG9nMTAobi5zdGFydCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBuLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKGkgPSBuLndpZHRoIC0gKG4ucGFkZGluZ0xlZnQgKyBuLnBhZGRpbmdSaWdodCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBuLnN0YXJ0ICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coMTAsICgodCAtIG4ubGVmdCAtIG4ucGFkZGluZ0xlZnQpICogbykgLyBpKSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoKGkgPSBuLmhlaWdodCAtIChuLnBhZGRpbmdUb3AgKyBuLnBhZGRpbmdCb3R0b20pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChuLmJvdHRvbSAtIG4ucGFkZGluZ0JvdHRvbSAtIHQpICogbykgLyBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkgLyBuLnN0YXJ0KSksXG4gICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0LnNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZShcImxvZ2FyaXRobWljXCIsIGksIGEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgXSxcbiAgICAgIDQ1OiBbXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBhKSB7XG4gICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdC5oZWxwZXJzLFxuICAgICAgICAgICAgICBhID0gdC5kZWZhdWx0cy5nbG9iYWwsXG4gICAgICAgICAgICAgIGkgPSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogITAsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZTogITAsXG4gICAgICAgICAgICAgICAgbGluZUFyYzogITEsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiY2hhcnRBcmVhXCIsXG4gICAgICAgICAgICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogITAsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMSlcIixcbiAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogITAsXG4gICAgICAgICAgICAgICAgICBiYWNrZHJvcENvbG9yOiBcInJnYmEoMjU1LDI1NSwyNTUsMC43NSlcIixcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZ1k6IDIsXG4gICAgICAgICAgICAgICAgICBiYWNrZHJvcFBhZGRpbmdYOiAyLFxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IHQuVGlja3MuZm9ybWF0dGVycy5saW5lYXIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludExhYmVsczoge1xuICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEwLFxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBuID0gdC5MaW5lYXJTY2FsZUJhc2UuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZUNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLnRpY2tzO1xuICAgICAgICAgICAgICAgICAgKHQud2lkdGggPSB0Lm1heFdpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgKHQuaGVpZ2h0ID0gdC5tYXhIZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAodC54Q2VudGVyID0gTWF0aC5yb3VuZCh0LndpZHRoIC8gMikpLFxuICAgICAgICAgICAgICAgICAgICAodC55Q2VudGVyID0gTWF0aC5yb3VuZCh0LmhlaWdodCAvIDIpKTtcbiAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5taW4oW3QuaGVpZ2h0LCB0LndpZHRoXSksXG4gICAgICAgICAgICAgICAgICAgIHIgPSBlLmdldFZhbHVlT3JEZWZhdWx0KG4uZm9udFNpemUsIGEuZGVmYXVsdEZvbnRTaXplKTtcbiAgICAgICAgICAgICAgICAgIHQuZHJhd2luZ0FyZWEgPSBpLmRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgPyBvIC8gMiAtIChyIC8gMiArIG4uYmFja2Ryb3BQYWRkaW5nWSlcbiAgICAgICAgICAgICAgICAgICAgOiBvIC8gMjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuY2hhcnQ7XG4gICAgICAgICAgICAgICAgICAodC5taW4gPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgKHQubWF4ID0gbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaChhLmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGEuaXNEYXRhc2V0VmlzaWJsZShuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBhLmdldERhdGFzZXRNZXRhKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKGkuZGF0YSwgZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSArdC5nZXRSaWdodFZhbHVlKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZGF0YVthXS5oaWRkZW4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PT0gdC5taW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHQubWluID0gaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaSA8IHQubWluICYmICh0Lm1pbiA9IGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHQubWF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICh0Lm1heCA9IGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkgPiB0Lm1heCAmJiAodC5tYXggPSBpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0LmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFRpY2tMaW1pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnMudGlja3MsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLmdldFZhbHVlT3JEZWZhdWx0KHQuZm9udFNpemUsIGEuZGVmYXVsdEZvbnRTaXplKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgdC5tYXhUaWNrc0xpbWl0ID8gdC5tYXhUaWNrc0xpbWl0IDogMTEsXG4gICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gKDEuNSAqIGkpKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICB0LkxpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUuY29udmVydFRpY2tzVG9MYWJlbHMuY2FsbChlKSxcbiAgICAgICAgICAgICAgICAgICAgKGUucG9pbnRMYWJlbHMgPSBlLmNoYXJ0LmRhdGEubGFiZWxzLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICBlLm9wdGlvbnMucG9pbnRMYWJlbHMuY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2VdLmRhdGFbdF1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICBnID0gdGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICBwID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChnLmZvbnRTaXplLCBhLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIG0gPSBlLmdldFZhbHVlT3JEZWZhdWx0KGcuZm9udFN0eWxlLCBhLmRlZmF1bHRGb250U3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBiID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChnLmZvbnRGYW1pbHksIGEuZGVmYXVsdEZvbnRGYW1pbHkpLFxuICAgICAgICAgICAgICAgICAgICB2ID0gZS5mb250U3RyaW5nKHAsIG0sIGIpLFxuICAgICAgICAgICAgICAgICAgICB4ID0gZS5taW4oW3RoaXMuaGVpZ2h0IC8gMiAtIHAgLSA1LCB0aGlzLndpZHRoIC8gMl0pLFxuICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgayA9IDA7XG4gICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5mb250ID0gdiwgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGkgPCB0aGlzLmdldFZhbHVlQ291bnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgKHQgPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgeCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChuID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4Lm1lYXN1cmVUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50TGFiZWxzW2ldID8gdGhpcy5wb2ludExhYmVsc1tpXSA6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICkud2lkdGggKyA1KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIFMgPSB0aGlzLmdldEluZGV4QW5nbGUoaSkgKyBNYXRoLlBJIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICB3ID0gKCgzNjAgKiBTKSAvICgyICogTWF0aC5QSSkpICUgMzYwO1xuICAgICAgICAgICAgICAgICAgICAwID09PSB3IHx8IDE4MCA9PT0gd1xuICAgICAgICAgICAgICAgICAgICAgID8gKChvID0gbiAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC54ICsgbyA+IHkgJiYgKCh5ID0gdC54ICsgbyksIChyID0gaSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC54IC0gbyA8IGsgJiYgKChrID0gdC54IC0gbyksIChzID0gaSkpKVxuICAgICAgICAgICAgICAgICAgICAgIDogMTgwID4gd1xuICAgICAgICAgICAgICAgICAgICAgID8gdC54ICsgbiA+IHkgJiYgKCh5ID0gdC54ICsgbiksIChyID0gaSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiB0LnggLSBuIDwgayAmJiAoKGsgPSB0LnggLSBuKSwgKHMgPSBpKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAodSA9IGspLFxuICAgICAgICAgICAgICAgICAgICAoYyA9IE1hdGguY2VpbCh5IC0gdGhpcy53aWR0aCkpLFxuICAgICAgICAgICAgICAgICAgICAobCA9IHRoaXMuZ2V0SW5kZXhBbmdsZShyKSksXG4gICAgICAgICAgICAgICAgICAgIChkID0gdGhpcy5nZXRJbmRleEFuZ2xlKHMpKSxcbiAgICAgICAgICAgICAgICAgICAgKGggPSBjIC8gTWF0aC5zaW4obCArIE1hdGguUEkgLyAyKSksXG4gICAgICAgICAgICAgICAgICAgIChmID0gdSAvIE1hdGguc2luKGQgKyBNYXRoLlBJIC8gMikpLFxuICAgICAgICAgICAgICAgICAgICAoaCA9IGUuaXNOdW1iZXIoaCkgPyBoIDogMCksXG4gICAgICAgICAgICAgICAgICAgIChmID0gZS5pc051bWJlcihmKSA/IGYgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLnJvdW5kKHggLSAoZiArIGgpIC8gMikpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENlbnRlclBvaW50KGYsIGgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLndpZHRoIC0gZSAtIGEuZHJhd2luZ0FyZWEsXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0ICsgYS5kcmF3aW5nQXJlYTtcbiAgICAgICAgICAgICAgICAgIChhLnhDZW50ZXIgPSBNYXRoLnJvdW5kKChuICsgaSkgLyAyICsgYS5sZWZ0KSksXG4gICAgICAgICAgICAgICAgICAgIChhLnlDZW50ZXIgPSBNYXRoLnJvdW5kKGEuaGVpZ2h0IC8gMiArIGEudG9wKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRJbmRleEFuZ2xlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSAoMiAqIE1hdGguUEkpIC8gdGhpcy5nZXRWYWx1ZUNvdW50KCksXG4gICAgICAgICAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucyAmJiB0aGlzLmNoYXJ0Lm9wdGlvbnMuc3RhcnRBbmdsZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmNoYXJ0Lm9wdGlvbnMuc3RhcnRBbmdsZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwLFxuICAgICAgICAgICAgICAgICAgICBpID0gKGEgKiBNYXRoLlBJICogMikgLyAzNjA7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCAqIGUgLSBNYXRoLlBJIC8gMiArIGk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB0KSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgIHZhciBhID0gZS5kcmF3aW5nQXJlYSAvIChlLm1heCAtIGUubWluKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBlLm9wdGlvbnMucmV2ZXJzZSA/IChlLm1heCAtIHQpICogYSA6ICh0IC0gZS5taW4pICogYTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFBvaW50UG9zaXRpb246IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmdldEluZGV4QW5nbGUodCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB4OiBNYXRoLnJvdW5kKE1hdGguY29zKGkpICogZSkgKyBhLnhDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgIHk6IE1hdGgucm91bmQoTWF0aC5zaW4oaSkgKiBlKSArIGEueUNlbnRlcixcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWU6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKGUpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0QmFzZVBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm1pbixcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQubWF4O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICB0LmJlZ2luQXRaZXJvXG4gICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgOiAwID4gZSAmJiAwID4gYVxuICAgICAgICAgICAgICAgICAgICAgID8gYVxuICAgICAgICAgICAgICAgICAgICAgIDogZSA+IDAgJiYgYSA+IDBcbiAgICAgICAgICAgICAgICAgICAgICA/IGVcbiAgICAgICAgICAgICAgICAgICAgICA6IDBcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcmF3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmdyaWRMaW5lcyxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGkudGlja3MsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLmFuZ2xlTGluZXMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBpLnBvaW50TGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICBzID0gZS5nZXRWYWx1ZU9yRGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgIGlmIChpLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB0LmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICB1ID0gcyhvLmZvbnRTaXplLCBhLmRlZmF1bHRGb250U2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgYyA9IHMoby5mb250U3R5bGUsIGEuZGVmYXVsdEZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgaCA9IHMoby5mb250RmFtaWx5LCBhLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICAgICAgICBmID0gZS5mb250U3RyaW5nKHUsIGMsIGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgKGUuZWFjaCh0LnRpY2tzLCBmdW5jdGlvbiAociwgbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGwgPiAwIHx8IGkucmV2ZXJzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHQuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnRpY2tzQXNOdW1iZXJzW2xdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gdC55Q2VudGVyIC0gYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uZGlzcGxheSAmJiAwICE9PSBsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZC5zdHJva2VTdHlsZSA9IGUuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC5saW5lV2lkdGggPSBlLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5saW5lV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkubGluZUFyYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmJlZ2luUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmFyYyh0LnhDZW50ZXIsIHQueUNlbnRlciwgYywgMCwgMiAqIE1hdGguUEkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmNsb3NlUGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgdC5nZXRWYWx1ZUNvdW50KCk7IGcrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHQuZ2V0UG9pbnRQb3NpdGlvbihnLCBjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCA9PT0gZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZC5tb3ZlVG8ocC54LCBwLnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkLmxpbmVUbyhwLngsIHAueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmNsb3NlUGF0aCgpLCBkLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uZGlzcGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gcyhvLmZvbnRDb2xvciwgYS5kZWZhdWx0Rm9udENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKChkLmZvbnQgPSBmKSwgby5zaG93TGFiZWxCYWNrZHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gZC5tZWFzdXJlVGV4dChyKS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkLmZpbGxTdHlsZSA9IG8uYmFja2Ryb3BDb2xvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZmlsbFJlY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC54Q2VudGVyIC0gYiAvIDIgLSBvLmJhY2tkcm9wUGFkZGluZ1gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCAtIHUgLyAyIC0gby5iYWNrZHJvcFBhZGRpbmdZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgKyAyICogby5iYWNrZHJvcFBhZGRpbmdYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgKyAyICogby5iYWNrZHJvcFBhZGRpbmdZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkLnRleHRBbGlnbiA9IFwiY2VudGVyXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC5maWxsU3R5bGUgPSBtKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZmlsbFRleHQociwgdC54Q2VudGVyLCBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICFpLmxpbmVBcmMpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgIChkLmxpbmVXaWR0aCA9IHIubGluZVdpZHRoKSwgKGQuc3Ryb2tlU3R5bGUgPSByLmNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSB0LmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucmV2ZXJzZSA/IHQubWluIDogdC5tYXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHMobC5mb250U2l6ZSwgYS5kZWZhdWx0Rm9udFNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gcyhsLmZvbnRTdHlsZSwgYS5kZWZhdWx0Rm9udFN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHMobC5mb250RmFtaWx5LCBhLmRlZmF1bHRGb250RmFtaWx5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IGUuZm9udFN0cmluZyhwLCBtLCBiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHQuZ2V0VmFsdWVDb3VudCgpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgtLVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuZGlzcGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHQuZ2V0UG9pbnRQb3NpdGlvbih4LCBnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZC5iZWdpblBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm1vdmVUbyh0LnhDZW50ZXIsIHQueUNlbnRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5saW5lVG8oeS54LCB5LnkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc3Ryb2tlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0gdC5nZXRQb2ludFBvc2l0aW9uKHgsIGcgKyA1KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgUyA9IHMobC5mb250Q29sb3IsIGEuZGVmYXVsdEZvbnRDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZC5mb250ID0gdiksIChkLmZpbGxTdHlsZSA9IFMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSB0LnBvaW50TGFiZWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBNID0gdGhpcy5nZXRJbmRleEFuZ2xlKHgpICsgTWF0aC5QSSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEMgPSAoKDM2MCAqIE0pIC8gKDIgKiBNYXRoLlBJKSkgJSAzNjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAwID09PSBDIHx8IDE4MCA9PT0gQ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IChkLnRleHRBbGlnbiA9IFwiY2VudGVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogMTgwID4gQ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IChkLnRleHRBbGlnbiA9IFwibGVmdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IChkLnRleHRBbGlnbiA9IFwicmlnaHRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDkwID09PSBDIHx8IDI3MCA9PT0gQ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGQudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEMgPiAyNzAgfHwgOTAgPiBDXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZC50ZXh0QmFzZWxpbmUgPSBcImJvdHRvbVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGQudGV4dEJhc2VsaW5lID0gXCJ0b3BcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQuZmlsbFRleHQod1t4XSA/IHdbeF0gOiBcIlwiLCBrLngsIGsueSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0LnNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZShcInJhZGlhbExpbmVhclwiLCBuLCBpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIF0sXG4gICAgICA0NjogW1xuICAgICAgICBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgIHZhciBpID0gdCgxKTtcbiAgICAgICAgICAoaSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaSA/IGkgOiB3aW5kb3cubW9tZW50KSxcbiAgICAgICAgICAgIChlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHQuaGVscGVycyxcbiAgICAgICAgICAgICAgICBhID0ge1xuICAgICAgICAgICAgICAgICAgdW5pdHM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWlsbGlzZWNvbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICBzdGVwczogWzEsIDIsIDUsIDEwLCAyMCwgNTAsIDEwMCwgMjUwLCA1MDBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwic2Vjb25kXCIsIHN0ZXBzOiBbMSwgMiwgNSwgMTAsIDMwXSB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwibWludXRlXCIsIHN0ZXBzOiBbMSwgMiwgNSwgMTAsIDMwXSB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwiaG91clwiLCBzdGVwczogWzEsIDIsIDMsIDYsIDEyXSB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwiZGF5XCIsIHN0ZXBzOiBbMSwgMiwgNV0gfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcIndlZWtcIiwgbWF4U3RlcDogNCB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwibW9udGhcIiwgbWF4U3RlcDogMyB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwicXVhcnRlclwiLCBtYXhTdGVwOiA0IH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJ5ZWFyXCIsIG1heFN0ZXA6ICExIH0sXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbiA9IHtcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICAgICAgICAgICAgdGltZToge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZXI6ICExLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICExLFxuICAgICAgICAgICAgICAgICAgICB1bml0OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgcm91bmQ6ICExLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Rm9ybWF0OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgaXNvV2Vla2RheTogITEsXG4gICAgICAgICAgICAgICAgICAgIG1pblVuaXQ6IFwibWlsbGlzZWNvbmRcIixcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZDogXCJoOm1tOnNzLlNTUyBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgc2Vjb25kOiBcImg6bW06c3MgYVwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZTogXCJoOm1tOnNzIGFcIixcbiAgICAgICAgICAgICAgICAgICAgICBob3VyOiBcIk1NTSBELCBoQVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGRheTogXCJsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgIHdlZWs6IFwibGxcIixcbiAgICAgICAgICAgICAgICAgICAgICBtb250aDogXCJNTU0gWVlZWVwiLFxuICAgICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXI6IFwiW1FdUSAtIFlZWVlcIixcbiAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiBcIllZWVlcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0aWNrczogeyBhdXRvU2tpcDogITEgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG8gPSB0LlNjYWxlLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaSlcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNoYXJ0LmpzIC0gTW9tZW50LmpzIGNvdWxkIG5vdCBiZSBmb3VuZCEgWW91IG11c3QgaW5jbHVkZSBpdCBiZWZvcmUgQ2hhcnQuanMgdG8gdXNlIHRoZSB0aW1lIHNjYWxlLiBEb3dubG9hZCBhdCBodHRwczovL21vbWVudGpzLmNvbVwiXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdC5TY2FsZS5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdldExhYmVsTW9tZW50OiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gdCB8fCBudWxsID09PSBlXG4gICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB0aGlzLmxhYmVsTW9tZW50c1t0XVxuICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5sYWJlbE1vbWVudHNbdF1bZV1cbiAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0TGFiZWxEaWZmOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09PSB0IHx8IG51bGwgPT09IGVcbiAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICA6ICh2b2lkIDAgPT09IGEubGFiZWxEaWZmcyAmJiBhLmJ1aWxkTGFiZWxEaWZmcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgYS5sYWJlbERpZmZzW3RdXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gYS5sYWJlbERpZmZzW3RdW2VdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0TW9tZW50U3RhcnRPZjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ3ZWVrXCIgPT09IGUub3B0aW9ucy50aW1lLnVuaXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICBlLm9wdGlvbnMudGltZS5pc29XZWVrZGF5ICE9PSAhMVxuICAgICAgICAgICAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuc3RhcnRPZihcImlzb1dlZWtcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmlzb1dlZWtkYXkoZS5vcHRpb25zLnRpbWUuaXNvV2Vla2RheSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHQuY2xvbmUoKS5zdGFydE9mKGUudGlja1VuaXQpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0LmxhYmVsTW9tZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0LmRhdGEubGFiZWxzICYmIHQuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgID8gKGUuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGFydC5kYXRhLmxhYmVscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHQucGFyc2VUaW1lKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLnRpbWUucm91bmQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zdGFydE9mKHQub3B0aW9ucy50aW1lLnJvdW5kKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaChpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAodC5maXJzdFRpY2sgPSBpLm1pbi5jYWxsKHQsIGEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0Lmxhc3RUaWNrID0gaS5tYXguY2FsbCh0LCBhKSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiAoKHQuZmlyc3RUaWNrID0gbnVsbCksICh0Lmxhc3RUaWNrID0gbnVsbCkpLFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hhcnQuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHQuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2Ygbi5kYXRhWzBdICYmIG51bGwgIT09IG4uZGF0YVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0LnBhcnNlVGltZSh0LmdldFJpZ2h0VmFsdWUoZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLnRpbWUucm91bmQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zdGFydE9mKHQub3B0aW9ucy50aW1lLnJvdW5kKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucHVzaChhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh0LmZpcnN0VGljayA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdC5maXJzdFRpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaS5taW4odC5maXJzdFRpY2ssIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5sYXN0VGljayA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdC5sYXN0VGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLm1heCh0Lmxhc3RUaWNrLCBhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAociA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubGFiZWxNb21lbnRzLnB1c2gocik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLnRpbWUubWluICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodC5maXJzdFRpY2sgPSB0LnBhcnNlVGltZSh0Lm9wdGlvbnMudGltZS5taW4pKSxcbiAgICAgICAgICAgICAgICAgICAgICB0Lm9wdGlvbnMudGltZS5tYXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0Lmxhc3RUaWNrID0gdC5wYXJzZVRpbWUodC5vcHRpb25zLnRpbWUubWF4KSksXG4gICAgICAgICAgICAgICAgICAgICAgKHQuZmlyc3RUaWNrID0gKHQuZmlyc3RUaWNrIHx8IGkoKSkuY2xvbmUoKSksXG4gICAgICAgICAgICAgICAgICAgICAgKHQubGFzdFRpY2sgPSAodC5sYXN0VGljayB8fCBpKCkpLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGJ1aWxkTGFiZWxEaWZmczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHQubGFiZWxEaWZmcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0LmNoYXJ0LmRhdGEubGFiZWxzICYmXG4gICAgICAgICAgICAgICAgICAgICAgdC5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgZS5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGFydC5kYXRhLmxhYmVscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5wYXJzZVRpbWUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQub3B0aW9ucy50aW1lLnJvdW5kICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnN0YXJ0T2YodC5vcHRpb25zLnRpbWUucm91bmQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaChpLmRpZmYodC5maXJzdFRpY2ssIHQudGlja1VuaXQsICEwKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hhcnQuZGF0YS5kYXRhc2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGkuZGF0YVswXSAmJiBudWxsICE9PSBpLmRhdGFbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdC5wYXJzZVRpbWUodC5nZXRSaWdodFZhbHVlKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQub3B0aW9ucy50aW1lLnJvdW5kICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuc3RhcnRPZih0Lm9wdGlvbnMudGltZS5yb3VuZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuZGlmZih0LmZpcnN0VGljaywgdC50aWNrVW5pdCwgITApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKG4gPSBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmxhYmVsRGlmZnMucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBidWlsZFRpY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgaS5jdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUuZ2V0VmFsdWVPckRlZmF1bHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGlja3MuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemVcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIG8gPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnRpY2tzLmZvbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIHIgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnRpY2tzLmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udEZhbWlseVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgbCA9IGUuZm9udFN0cmluZyhuLCBvLCByKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICgoaS5jdHguZm9udCA9IGwpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLnRpY2tzID0gW10pLFxuICAgICAgICAgICAgICAgICAgICAgIChpLnVuaXRTY2FsZSA9IDEpLFxuICAgICAgICAgICAgICAgICAgICAgIChpLnNjYWxlU2l6ZUluVW5pdHMgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS51bml0KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKGkudGlja1VuaXQgPSBpLm9wdGlvbnMudGltZS51bml0IHx8IFwiZGF5XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkuZGlzcGxheUZvcm1hdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzW2kudGlja1VuaXRdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLnNjYWxlU2l6ZUluVW5pdHMgPSBpLmxhc3RUaWNrLmRpZmYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkuZmlyc3RUaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLnRpY2tVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS51bml0U2NhbGUgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS51bml0U3RlcFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGkuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLndpZHRoIC0gKGkucGFkZGluZ0xlZnQgKyBpLnBhZGRpbmdSaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpLmhlaWdodCAtIChpLnBhZGRpbmdUb3AgKyBpLnBhZGRpbmdCb3R0b20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGkudGlja0Zvcm1hdEZ1bmN0aW9uKGkuZmlyc3RUaWNrLCAwLCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICB1ID0gaS5jdHgubWVhc3VyZVRleHQoZCkud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gTWF0aC5jb3MoZS50b1JhZGlhbnMoaS5vcHRpb25zLnRpY2tzLm1heFJvdGF0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5zaW4oZS50b1JhZGlhbnMoaS5vcHRpb25zLnRpY2tzLm1heFJvdGF0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgdSA9IHUgKiBjICsgbiAqIGg7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBzIC8gdTtcbiAgICAgICAgICAgICAgICAgICAgICAoaS50aWNrVW5pdCA9IGkub3B0aW9ucy50aW1lLm1pblVuaXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkuc2NhbGVTaXplSW5Vbml0cyA9IGkubGFzdFRpY2suZGlmZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS5maXJzdFRpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkudGlja1VuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLmRpc3BsYXlGb3JtYXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS5kaXNwbGF5Rm9ybWF0c1tpLnRpY2tVbml0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IDAsIHAgPSBhLnVuaXRzW2ddOyBnIDwgYS51bml0cy5sZW5ndGg7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGkudW5pdFNjYWxlID0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUuaXNBcnJheShwLnN0ZXBzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChpLnNjYWxlU2l6ZUluVW5pdHMgLyBmKSA8IGUubWF4KHAuc3RlcHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgcC5zdGVwcy5sZW5ndGg7ICsrbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnN0ZXBzW21dID49IE1hdGguY2VpbChpLnNjYWxlU2l6ZUluVW5pdHMgLyBmKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS51bml0U2NhbGUgPSBlLmdldFZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS51bml0U3RlcFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuc3RlcHNbbV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwLm1heFN0ZXAgPT09ICExIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChpLnNjYWxlU2l6ZUluVW5pdHMgLyBmKSA8IHAubWF4U3RlcFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkudW5pdFNjYWxlID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS51bml0U3RlcFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGkuc2NhbGVTaXplSW5Vbml0cyAvIGYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKytnLCAocCA9IGEudW5pdHNbZ10pLCAoaS50aWNrVW5pdCA9IHAubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGkuZmlyc3RUaWNrLmRpZmYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5nZXRNb21lbnRTdGFydE9mKGkuZmlyc3RUaWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnRpY2tVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldE1vbWVudFN0YXJ0T2YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmxhc3RUaWNrLmNsb25lKCkuYWRkKDEsIGkudGlja1VuaXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kaWZmKGkubGFzdFRpY2ssIGkudGlja1VuaXQsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLnNjYWxlU2l6ZUluVW5pdHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLmxhc3RUaWNrLmRpZmYoaS5maXJzdFRpY2ssIGkudGlja1VuaXQsICEwKSArIGIgKyB2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuZGlzcGxheUZvcm1hdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHNbcC5uYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciB4O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgKGkub3B0aW9ucy50aW1lLm1pblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoeCA9IGkuZ2V0TW9tZW50U3RhcnRPZihpLmZpcnN0VGljaykpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgoaS5maXJzdFRpY2sgPSBpLmdldE1vbWVudFN0YXJ0T2YoaS5maXJzdFRpY2spKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHggPSBpLmZpcnN0VGljaykpLFxuICAgICAgICAgICAgICAgICAgICAgICFpLm9wdGlvbnMudGltZS5tYXgpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gaS5nZXRNb21lbnRTdGFydE9mKGkubGFzdFRpY2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgayA9IHkuZGlmZihpLmxhc3RUaWNrLCBpLnRpY2tVbml0LCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgMCA+IGtcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGkubGFzdFRpY2sgPSBpLmdldE1vbWVudFN0YXJ0T2YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5sYXN0VGljay5hZGQoMSwgaS50aWNrVW5pdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogayA+PSAwICYmIChpLmxhc3RUaWNrID0geSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5zY2FsZVNpemVJblVuaXRzID0gaS5sYXN0VGljay5kaWZmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpLmZpcnN0VGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS50aWNrVW5pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoaS5kaXNwbGF5Rm9ybWF0ID0gaS5vcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgICAgaS50aWNrcy5wdXNoKGkuZmlyc3RUaWNrLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBTID0gMTsgUyA8PSBpLnNjYWxlU2l6ZUluVW5pdHM7ICsrUykge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB3ID0geC5jbG9uZSgpLmFkZChTLCBpLnRpY2tVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMudGltZS5tYXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHcuZGlmZihpLmxhc3RUaWNrLCBpLnRpY2tVbml0LCAhMCkgPj0gMFxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIFMgJSBpLnVuaXRTY2FsZSA9PT0gMCAmJiBpLnRpY2tzLnB1c2godyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIE0gPSBpLnRpY2tzW2kudGlja3MubGVuZ3RoIC0gMV0uZGlmZihcbiAgICAgICAgICAgICAgICAgICAgICBpLmxhc3RUaWNrLFxuICAgICAgICAgICAgICAgICAgICAgIGkudGlja1VuaXRcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgKDAgIT09IE0gfHwgMCA9PT0gaS5zY2FsZVNpemVJblVuaXRzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgIChpLm9wdGlvbnMudGltZS5tYXhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGkudGlja3MucHVzaChpLmxhc3RUaWNrLmNsb25lKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5zY2FsZVNpemVJblVuaXRzID0gaS5sYXN0VGljay5kaWZmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudGlja3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS50aWNrVW5pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKGkudGlja3MucHVzaChpLmxhc3RUaWNrLmNsb25lKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5zY2FsZVNpemVJblVuaXRzID0gaS5sYXN0VGljay5kaWZmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZmlyc3RUaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudGlja1VuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSkpKSxcbiAgICAgICAgICAgICAgICAgICAgICBpLmN0eC5yZXN0b3JlKCksXG4gICAgICAgICAgICAgICAgICAgICAgKGkubGFiZWxEaWZmcyA9IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgYS5jaGFydC5kYXRhLmxhYmVscyAmJiB0IDwgYS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLmNoYXJ0LmRhdGEubGFiZWxzW3RdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICBcIm9iamVjdFwiID09IHR5cGVvZiBhLmNoYXJ0LmRhdGEuZGF0YXNldHNbZV0uZGF0YVswXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBhLmdldFJpZ2h0VmFsdWUoYS5jaGFydC5kYXRhLmRhdGFzZXRzW2VdLmRhdGFbdF0pKSxcbiAgICAgICAgICAgICAgICAgICAgICBhLm9wdGlvbnMudGltZS50b29sdGlwRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcnNlVGltZShpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KGEub3B0aW9ucy50aW1lLnRvb2x0aXBGb3JtYXQpKSxcbiAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdGlja0Zvcm1hdEZ1bmN0aW9uOiBmdW5jdGlvbiAodCwgYSwgaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZm9ybWF0KHRoaXMuZGlzcGxheUZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0aW9ucy50aWNrcyxcbiAgICAgICAgICAgICAgICAgICAgICByID0gZS5nZXRWYWx1ZU9yRGVmYXVsdChvLmNhbGxiYWNrLCBvLnVzZXJDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gcihuLCBhLCBpKSA6IG47XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAodC50aWNrTW9tZW50cyA9IHQudGlja3MpLFxuICAgICAgICAgICAgICAgICAgICAgICh0LnRpY2tzID0gdC50aWNrcy5tYXAodC50aWNrRm9ybWF0RnVuY3Rpb24sIHQpKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbiAodCwgZSwgYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAodm9pZCAwICE9PSBlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChuID0gaS5nZXRMYWJlbERpZmYoYSwgZSkpLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IG4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgodCAmJiB0LmlzVmFsaWQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0ID0gaS5wYXJzZVRpbWUoaS5nZXRSaWdodFZhbHVlKHQpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQuaXNWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0LmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAobiA9IHQuZGlmZihpLmZpcnN0VGljaywgaS50aWNrVW5pdCwgITApKSksXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gbilcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSAwICE9PSBuID8gbiAvIGkuc2NhbGVTaXplSW5Vbml0cyA6IG47XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gaS53aWR0aCAtIChpLnBhZGRpbmdMZWZ0ICsgaS5wYWRkaW5nUmlnaHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gciAqIG8gKyBpLnBhZGRpbmdMZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkubGVmdCArIE1hdGgucm91bmQobCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaS5oZWlnaHQgLSAoaS5wYWRkaW5nVG9wICsgaS5wYWRkaW5nQm90dG9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBzICogbyArIGkucGFkZGluZ1RvcDtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS50b3AgKyBNYXRoLnJvdW5kKGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGlja01vbWVudHNbdF0sXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIGEgPSBlLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGUud2lkdGggLSAoZS5wYWRkaW5nTGVmdCArIGUucGFkZGluZ1JpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmhlaWdodCAtIChlLnBhZGRpbmdUb3AgKyBlLnBhZGRpbmdCb3R0b20pLFxuICAgICAgICAgICAgICAgICAgICAgIG4gPVxuICAgICAgICAgICAgICAgICAgICAgICAgKHQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5sZWZ0ICsgZS5wYWRkaW5nTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZS50b3AgKyBlLnBhZGRpbmdUb3ApKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICBhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIChuICo9IGUuc2NhbGVTaXplSW5Vbml0cyksXG4gICAgICAgICAgICAgICAgICAgICAgZS5maXJzdFRpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9uZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkKGkuZHVyYXRpb24obiwgZS50aWNrVW5pdCkuYXNTZWNvbmRzKCksIFwic2Vjb25kc1wiKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHBhcnNlVGltZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5vcHRpb25zLnRpbWUucGFyc2VyXG4gICAgICAgICAgICAgICAgICAgICAgPyBpKHQsIGUub3B0aW9ucy50aW1lLnBhcnNlcilcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5vcHRpb25zLnRpbWUucGFyc2VyXG4gICAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMudGltZS5wYXJzZXIodClcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC5nZXRNb250aCB8fCBcIm51bWJlclwiID09IHR5cGVvZiB0XG4gICAgICAgICAgICAgICAgICAgICAgPyBpKHQpXG4gICAgICAgICAgICAgICAgICAgICAgOiB0LmlzVmFsaWQgJiYgdC5pc1ZhbGlkKClcbiAgICAgICAgICAgICAgICAgICAgICA/IHRcbiAgICAgICAgICAgICAgICAgICAgICA6IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUub3B0aW9ucy50aW1lLmZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5vcHRpb25zLnRpbWUuZm9ybWF0LmNhbGxcbiAgICAgICAgICAgICAgICAgICAgICA/IChjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwib3B0aW9ucy50aW1lLmZvcm1hdCBpcyBkZXByZWNhdGVkIGFuZCByZXBsYWNlZCBieSBvcHRpb25zLnRpbWUucGFyc2VyLiBTZWUgaHR0cDovL25ubmljay5naXRodWIuaW8vQ2hhcnQuanMvZG9jcy12Mi8jc2NhbGVzLXRpbWUtc2NhbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUub3B0aW9ucy50aW1lLmZvcm1hdCh0KSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGkodCwgZS5vcHRpb25zLnRpbWUuZm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHQuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKFwidGltZVwiLCBvLCBuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB7IDE6IDEgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICB7fSxcbiAgICBbN11cbiAgKSg3KTtcbn0pO1xuIl0sIm5hbWVzIjpbInQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZSIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJDaGFydCIsImEiLCJpIiwibiIsInIiLCJsIiwicyIsInJlcXVpcmUiLCJvIiwiZCIsIkVycm9yIiwiY29kZSIsInUiLCJjYWxsIiwibGVuZ3RoIiwibWF0Y2giLCJwYXJzZUludCIsInNsaWNlIiwicGFyc2VGbG9hdCIsIk1hdGgiLCJyb3VuZCIsInkiLCJ2IiwiaXNOYU4iLCJ4IiwiYyIsImgiLCJmIiwiZyIsInAiLCJtIiwiYiIsImsiLCJtaW4iLCJtYXgiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwiZ2V0UmdiYSIsImdldEhzbGEiLCJnZXRSZ2IiLCJnZXRIc2wiLCJnZXRId2IiLCJnZXRBbHBoYSIsImhleFN0cmluZyIsInJnYlN0cmluZyIsInJnYmFTdHJpbmciLCJwZXJjZW50U3RyaW5nIiwicGVyY2VudGFTdHJpbmciLCJoc2xTdHJpbmciLCJoc2xhU3RyaW5nIiwiaHdiU3RyaW5nIiwia2V5d29yZCIsIlMiLCJ2YWx1ZXMiLCJyZ2IiLCJoc2wiLCJoc3YiLCJod2IiLCJjbXlrIiwiYWxwaGEiLCJzZXRWYWx1ZXMiLCJyZWQiLCJsaWdodG5lc3MiLCJ2YWx1ZSIsInciLCJ3aGl0ZW5lc3MiLCJjeWFuIiwiSlNPTiIsInN0cmluZ2lmeSIsInByb3RvdHlwZSIsInNldFNwYWNlIiwiYXJndW1lbnRzIiwicmdiQXJyYXkiLCJoc2xBcnJheSIsImhzdkFycmF5IiwiaHdiQXJyYXkiLCJjb25jYXQiLCJjbXlrQXJyYXkiLCJyZ2JhQXJyYXkiLCJoc2xhQXJyYXkiLCJzZXRDaGFubmVsIiwiZ3JlZW4iLCJibHVlIiwiaHVlIiwic2F0dXJhdGlvbiIsInNhdHVyYXRpb252IiwiYmxhY2tuZXNzIiwibWFnZW50YSIsInllbGxvdyIsImJsYWNrIiwicmdiTnVtYmVyIiwibHVtaW5vc2l0eSIsInBvdyIsImNvbnRyYXN0IiwibGV2ZWwiLCJkYXJrIiwibGlnaHQiLCJuZWdhdGUiLCJsaWdodGVuIiwiZGFya2VuIiwic2F0dXJhdGUiLCJkZXNhdHVyYXRlIiwid2hpdGVuIiwiYmxhY2tlbiIsImdyZXlzY2FsZSIsImNsZWFyZXIiLCJvcGFxdWVyIiwicm90YXRlIiwibWl4IiwidG9KU09OIiwiY2xvbmUiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnNvbGUiLCJlcnJvciIsInNwYWNlcyIsIm1heGVzIiwiZ2V0VmFsdWVzIiwiY2hhckF0IiwiQXJyYXkiLCJDb2xvciIsIkciLCJXIiwiZmxvb3IiLCJNIiwiQyIsIkQiLCJJIiwiQSIsIlQiLCJQIiwiRiIsIl8iLCJSIiwiViIsIkwiLCJPIiwiQiIsImF0YW4yIiwiUEkiLCJzcXJ0IiwieiIsIk4iLCJjb3MiLCJzaW4iLCJFIiwiSCIsIlUiLCJaIiwiaiIsInEiLCJZIiwiWCIsIksiLCJKIiwicmdiMmhzbCIsInJnYjJoc3YiLCJyZ2IyaHdiIiwicmdiMmNteWsiLCJyZ2Iya2V5d29yZCIsInJnYjJ4eXoiLCJyZ2IybGFiIiwicmdiMmxjaCIsImhzbDJyZ2IiLCJoc2wyaHN2IiwiaHNsMmh3YiIsImhzbDJjbXlrIiwiaHNsMmtleXdvcmQiLCJoc3YycmdiIiwiaHN2MmhzbCIsImhzdjJod2IiLCJoc3YyY215ayIsImhzdjJrZXl3b3JkIiwiaHdiMnJnYiIsImh3YjJoc2wiLCJod2IyaHN2IiwiaHdiMmNteWsiLCJod2Iya2V5d29yZCIsImNteWsycmdiIiwiY215azJoc2wiLCJjbXlrMmhzdiIsImNteWsyaHdiIiwiY215azJrZXl3b3JkIiwia2V5d29yZDJyZ2IiLCJrZXl3b3JkMmhzbCIsImtleXdvcmQyaHN2Iiwia2V5d29yZDJod2IiLCJrZXl3b3JkMmNteWsiLCJrZXl3b3JkMmxhYiIsImtleXdvcmQyeHl6IiwieHl6MnJnYiIsInh5ejJsYWIiLCJ4eXoybGNoIiwibGFiMnh5eiIsImxhYjJyZ2IiLCJsYWIybGNoIiwibGNoMmxhYiIsImxjaDJ4eXoiLCJsY2gycmdiIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3dncmVlbiIsIlEiLCJleGVjIiwiY29udnMiLCJyb3V0ZVNwYWNlIiwic3BhY2UiLCJmb3JFYWNoIiwiQmFyIiwidHlwZSIsIkJ1YmJsZSIsIkRvdWdobnV0IiwiTGluZSIsIlBvbGFyQXJlYSIsIlJhZGFyIiwiaG92ZXIiLCJtb2RlIiwic2NhbGVzIiwieEF4ZXMiLCJwb3NpdGlvbiIsImlkIiwieUF4ZXMiLCJ0b29sdGlwcyIsImNhbGxiYWNrcyIsInRpdGxlIiwibGFiZWwiLCJ4TGFiZWwiLCJ5TGFiZWwiLCJkZWZhdWx0cyIsInNjYXR0ZXIiLCJjb250cm9sbGVycyIsImxpbmUiLCJTY2F0dGVyIiwiaGVscGVycyIsImJhciIsImNhdGVnb3J5UGVyY2VudGFnZSIsImJhclBlcmNlbnRhZ2UiLCJncmlkTGluZXMiLCJvZmZzZXRHcmlkTGluZXMiLCJEYXRhc2V0Q29udHJvbGxlciIsImV4dGVuZCIsImRhdGFFbGVtZW50VHlwZSIsImVsZW1lbnRzIiwiUmVjdGFuZ2xlIiwiaW5pdGlhbGl6ZSIsImdldE1ldGEiLCJnZXRCYXJDb3VudCIsImVhY2giLCJjaGFydCIsImRhdGEiLCJkYXRhc2V0cyIsImdldERhdGFzZXRNZXRhIiwiaXNEYXRhc2V0VmlzaWJsZSIsInVwZGF0ZSIsInVwZGF0ZUVsZW1lbnQiLCJnZXRTY2FsZUZvcklkIiwieEF4aXNJRCIsInlBeGlzSUQiLCJnZXRCYXNlUGl4ZWwiLCJvcHRpb25zIiwicmVjdGFuZ2xlIiwiY3VzdG9tIiwiZ2V0RGF0YXNldCIsIl94U2NhbGUiLCJfeVNjYWxlIiwiX2RhdGFzZXRJbmRleCIsImluZGV4IiwiX2luZGV4IiwiZ2V0UnVsZXIiLCJfbW9kZWwiLCJjYWxjdWxhdGVCYXJYIiwiY2FsY3VsYXRlQmFyWSIsImxhYmVscyIsImRhdGFzZXRMYWJlbCIsImJhc2UiLCJjYWxjdWxhdGVCYXJCYXNlIiwid2lkdGgiLCJjYWxjdWxhdGVCYXJXaWR0aCIsImJhY2tncm91bmRDb2xvciIsImdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCIsImJvcmRlclNraXBwZWQiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwicGl2b3QiLCJzdGFja2VkIiwiTnVtYmVyIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsImdldFBpeGVsRm9yVGljayIsInRpY2tzIiwiZGF0YXNldENvdW50IiwidGlja1dpZHRoIiwiY2F0ZWdvcnlXaWR0aCIsImNhdGVnb3J5U3BhY2luZyIsImZ1bGxCYXJXaWR0aCIsImJhcldpZHRoIiwiYmFyU3BhY2luZyIsImJhclRoaWNrbmVzcyIsImdldEJhckluZGV4IiwiaXNDb21ibyIsImRyYXciLCJ0cmFuc2l0aW9uIiwic2V0SG92ZXJTdHlsZSIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiZ2V0SG92ZXJDb2xvciIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckJvcmRlcldpZHRoIiwicmVtb3ZlSG92ZXJTdHlsZSIsImhvcml6b250YWxCYXIiLCJkYXRhc2V0SW5kZXgiLCJoZWlnaHQiLCJjYWxjdWxhdGVCYXJIZWlnaHQiLCJfY2hhcnQiLCJjdHgiLCJfdmlldyIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiaW5kZXhPZiIsIm1vdmVUbyIsImFwcGx5IiwibGluZVRvIiwiZmlsbCIsInN0cm9rZSIsInRpY2tIZWlnaHQiLCJjYXRlZ29yeUhlaWdodCIsImZ1bGxCYXJIZWlnaHQiLCJiYXJIZWlnaHQiLCJidWJibGUiLCJQb2ludCIsInBvaW50IiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwiTmFOIiwicmFkaXVzIiwiZ2V0UmFkaXVzIiwiaGl0UmFkaXVzIiwic2tpcCIsImhvdmVyUmFkaXVzIiwiZG91Z2hudXQiLCJhbmltYXRpb24iLCJhbmltYXRlUm90YXRlIiwiYW5pbWF0ZVNjYWxlIiwiYXNwZWN0UmF0aW8iLCJsZWdlbmRDYWxsYmFjayIsInB1c2giLCJqb2luIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJtYXAiLCJhcmMiLCJ0ZXh0IiwiaGlkZGVuIiwib25DbGljayIsImN1dG91dFBlcmNlbnRhZ2UiLCJyb3RhdGlvbiIsImNpcmN1bWZlcmVuY2UiLCJpc0FycmF5IiwicGllIiwiQXJjIiwibGlua1NjYWxlcyIsIm5vb3AiLCJnZXRSaW5nSW5kZXgiLCJjaGFydEFyZWEiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJnZXRNYXhCb3JkZXJXaWR0aCIsIm91dGVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0b3RhbCIsImNhbGN1bGF0ZVRvdGFsIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImFicyIsImNvbmZpZyIsImdldFZhbHVlT3JEZWZhdWx0Iiwic2hvd0xpbmUiLCJzaG93TGluZXMiLCJzcGFuR2FwcyIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFzZXQiLCJ0ZW5zaW9uIiwibGluZVRlbnNpb24iLCJfc2NhbGUiLCJfY2hpbGRyZW4iLCJib3JkZXJDYXBTdHlsZSIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwiYm9yZGVySm9pblN0eWxlIiwic3RlcHBlZExpbmUiLCJzdGVwcGVkIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInNjYWxlVG9wIiwic2NhbGVCb3R0b20iLCJzY2FsZVplcm8iLCJ1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwiZ2V0UG9pbnRCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEJhY2tncm91bmRDb2xvciIsImdldFBvaW50Qm9yZGVyQ29sb3IiLCJwb2ludEJvcmRlckNvbG9yIiwiZ2V0UG9pbnRCb3JkZXJXaWR0aCIsInBvaW50Qm9yZGVyV2lkdGgiLCJwb2ludFJhZGl1cyIsInBvaW50SGl0UmFkaXVzIiwiY2FsY3VsYXRlUG9pbnRZIiwicG9pbnRTdHlsZSIsImdldFJpZ2h0VmFsdWUiLCJmaWx0ZXIiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwic3BsaW5lQ3VydmUiLCJwcmV2aW91c0l0ZW0iLCJuZXh0SXRlbSIsImNvbnRyb2xQb2ludFByZXZpb3VzWCIsInByZXZpb3VzIiwiY29udHJvbFBvaW50UHJldmlvdXNZIiwiY29udHJvbFBvaW50TmV4dFgiLCJuZXh0IiwiY29udHJvbFBvaW50TmV4dFkiLCJjYXBCZXppZXJQb2ludHMiLCJwb2ludEhvdmVyUmFkaXVzIiwicG9pbnRIb3ZlckJhY2tncm91bmRDb2xvciIsInBvaW50SG92ZXJCb3JkZXJDb2xvciIsInBvaW50SG92ZXJCb3JkZXJXaWR0aCIsInBvbGFyQXJlYSIsInNjYWxlIiwibGluZUFyYyIsImJlZ2luQXRaZXJvIiwiY291bnQiLCJjb3VudFZpc2libGVFbGVtZW50cyIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJyYWRhciIsIl9sb29wIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwiZHVyYXRpb24iLCJlYXNpbmciLCJvblByb2dyZXNzIiwib25Db21wbGV0ZSIsIkFuaW1hdGlvbiIsIkVsZW1lbnQiLCJjdXJyZW50U3RlcCIsIm51bVN0ZXBzIiwicmVuZGVyIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uQW5pbWF0aW9uQ29tcGxldGUiLCJhbmltYXRpb25TZXJ2aWNlIiwiZnJhbWVEdXJhdGlvbiIsImFuaW1hdGlvbnMiLCJkcm9wRnJhbWVzIiwicmVxdWVzdCIsImFkZEFuaW1hdGlvbiIsImFuaW1hdGluZyIsImNoYXJ0SW5zdGFuY2UiLCJhbmltYXRpb25PYmplY3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb24iLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJyZXF1ZXN0QW5pbUZyYW1lIiwic3RhcnREaWdlc3QiLCJEYXRlIiwibm93IiwiY2FudmFzSGVscGVycyIsImRyYXdQb2ludCIsImRyYXdJbWFnZSIsImNsb3NlUGF0aCIsIlNRUlQyIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiZ2V0U3R5bGUiLCJzdHlsZSIsImdldEF0dHJpYnV0ZSIsIl9jaGFydGpzIiwiaW5pdGlhbCIsImRpc3BsYXkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2FudmFzIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJnZXRDb250ZXh0IiwiQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwiY29uZmlnTWVyZ2UiLCJ0eXBlcyIsImluc3RhbmNlcyIsIkNvbnRyb2xsZXIiLCJ1aWQiLCJfYnVmZmVyZWRSZW5kZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInJldGluYVNjYWxlIiwicmVzcG9uc2l2ZSIsImFkZFJlc2l6ZUxpc3RlbmVyIiwicGFyZW50Tm9kZSIsInJlc2l6ZSIsInBsdWdpbnMiLCJub3RpZnkiLCJiaW5kRXZlbnRzIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImJ1aWxkT3JVcGRhdGVDb250cm9sbGVycyIsImJ1aWxkU2NhbGVzIiwidXBkYXRlTGF5b3V0IiwicmVzZXRFbGVtZW50cyIsImluaXRUb29sVGlwIiwiY2xlYXIiLCJzdG9wIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImdldE1heGltdW1XaWR0aCIsImdldE1heGltdW1IZWlnaHQiLCJvblJlc2l6ZSIsInJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbiIsImR0eXBlIiwiaXNEZWZhdWx0Iiwic2NhbGVTZXJ2aWNlIiwiZ2V0U2NhbGVDb25zdHJ1Y3RvciIsImFkZFNjYWxlc1RvTGF5b3V0IiwibGF5b3V0U2VydmljZSIsImNvbnRyb2xsZXIiLCJ1cGRhdGVJbmRleCIsInJlc2V0IiwidG9vbHRpcCIsIl9kYXRhIiwiYnVpbGRPclVwZGF0ZUVsZW1lbnRzIiwidXBkYXRlRGF0YXNldHMiLCJfYnVmZmVyZWRSZXF1ZXN0IiwibGF6eSIsImVhc2luZ0VmZmVjdHMiLCJib3hlcyIsImdldEVsZW1lbnRBdEV2ZW50IiwiSW50ZXJhY3Rpb24iLCJtb2RlcyIsInNpbmdsZSIsImdldEVsZW1lbnRzQXRFdmVudCIsImludGVyc2VjdCIsImdldEVsZW1lbnRzQXRYQXhpcyIsImdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUiLCJnZXREYXRhc2V0QXRFdmVudCIsIl9tZXRhIiwiZ2VuZXJhdGVMZWdlbmQiLCJkZXN0cm95IiwidW5iaW5kRXZlbnRzIiwiZXZlbnRzIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJ0b0Jhc2U2NEltYWdlIiwidG9EYXRhVVJMIiwiVG9vbHRpcCIsIl9jaGFydEluc3RhbmNlIiwiX29wdGlvbnMiLCJldmVudEhhbmRsZXIiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiaGFuZGxlRXZlbnQiLCJhbmltYXRpb25EdXJhdGlvbiIsImxhc3RBY3RpdmUiLCJhY3RpdmUiLCJvbkhvdmVyIiwiYXJyYXlFcXVhbHMiLCJsaXN0ZW5lcnMiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiYWRkRWxlbWVudHMiLCJjcmVhdGVNZXRhRGF0YXNldCIsImNyZWF0ZU1ldGFEYXRhIiwiYWRkRWxlbWVudEFuZFJlc2V0IiwicmVzeW5jRWxlbWVudHMiLCJpbnNlcnRFbGVtZW50cyIsIm9uRGF0YVB1c2giLCJvbkRhdGFQb3AiLCJwb3AiLCJvbkRhdGFTaGlmdCIsInNoaWZ0Iiwib25EYXRhU3BsaWNlIiwib25EYXRhVW5zaGlmdCIsImluaGVyaXRzIiwiX3N0YXJ0IiwiY29sb3IiLCJ0b29sdGlwUG9zaXRpb24iLCJoYXNWYWx1ZSIsImlzTnVtYmVyIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJrZXlzIiwic2NhbGVNZXJnZSIsImdldFNjYWxlRGVmYXVsdHMiLCJ3aGVyZSIsImZpbmROZXh0V2hlcmUiLCJmaW5kUHJldmlvdXNXaGVyZSIsImNvbnN0cnVjdG9yIiwiX19zdXBlcl9fIiwiaXNGaW5pdGUiLCJhbG1vc3RFcXVhbHMiLCJyZWR1Y2UiLCJORUdBVElWRV9JTkZJTklUWSIsInNpZ24iLCJsb2cxMCIsImxvZyIsIkxOMTAiLCJ0b1JhZGlhbnMiLCJ0b0RlZ3JlZXMiLCJnZXRBbmdsZUZyb21Qb2ludCIsImFuZ2xlIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJhbGlhc1BpeGVsIiwiRVBTSUxPTiIsIm1vZGVsIiwiZGVsdGFLIiwibUsiLCJuaWNlTnVtIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJhc2luIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2FuY2VsQW5pbUZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwibXNDYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImdldFJlbGF0aXZlUG9zaXRpb24iLCJvcmlnaW5hbEV2ZW50IiwiY3VycmVudFRhcmdldCIsInNyY0VsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImFkZEV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25zdHJhaW50V2lkdGgiLCJnZXRDb25zdHJhaW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJjdXJyZW50U3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNsZWFyUmVjdCIsImZvbnRTdHJpbmciLCJsb25nZXN0VGV4dCIsImdhcmJhZ2VDb2xsZWN0IiwiZm9udCIsIm1lYXN1cmVUZXh0IiwibnVtYmVyT2ZMYWJlbExpbmVzIiwiZHJhd1JvdW5kZWRSZWN0YW5nbGUiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiQ2FudmFzR3JhZGllbnQiLCJkZWZhdWx0Q29sb3IiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiY3NzVGV4dCIsInRhYkluZGV4IiwicmVzaXplciIsInRpY2tpbmciLCJjb250ZW50V2luZG93IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiY2FsbENhbGxiYWNrIiwiQ2FudmFzUGF0dGVybiIsImluUmFuZ2UiLCJnZXRDZW50ZXJQb2ludCIsIm5lYXJlc3QiLCJzb3J0IiwiZ2V0QXJlYSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJkZWZhdWx0Rm9udENvbG9yIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJkZWZhdWx0Rm9udFNpemUiLCJkZWZhdWx0Rm9udFN0eWxlIiwiYWRkQm94IiwicmVtb3ZlQm94IiwiaXNIb3Jpem9udGFsIiwiZnVsbFdpZHRoIiwiaG9yaXpvbnRhbCIsIm1pblNpemUiLCJib3giLCJsYXlvdXQiLCJwYWRkaW5nIiwidXNlUG9pbnRTdHlsZSIsImJveFdpZHRoIiwicmV2ZXJzZSIsImxpbmVDYXAiLCJsaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwibGluZUpvaW4iLCJMZWdlbmQiLCJsZWdlbmRIaXRCb3hlcyIsImRvdWdobnV0TW9kZSIsImJlZm9yZVVwZGF0ZSIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwibWFyZ2lucyIsImJlZm9yZVNldERpbWVuc2lvbnMiLCJzZXREaW1lbnNpb25zIiwiYWZ0ZXJTZXREaW1lbnNpb25zIiwiYmVmb3JlQnVpbGRMYWJlbHMiLCJidWlsZExhYmVscyIsImFmdGVyQnVpbGRMYWJlbHMiLCJiZWZvcmVGaXQiLCJmaXQiLCJhZnRlckZpdCIsImFmdGVyVXBkYXRlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsImxlZ2VuZEl0ZW1zIiwiZm9udFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwibGluZVdpZHRocyIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsImNvbHVtbldpZHRocyIsImZvbnRDb2xvciIsInNhdmUiLCJzZXRMaW5lRGFzaCIsInJlc3RvcmUiLCJmaWxsVGV4dCIsInJlZ2lzdGVyIiwiYmVmb3JlSW5pdCIsIl9wbHVnaW5zIiwidW5yZWdpc3RlciIsImdldEFsbCIsIlBsdWdpbkJhc2UiLCJhZnRlckluaXQiLCJiZWZvcmVEcmF3IiwiYWZ0ZXJEcmF3IiwicGx1Z2luU2VydmljZSIsImRyYXdCb3JkZXIiLCJkcmF3T25DaGFydEFyZWEiLCJkcmF3VGlja3MiLCJ0aWNrTWFya0xlbmd0aCIsInplcm9MaW5lV2lkdGgiLCJ6ZXJvTGluZUNvbG9yIiwic2NhbGVMYWJlbCIsImxhYmVsU3RyaW5nIiwibWluUm90YXRpb24iLCJtYXhSb3RhdGlvbiIsIm1pcnJvciIsImF1dG9Ta2lwIiwiYXV0b1NraXBQYWRkaW5nIiwibGFiZWxPZmZzZXQiLCJjYWxsYmFjayIsIlRpY2tzIiwiZm9ybWF0dGVycyIsIlNjYWxlIiwiYmVmb3JlRGF0YUxpbWl0cyIsImRldGVybWluZURhdGFMaW1pdHMiLCJhZnRlckRhdGFMaW1pdHMiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsImJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImNvbnZlcnRUaWNrc1RvTGFiZWxzIiwiYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJiZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24iLCJjYWxjdWxhdGVUaWNrUm90YXRpb24iLCJhZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbiIsInVzZXJDYWxsYmFjayIsImxhYmVsUm90YXRpb24iLCJsb25nZXN0VGV4dENhY2hlIiwieUxhYmVsV2lkdGgiLCJpc0Z1bGxXaWR0aCIsImxvbmdlc3RMYWJlbFdpZHRoIiwiaXNWYWxpZCIsImdldExhYmVsRm9ySW5kZXgiLCJnZXRWYWx1ZUZvclBpeGVsIiwibWF4VGlja3NMaW1pdCIsInplcm9MaW5lSW5kZXgiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImxhYmVsWCIsImxhYmVsWSIsImdsV2lkdGgiLCJnbENvbG9yIiwiZ2xCb3JkZXJEYXNoIiwiZ2xCb3JkZXJEYXNoT2Zmc2V0IiwidHJhbnNsYXRlIiwiY29uc3RydWN0b3JzIiwicmVnaXN0ZXJTY2FsZVR5cGUiLCJ1cGRhdGVTY2FsZURlZmF1bHRzIiwiZ2VuZXJhdG9ycyIsInN0ZXBTaXplIiwibWF4VGlja3MiLCJjZWlsIiwibG9nYXJpdGhtaWMiLCJtaW5Ob3RaZXJvIiwidG9GaXhlZCIsInRvRXhwb25lbnRpYWwiLCJUaXRsZSIsInRpdGxlQmxvY2siLCJ4UGFkZGluZyIsInlQYWRkaW5nIiwieEFsaWduIiwieUFsaWduIiwiYm9keUZvbnRDb2xvciIsIl9ib2R5Rm9udEZhbWlseSIsImJvZHlGb250RmFtaWx5IiwiX2JvZHlGb250U3R5bGUiLCJib2R5Rm9udFN0eWxlIiwiX2JvZHlBbGlnbiIsImJvZHlBbGlnbiIsImJvZHlGb250U2l6ZSIsImJvZHlTcGFjaW5nIiwidGl0bGVGb250Q29sb3IiLCJfdGl0bGVGb250RmFtaWx5IiwidGl0bGVGb250RmFtaWx5IiwiX3RpdGxlRm9udFN0eWxlIiwidGl0bGVGb250U3R5bGUiLCJ0aXRsZUZvbnRTaXplIiwiX3RpdGxlQWxpZ24iLCJ0aXRsZUFsaWduIiwidGl0bGVTcGFjaW5nIiwidGl0bGVNYXJnaW5Cb3R0b20iLCJmb290ZXJGb250Q29sb3IiLCJfZm9vdGVyRm9udEZhbWlseSIsImZvb3RlckZvbnRGYW1pbHkiLCJfZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyRm9udFNpemUiLCJfZm9vdGVyQWxpZ24iLCJmb290ZXJBbGlnbiIsImZvb3RlclNwYWNpbmciLCJmb290ZXJNYXJnaW5Ub3AiLCJjYXJldFNpemUiLCJjb3JuZXJSYWRpdXMiLCJvcGFjaXR5IiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwibXVsdGlLZXlCYWNrZ3JvdW5kIiwiZGlzcGxheUNvbG9ycyIsImJvZHkiLCJiZWZvcmUiLCJsaW5lcyIsImFmdGVyIiwiYmVmb3JlQm9keSIsImFmdGVyQm9keSIsImZvb3RlciIsImNhcmV0UGFkZGluZyIsImVuYWJsZWQiLCJiZWZvcmVUaXRsZSIsImFmdGVyVGl0bGUiLCJiZWZvcmVMYWJlbCIsImxhYmVsQ29sb3IiLCJhZnRlckxhYmVsIiwiYmVmb3JlRm9vdGVyIiwiYWZ0ZXJGb290ZXIiLCJnZXRUaXRsZSIsImdldEJlZm9yZUJvZHkiLCJnZXRCb2R5IiwiZ2V0QWZ0ZXJCb2R5IiwiZ2V0Rm9vdGVyIiwiX2FjdGl2ZSIsImNhcmV0WCIsImNhcmV0WSIsInBvc2l0aW9uZXJzIiwiX2V2ZW50UG9zaXRpb24iLCJpdGVtU29ydCIsImxhYmVsQ29sb3JzIiwiZGF0YVBvaW50cyIsImRyYXdDYXJldCIsImRyYXdUaXRsZSIsImRyYXdCb2R5IiwiZHJhd0Zvb3RlciIsImRyYXdCYWNrZ3JvdW5kIiwiX2xhc3RBY3RpdmUiLCJhdmVyYWdlIiwiaW5MYWJlbFJhbmdlIiwiYmV6aWVyQ3VydmVUbyIsImdldExhYmVscyIsInhMYWJlbHMiLCJ5TGFiZWxzIiwibWluSW5kZXgiLCJtYXhJbmRleCIsIkxpbmVhclNjYWxlQmFzZSIsInBvc2l0aXZlVmFsdWVzIiwibmVnYXRpdmVWYWx1ZXMiLCJyZWxhdGl2ZVBvaW50cyIsImhhbmRsZVRpY2tSYW5nZU9wdGlvbnMiLCJnZXRUaWNrTGltaXQiLCJoYW5kbGVEaXJlY3Rpb25hbENoYW5nZXMiLCJzdGFydCIsImVuZCIsInRpY2tzQXNOdW1iZXJzIiwic3VnZ2VzdGVkTWluIiwic3VnZ2VzdGVkTWF4IiwiZml4ZWRTdGVwU2l6ZSIsInRpY2tWYWx1ZXMiLCJhbmltYXRlIiwiYW5nbGVMaW5lcyIsInNob3dMYWJlbEJhY2tkcm9wIiwiYmFja2Ryb3BDb2xvciIsImJhY2tkcm9wUGFkZGluZ1kiLCJiYWNrZHJvcFBhZGRpbmdYIiwicG9pbnRMYWJlbHMiLCJnZXRWYWx1ZUNvdW50IiwiZHJhd2luZ0FyZWEiLCJnZXRQb2ludFBvc2l0aW9uIiwiZ2V0SW5kZXhBbmdsZSIsInNldENlbnRlclBvaW50IiwibW9tZW50IiwidW5pdHMiLCJuYW1lIiwic3RlcHMiLCJtYXhTdGVwIiwidGltZSIsInBhcnNlciIsImZvcm1hdCIsInVuaXQiLCJkaXNwbGF5Rm9ybWF0IiwiaXNvV2Vla2RheSIsIm1pblVuaXQiLCJkaXNwbGF5Rm9ybWF0cyIsIm1pbGxpc2Vjb25kIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiZ2V0TGFiZWxNb21lbnQiLCJsYWJlbE1vbWVudHMiLCJnZXRMYWJlbERpZmYiLCJsYWJlbERpZmZzIiwiYnVpbGRMYWJlbERpZmZzIiwiZ2V0TW9tZW50U3RhcnRPZiIsInN0YXJ0T2YiLCJ0aWNrVW5pdCIsInBhcnNlVGltZSIsImZpcnN0VGljayIsImxhc3RUaWNrIiwiZGlmZiIsInVuaXRTY2FsZSIsInNjYWxlU2l6ZUluVW5pdHMiLCJ1bml0U3RlcFNpemUiLCJ0aWNrRm9ybWF0RnVuY3Rpb24iLCJhZGQiLCJ0b29sdGlwRm9ybWF0IiwidGlja01vbWVudHMiLCJhc1NlY29uZHMiLCJnZXRNb250aCIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4213\n");

/***/ }),

/***/ 1635:
/***/ ((module) => {

eval("module.exports = {\n  type: \"bar\",\n  data: {\n    labels: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"],\n    datasets: [{\n      label: \"# of Votes\",\n      data: [58, 80, 44, 76, 54, 50, 45, 90, 57, 48, 54, 49, 63, 77, 67, 83, 95],\n      backgroundColor: [\"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\", \"rgba(21, 114, 232, 0.64)\"],\n      //borderColor: [\n      //    'rgba(255,99,132,1)',\n      //    'rgba(54, 162, 235, 1)',\n      //    'rgba(255, 206, 86, 1)',\n      //    'rgba(75, 192, 192, 1)',\n      //    'rgba(153, 102, 255, 1)',\n      //    'rgba(255, 159, 64, 1)'\n      //],\n      borderWidth: 0\n    }]\n  },\n  options: {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        display: false\n      }],\n      yAxes: [{\n        display: false\n      }]\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1ib2lsZXItcGxhdGUvLi9zcmMvbGliL0NoYXJ0L0NvbmZpZy5qcz9hMDE0Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiZGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsIm9wdGlvbnMiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZGlzcGxheSIsInNjYWxlcyIsInhBeGVzIiwieUF4ZXMiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsRUFBQUEsSUFBSSxFQUFFLEtBRFM7QUFFZkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRSxDQUNOLEdBRE0sRUFFTixHQUZNLEVBR04sR0FITSxFQUlOLEdBSk0sRUFLTixHQUxNLEVBTU4sR0FOTSxFQU9OLEdBUE0sRUFRTixHQVJNLEVBU04sR0FUTSxFQVVOLEdBVk0sRUFXTixHQVhNLEVBWU4sR0FaTSxFQWFOLEdBYk0sRUFjTixHQWRNLEVBZU4sR0FmTSxFQWdCTixHQWhCTSxFQWlCTixHQWpCTSxDQURKO0FBb0JKQyxJQUFBQSxRQUFRLEVBQUUsQ0FDUjtBQUNFQyxNQUFBQSxLQUFLLEVBQUUsWUFEVDtBQUVFSCxNQUFBQSxJQUFJLEVBQUUsQ0FDSixFQURJLEVBQ0EsRUFEQSxFQUNJLEVBREosRUFDUSxFQURSLEVBQ1ksRUFEWixFQUNnQixFQURoQixFQUNvQixFQURwQixFQUN3QixFQUR4QixFQUM0QixFQUQ1QixFQUNnQyxFQURoQyxFQUNvQyxFQURwQyxFQUN3QyxFQUR4QyxFQUM0QyxFQUQ1QyxFQUNnRCxFQURoRCxFQUNvRCxFQURwRCxFQUN3RCxFQUR4RCxFQUM0RCxFQUQ1RCxDQUZSO0FBS0VJLE1BQUFBLGVBQWUsRUFBRSxDQUNmLDBCQURlLEVBRWYsMEJBRmUsRUFHZiwwQkFIZSxFQUlmLDBCQUplLEVBS2YsMEJBTGUsRUFNZiwwQkFOZSxFQU9mLDBCQVBlLEVBUWYsMEJBUmUsRUFTZiwwQkFUZSxFQVVmLDBCQVZlLEVBV2YsMEJBWGUsRUFZZiwwQkFaZSxFQWFmLDBCQWJlLEVBY2YsMEJBZGUsRUFlZiwwQkFmZSxFQWdCZiwwQkFoQmUsRUFpQmYsMEJBakJlLENBTG5CO0FBd0JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBQUEsV0FBVyxFQUFFO0FBaENmLEtBRFE7QUFwQk4sR0FGUztBQTJEZkMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BDLElBQUFBLG1CQUFtQixFQUFFLEtBRGQ7QUFFUEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLE9BQU8sRUFBRTtBQURILEtBRkQ7QUFLUEMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VGLFFBQUFBLE9BQU8sRUFBRTtBQURYLE9BREssQ0FERDtBQU1ORyxNQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFSCxRQUFBQSxPQUFPLEVBQUU7QUFEWCxPQURLO0FBTkQ7QUFMRDtBQTNETSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICB0eXBlOiBcImJhclwiLFxuICBkYXRhOiB7XG4gICAgbGFiZWxzOiBbXG4gICAgICBcIkFcIixcbiAgICAgIFwiQlwiLFxuICAgICAgXCJDXCIsXG4gICAgICBcIkRcIixcbiAgICAgIFwiRVwiLFxuICAgICAgXCJGXCIsXG4gICAgICBcIkdcIixcbiAgICAgIFwiSFwiLFxuICAgICAgXCJJXCIsXG4gICAgICBcIkpcIixcbiAgICAgIFwiS1wiLFxuICAgICAgXCJMXCIsXG4gICAgICBcIk1cIixcbiAgICAgIFwiTlwiLFxuICAgICAgXCJPXCIsXG4gICAgICBcIlBcIixcbiAgICAgIFwiUVwiLFxuICAgIF0sXG4gICAgZGF0YXNldHM6IFtcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IFwiIyBvZiBWb3Rlc1wiLFxuICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgNTgsIDgwLCA0NCwgNzYsIDU0LCA1MCwgNDUsIDkwLCA1NywgNDgsIDU0LCA0OSwgNjMsIDc3LCA2NywgODMsIDk1LFxuICAgICAgICBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgICAgXCJyZ2JhKDIxLCAxMTQsIDIzMiwgMC42NClcIixcbiAgICAgICAgICBcInJnYmEoMjEsIDExNCwgMjMyLCAwLjY0KVwiLFxuICAgICAgICAgIFwicmdiYSgyMSwgMTE0LCAyMzIsIDAuNjQpXCIsXG4gICAgICAgIF0sXG4gICAgICAgIC8vYm9yZGVyQ29sb3I6IFtcbiAgICAgICAgLy8gICAgJ3JnYmEoMjU1LDk5LDEzMiwxKScsXG4gICAgICAgIC8vICAgICdyZ2JhKDU0LCAxNjIsIDIzNSwgMSknLFxuICAgICAgICAvLyAgICAncmdiYSgyNTUsIDIwNiwgODYsIDEpJyxcbiAgICAgICAgLy8gICAgJ3JnYmEoNzUsIDE5MiwgMTkyLCAxKScsXG4gICAgICAgIC8vICAgICdyZ2JhKDE1MywgMTAyLCAyNTUsIDEpJyxcbiAgICAgICAgLy8gICAgJ3JnYmEoMjU1LCAxNTksIDY0LCAxKSdcbiAgICAgICAgLy9dLFxuICAgICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAgb3B0aW9uczoge1xuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgIGxlZ2VuZDoge1xuICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgfSxcbiAgICBzY2FsZXM6IHtcbiAgICAgIHhBeGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB5QXhlczogW1xuICAgICAgICB7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0sXG59O1xuIl0sImZpbGUiOiIxNjM1LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1635\n");

/***/ }),

/***/ 5089:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4015);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1667);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(5418), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*Table Content\\n =================================================\\n - User Date\\n - Side_bar\\n - Right_side\\n - breadcrumb\\n - CHART_BOX\\n - social-box\\n - Footer\\n - BUTTONS_PAGE\\n\\n ================================================\\n */\\n.user_data {\\n  text-align: center;\\n}\\n.user_data span {\\n  display: block;\\n}\\n.easyPieChart {\\n  margin: 0 auto;\\n}\\n.height_box {\\n  height: 130px;\\n}\\n.height_box {\\n  height: 140px;\\n}\\n.height_statistics {\\n  height: 360px;\\n}\\n.card-blue {\\n  background: #1269db;\\n}\\n.vmap-wrap {\\n  height: 300px;\\n}\\n.text_country h2 {\\n  font-weight: normal;\\n  text-transform: uppercase;\\n  font-size: 15px;\\n  margin-bottom: 10px;\\n}\\n.text_country h2 i {\\n  margin-right: 8px;\\n}\\n.user_area {\\n  position: relative;\\n}\\n.profile_wid_user {\\n  text-align: center;\\n}\\n.profile-widget-head {\\n  background-image: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");\\n  background-size: cover;\\n  -webkit-border-radius: 4px 4px 0 0;\\n  -moz-border-radius: 4px 4px 0 0;\\n  -ms-border-radius: 4px 4px 0 0;\\n  -o-border-radius: 4px 4px 0 0;\\n  border-radius: 4px 4px 0 0;\\n  float: left;\\n  padding: 30px 0 55px;\\n  position: relative;\\n  text-align: center;\\n  width: 100%;\\n  z-index: 0;\\n  margin-bottom: 50px;\\n}\\n.profile-widget-head:before {\\n  -webkit-border-radius: 4px 4px 0 0;\\n  -moz-border-radius: 4px 4px 0 0;\\n  -ms-border-radius: 4px 4px 0 0;\\n  -o-border-radius: 4px 4px 0 0;\\n  border-radius: 4px 4px 0 0;\\n  content: \\\"\\\";\\n  height: 100%;\\n  left: 0;\\n  opacity: 0.8;\\n  position: absolute;\\n  top: 0;\\n  width: 100%;\\n  z-index: -1;\\n  background: #1269db;\\n  color: #fff;\\n}\\n.profile-widget-head > h3 {\\n  color: #fff;\\n  font-size: 21px;\\n  font-weight: bold;\\n}\\n.profile-widget-head > i {\\n  color: #fff;\\n  font-size: 13px;\\n  font-style: normal;\\n  margin-top: 6px;\\n}\\n.profile-widget-head > span {\\n  border: 3px solid #fff;\\n  -webkit-border-radius: 50%;\\n  -moz-border-radius: 50%;\\n  -ms-border-radius: 50%;\\n  -o-border-radius: 50%;\\n  border-radius: 50%;\\n  bottom: 0;\\n  left: 50%;\\n  margin-bottom: -35px;\\n  margin-left: -40px;\\n  overflow: hidden;\\n  position: absolute;\\n}\\n.profile-widget-head > span > img {\\n  float: left;\\n  width: 70px;\\n  height: 70px;\\n}\\n.profile_wid_user > h4 {\\n  font-size: 18px;\\n  font-weight: bold;\\n  letter-spacing: 0.3px;\\n  margin: 0 0 15px;\\n}\\n.profile_wid_user > span {\\n  -webkit-border-radius: 21px;\\n  -moz-border-radius: 21px;\\n  -ms-border-radius: 21px;\\n  -o-border-radius: 21px;\\n  border-radius: 21px;\\n  color: #fff;\\n  display: table;\\n  margin: 0 auto;\\n  padding: 7px 16px;\\n  background: #1269db;\\n}\\n.profile_wid_user > span > i {\\n  margin-right: 7px;\\n}\\n.profile_wid_user > p {\\n  margin-top: 15px;\\n  padding: 0 22px;\\n  text-align: center;\\n}\\n.profile_wid_user > p {\\n  margin-top: 15px;\\n  padding: 0 22px;\\n  margin-bottom: 9px;\\n  text-align: center;\\n}\\n.profile_wid_user > a {\\n  color: #a5a5a5;\\n  float: left;\\n  font-size: 15px;\\n  font-weight: normal;\\n  letter-spacing: 0.3px;\\n  margin-bottom: 20px;\\n  margin-top: 8px;\\n  text-align: center;\\n  width: 100%;\\n  -webkit-transition: all 0.4s ease 0s;\\n  -moz-transition: all 0.4s ease 0s;\\n  -ms-transition: all 0.4s ease 0s;\\n  -o-transition: all 0.4s ease 0s;\\n  transition: all 0.4s ease 0s;\\n}\\n.ep_1 {\\n  text-align: center;\\n}\\n.social-btns {\\n  float: right;\\n  list-style: none outside none;\\n  margin: -35px 0 0;\\n  padding: 0;\\n}\\n.social-btns > li {\\n  float: right;\\n  list-style: none outside none;\\n  margin-left: 6px;\\n}\\n.social-btns > li > a {\\n  float: left;\\n}\\n.profile_wid_user > .social-btns {\\n  display: table;\\n  float: none;\\n  margin: 0 auto 40px;\\n}\\n\\n.social-btns > li > a > i {\\n  -webkit-border-radius: 1px;\\n  -moz-border-radius: 1px;\\n  -ms-border-radius: 1px;\\n  -o-border-radius: 1px;\\n  border-radius: 1px;\\n  color: #fff;\\n  float: left;\\n  font-size: 16px;\\n  height: 31px;\\n  line-height: 31px;\\n  text-align: center;\\n  -webkit-transition: all 0.4s ease 0s;\\n  -moz-transition: all 0.4s ease 0s;\\n  -ms-transition: all 0.4s ease 0s;\\n  -o-transition: all 0.4s ease 0s;\\n  transition: all 0.4s ease 0s;\\n  width: 31px;\\n}\\n.social-btns > li > a > i.fa-facebook {\\n  background: #3b5998;\\n}\\n.social-btns > li > a > i.fa-google-plus {\\n  background: #dd4b39;\\n}\\n.social-btns > li > a > i.fa-twitter {\\n  background: #439ed6;\\n}\\n\\n.task_box {\\n  text-align: center;\\n  border-bottom: 1px solid #e5ebec;\\n}\\n\\n.task_num {\\n  padding: 15px;\\n  display: inline-block;\\n}\\n.bor_space {\\n  padding: 0px 0 20px;\\n  border-bottom: 1px solid #e5ebec;\\n}\\n.task-assign {\\n  margin-top: 20px;\\n}\\n.task-assign ul.list-inline {\\n  margin: 20px 0;\\n}\\n.task-assign ul.list-inline li {\\n  padding: 0 12px;\\n  display: inline-block;\\n}\\n.task-assign ul.list-inline li a {\\n  line-height: 30px;\\n  text-align: center;\\n}\\n.task-assign ul.list-inline li a,\\n.task-assign ul.list-inline li img {\\n  width: 45px;\\n  height: 45px;\\n  border-radius: 100%;\\n}\\n@media (max-width: 991px) {\\n  .container_full {\\n    margin-top: 60px;\\n  }\\n  .vmap-wrap {\\n    height: 200px;\\n  }\\n}\\n\\n.container-pie-chart {\\n  width: 42%;\\n  margin: 15px auto;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/Pages/DashBoard/DashBoard.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;EAYE;AACF;EACE,kBAAkB;AACpB;AACA;EACE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;AACA;EACE,mBAAmB;AACrB;AACA;EACE,aAAa;AACf;AACA;EACE,mBAAmB;EACnB,yBAAyB;EACzB,eAAe;EACf,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,yDAA6D;EAC7D,sBAAsB;EACtB,kCAAkC;EAClC,+BAA+B;EAC/B,8BAA8B;EAC9B,6BAA6B;EAC7B,0BAA0B;EAC1B,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,mBAAmB;AACrB;AACA;EACE,kCAAkC;EAClC,+BAA+B;EAC/B,8BAA8B;EAC9B,6BAA6B;EAC7B,0BAA0B;EAC1B,WAAW;EACX,YAAY;EACZ,OAAO;EACP,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,WAAW;EACX,WAAW;EACX,mBAAmB;EACnB,WAAW;AACb;AACA;EACE,WAAW;EACX,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,sBAAsB;EACtB,0BAA0B;EAC1B,uBAAuB;EACvB,sBAAsB;EACtB,qBAAqB;EACrB,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,oBAAoB;EACpB,kBAAkB;EAClB,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;AACA;EACE,eAAe;EACf,iBAAiB;EACjB,qBAAqB;EACrB,gBAAgB;AAClB;AACA;EACE,2BAA2B;EAC3B,wBAAwB;EACxB,uBAAuB;EACvB,sBAAsB;EACtB,mBAAmB;EACnB,WAAW;EACX,cAAc;EACd,cAAc;EACd,iBAAiB;EACjB,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,kBAAkB;EAClB,kBAAkB;AACpB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,mBAAmB;EACnB,qBAAqB;EACrB,mBAAmB;EACnB,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,oCAAoC;EACpC,iCAAiC;EACjC,gCAAgC;EAChC,+BAA+B;EAC/B,4BAA4B;AAC9B;AACA;EACE,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,6BAA6B;EAC7B,iBAAiB;EACjB,UAAU;AACZ;AACA;EACE,YAAY;EACZ,6BAA6B;EAC7B,gBAAgB;AAClB;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;EACd,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,0BAA0B;EAC1B,uBAAuB;EACvB,sBAAsB;EACtB,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,WAAW;EACX,eAAe;EACf,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;EAClB,oCAAoC;EACpC,iCAAiC;EACjC,gCAAgC;EAChC,+BAA+B;EAC/B,4BAA4B;EAC5B,WAAW;AACb;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,qBAAqB;AACvB;AACA;EACE,mBAAmB;EACnB,gCAAgC;AAClC;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB;AACA;EACE,eAAe;EACf,qBAAqB;AACvB;AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE;IACE,gBAAgB;EAClB;EACA;IACE,aAAa;EACf;AACF;;AAEA;EACE,UAAU;EACV,iBAAiB;AACnB\",\"sourcesContent\":[\"/*Table Content\\n =================================================\\n - User Date\\n - Side_bar\\n - Right_side\\n - breadcrumb\\n - CHART_BOX\\n - social-box\\n - Footer\\n - BUTTONS_PAGE\\n\\n ================================================\\n */\\n.user_data {\\n  text-align: center;\\n}\\n.user_data span {\\n  display: block;\\n}\\n.easyPieChart {\\n  margin: 0 auto;\\n}\\n.height_box {\\n  height: 130px;\\n}\\n.height_box {\\n  height: 140px;\\n}\\n.height_statistics {\\n  height: 360px;\\n}\\n.card-blue {\\n  background: #1269db;\\n}\\n.vmap-wrap {\\n  height: 300px;\\n}\\n.text_country h2 {\\n  font-weight: normal;\\n  text-transform: uppercase;\\n  font-size: 15px;\\n  margin-bottom: 10px;\\n}\\n.text_country h2 i {\\n  margin-right: 8px;\\n}\\n.user_area {\\n  position: relative;\\n}\\n.profile_wid_user {\\n  text-align: center;\\n}\\n.profile-widget-head {\\n  background-image: url(../../../public/images/carousal-bg.jpg);\\n  background-size: cover;\\n  -webkit-border-radius: 4px 4px 0 0;\\n  -moz-border-radius: 4px 4px 0 0;\\n  -ms-border-radius: 4px 4px 0 0;\\n  -o-border-radius: 4px 4px 0 0;\\n  border-radius: 4px 4px 0 0;\\n  float: left;\\n  padding: 30px 0 55px;\\n  position: relative;\\n  text-align: center;\\n  width: 100%;\\n  z-index: 0;\\n  margin-bottom: 50px;\\n}\\n.profile-widget-head:before {\\n  -webkit-border-radius: 4px 4px 0 0;\\n  -moz-border-radius: 4px 4px 0 0;\\n  -ms-border-radius: 4px 4px 0 0;\\n  -o-border-radius: 4px 4px 0 0;\\n  border-radius: 4px 4px 0 0;\\n  content: \\\"\\\";\\n  height: 100%;\\n  left: 0;\\n  opacity: 0.8;\\n  position: absolute;\\n  top: 0;\\n  width: 100%;\\n  z-index: -1;\\n  background: #1269db;\\n  color: #fff;\\n}\\n.profile-widget-head > h3 {\\n  color: #fff;\\n  font-size: 21px;\\n  font-weight: bold;\\n}\\n.profile-widget-head > i {\\n  color: #fff;\\n  font-size: 13px;\\n  font-style: normal;\\n  margin-top: 6px;\\n}\\n.profile-widget-head > span {\\n  border: 3px solid #fff;\\n  -webkit-border-radius: 50%;\\n  -moz-border-radius: 50%;\\n  -ms-border-radius: 50%;\\n  -o-border-radius: 50%;\\n  border-radius: 50%;\\n  bottom: 0;\\n  left: 50%;\\n  margin-bottom: -35px;\\n  margin-left: -40px;\\n  overflow: hidden;\\n  position: absolute;\\n}\\n.profile-widget-head > span > img {\\n  float: left;\\n  width: 70px;\\n  height: 70px;\\n}\\n.profile_wid_user > h4 {\\n  font-size: 18px;\\n  font-weight: bold;\\n  letter-spacing: 0.3px;\\n  margin: 0 0 15px;\\n}\\n.profile_wid_user > span {\\n  -webkit-border-radius: 21px;\\n  -moz-border-radius: 21px;\\n  -ms-border-radius: 21px;\\n  -o-border-radius: 21px;\\n  border-radius: 21px;\\n  color: #fff;\\n  display: table;\\n  margin: 0 auto;\\n  padding: 7px 16px;\\n  background: #1269db;\\n}\\n.profile_wid_user > span > i {\\n  margin-right: 7px;\\n}\\n.profile_wid_user > p {\\n  margin-top: 15px;\\n  padding: 0 22px;\\n  text-align: center;\\n}\\n.profile_wid_user > p {\\n  margin-top: 15px;\\n  padding: 0 22px;\\n  margin-bottom: 9px;\\n  text-align: center;\\n}\\n.profile_wid_user > a {\\n  color: #a5a5a5;\\n  float: left;\\n  font-size: 15px;\\n  font-weight: normal;\\n  letter-spacing: 0.3px;\\n  margin-bottom: 20px;\\n  margin-top: 8px;\\n  text-align: center;\\n  width: 100%;\\n  -webkit-transition: all 0.4s ease 0s;\\n  -moz-transition: all 0.4s ease 0s;\\n  -ms-transition: all 0.4s ease 0s;\\n  -o-transition: all 0.4s ease 0s;\\n  transition: all 0.4s ease 0s;\\n}\\n.ep_1 {\\n  text-align: center;\\n}\\n.social-btns {\\n  float: right;\\n  list-style: none outside none;\\n  margin: -35px 0 0;\\n  padding: 0;\\n}\\n.social-btns > li {\\n  float: right;\\n  list-style: none outside none;\\n  margin-left: 6px;\\n}\\n.social-btns > li > a {\\n  float: left;\\n}\\n.profile_wid_user > .social-btns {\\n  display: table;\\n  float: none;\\n  margin: 0 auto 40px;\\n}\\n\\n.social-btns > li > a > i {\\n  -webkit-border-radius: 1px;\\n  -moz-border-radius: 1px;\\n  -ms-border-radius: 1px;\\n  -o-border-radius: 1px;\\n  border-radius: 1px;\\n  color: #fff;\\n  float: left;\\n  font-size: 16px;\\n  height: 31px;\\n  line-height: 31px;\\n  text-align: center;\\n  -webkit-transition: all 0.4s ease 0s;\\n  -moz-transition: all 0.4s ease 0s;\\n  -ms-transition: all 0.4s ease 0s;\\n  -o-transition: all 0.4s ease 0s;\\n  transition: all 0.4s ease 0s;\\n  width: 31px;\\n}\\n.social-btns > li > a > i.fa-facebook {\\n  background: #3b5998;\\n}\\n.social-btns > li > a > i.fa-google-plus {\\n  background: #dd4b39;\\n}\\n.social-btns > li > a > i.fa-twitter {\\n  background: #439ed6;\\n}\\n\\n.task_box {\\n  text-align: center;\\n  border-bottom: 1px solid #e5ebec;\\n}\\n\\n.task_num {\\n  padding: 15px;\\n  display: inline-block;\\n}\\n.bor_space {\\n  padding: 0px 0 20px;\\n  border-bottom: 1px solid #e5ebec;\\n}\\n.task-assign {\\n  margin-top: 20px;\\n}\\n.task-assign ul.list-inline {\\n  margin: 20px 0;\\n}\\n.task-assign ul.list-inline li {\\n  padding: 0 12px;\\n  display: inline-block;\\n}\\n.task-assign ul.list-inline li a {\\n  line-height: 30px;\\n  text-align: center;\\n}\\n.task-assign ul.list-inline li a,\\n.task-assign ul.list-inline li img {\\n  width: 45px;\\n  height: 45px;\\n  border-radius: 100%;\\n}\\n@media (max-width: 991px) {\\n  .container_full {\\n    margin-top: 60px;\\n  }\\n  .vmap-wrap {\\n    height: 200px;\\n  }\\n}\\n\\n.container-pie-chart {\\n  width: 42%;\\n  margin: 15px auto;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5089\n");

/***/ }),

/***/ 7632:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3379);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7795);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(569);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3565);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9216);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4589);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5089);\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\nif (true) {\n  if (!_node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var isNamedExport = !_node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals;\n    var oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals;\n\n    module.hot.accept(\n      5089,\n      __WEBPACK_OUTDATED_DEPENDENCIES__ => { /* harmony import */ _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5089);\n(function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals;\n\n              update(_node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\n\n       /* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_DashBoard_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYzMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUNBLE1BQXFHO0FBQ3JHLE1BQTJGO0FBQzNGLE1BQWtHO0FBQ2xHLE1BQXFIO0FBQ3JILE1BQThHO0FBQzlHLE1BQThHO0FBQzlHLE1BQTZHO0FBQzdHO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCLHFHQUFtQjtBQUMvQyx3QkFBd0Isa0hBQWE7O0FBRXJDLHVCQUF1Qix1R0FBYTtBQUNwQztBQUNBLGlCQUFpQiwrRkFBTTtBQUN2Qiw2QkFBNkIsc0dBQWtCOztBQUUvQyxhQUFhLDBHQUFHLENBQUMsMEZBQU87OztBQUd4QixJQUFJLElBQVU7QUFDZCxPQUFPLGlHQUFjLElBQUksVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QixpR0FBYztBQUN2QyxvQ0FBb0MsK0VBQVcsR0FBRyxpR0FBYzs7QUFFaEUsSUFBSSxpQkFBaUI7QUFDckIsTUFBTSxJQUFnRTtBQUN0RSxNQUFNO0FBQUE7QUFDTixzREFBc0QsK0VBQVcsR0FBRyxpR0FBYztBQUNsRixnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQSwwQ0FBMEMsK0VBQVcsR0FBRyxpR0FBYzs7QUFFdEUscUJBQXFCLDBGQUFPO0FBQzVCLE9BQU87QUFDUDtBQUNBOztBQUVBLEVBQUUsVUFBVTtBQUNaO0FBQ0EsR0FBRztBQUNIOzs7QUFHK0U7QUFDL0UsT0FBTyxzRUFBZSwwRkFBTyxJQUFJLGlHQUFjLEdBQUcsaUdBQWMsWUFBWSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtYm9pbGVyLXBsYXRlLy4vc3JjL1BhZ2VzL0Rhc2hCb2FyZC9EYXNoQm9hcmQuY3NzP2E3ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Rhc2hCb2FyZC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2FscyB8fCBtb2R1bGUuaG90LmludmFsaWRhdGUpIHtcbiAgICB2YXIgaXNFcXVhbExvY2FscyA9IGZ1bmN0aW9uIGlzRXF1YWxMb2NhbHMoYSwgYiwgaXNOYW1lZEV4cG9ydCkge1xuICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHA7XG5cbiAgZm9yIChwIGluIGEpIHtcbiAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAocCBpbiBiKSB7XG4gICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFhW3BdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBpc05hbWVkRXhwb3J0ID0gIWNvbnRlbnQubG9jYWxzO1xuICAgIHZhciBvbGRMb2NhbHMgPSBpc05hbWVkRXhwb3J0ID8gbmFtZWRFeHBvcnQgOiBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGFzaEJvYXJkLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBpc05hbWVkRXhwb3J0ID8gbmFtZWRFeHBvcnQgOiBjb250ZW50LmxvY2FscywgaXNOYW1lZEV4cG9ydCkpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGlzTmFtZWRFeHBvcnQgPyBuYW1lZEV4cG9ydCA6IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGFzaEJvYXJkLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7632\n");

/***/ }),

/***/ 5418:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "1728c7b1d3d915faa75f.jpg";

/***/ })

}]);