"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkreact_boiler_plate"] = self["webpackChunkreact_boiler_plate"] || []).push([[553],{

/***/ 5553:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ Users_Users)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(4942);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 5 modules\nvar slicedToArray = __webpack_require__(8152);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./src/utils/Request.js\nvar Request = __webpack_require__(6195);\n// EXTERNAL MODULE: ./src/utils/urls.js\nvar urls = __webpack_require__(2418);\n// EXTERNAL MODULE: ./src/actions/users.js\nvar actions_users = __webpack_require__(5302);\n// EXTERNAL MODULE: ./src/Components/SideBar/SideBar.js\nvar SideBar = __webpack_require__(4973);\n// EXTERNAL MODULE: ./src/Components/BreadCrumb/BreadCrumb.js\nvar BreadCrumb = __webpack_require__(6096);\n// EXTERNAL MODULE: ./src/utils/common.js\nvar common = __webpack_require__(2667);\n;// CONCATENATED MODULE: ./src/Pages/Users/AddUserForm.js\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nvar initialFormData = Object.freeze({\n  address1: \"\",\n  address2: \"\",\n  dob: \"1985-12-07\",\n  email: \"\",\n  firstName: \"\",\n  landmark: \"\",\n  langKey: \"en\",\n  lastName: \"\",\n  otp: \"\",\n  phoneNumber: \"\",\n  pincode: \"\",\n  qrCodeId: \"\",\n  role: \"\",\n  tenantId: 0,\n  userName: \"\"\n});\n\nvar AddUserForm = function AddUserForm(props) {\n  var editUserData = props.editUserData,\n      userToBeEdit = props.userToBeEdit,\n      closePopUpHandler = props.closePopUpHandler,\n      fetchUsersData = props.fetchUsersData;\n\n  var _useState = (0,react.useState)(initialFormData),\n      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n      formData = _useState2[0],\n      updateFormData = _useState2[1];\n\n  var _useState3 = (0,react.useState)(initialFormData),\n      _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n      editFormData = _useState4[0],\n      updateEditFormData = _useState4[1];\n\n  var _useState5 = (0,react.useState)([]),\n      _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n      errors = _useState6[0],\n      updateError = _useState6[1];\n\n  var _useState7 = (0,react.useState)(\"\"),\n      _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n      success = _useState8[0],\n      updateSuccess = _useState8[1];\n\n  (0,react.useEffect)(function () {\n    if (editUserData) {\n      updateFormData(_objectSpread({}, editUserData));\n    }\n  }, [editUserData]);\n\n  var handleChange = function handleChange(event) {\n    updateFormData(_objectSpread(_objectSpread({}, formData), {}, (0,defineProperty/* default */.Z)({}, event.target.name, event.target.value)));\n  };\n\n  var updateUser = function updateUser() {\n    var api = new Request/* default */.Z(\"\", successHandler, errorHandler, false);\n    return api.post(\"\".concat(urls/* default.login.BASE_URL */.Z.login.BASE_URL).concat(urls/* default.User.UPDATE_USER */.Z.User.UPDATE_USER), formData);\n  };\n\n  var errorHandler = function errorHandler(error) {\n    // {\"timestamp\":\"2021-09-18T06:25:35.505+00:00\",\"status\":401,\"error\":\"Unauthorized\",\"message\":\"\",\"path\":\"/api/users\"}\n    var errors = [];\n\n    if (error && error.status == 400) {\n      if (error.fieldErrors && error.fieldErrors instanceof Array) {\n        error.fieldErrors.forEach(function (item) {\n          return errors.push(\"\".concat(item.field, \": \").concat(item.message));\n        });\n      }\n\n      if (errors.length > 0) {\n        updateError(errors);\n        window.scrollTo(100, 100);\n      }\n    } else if (error && error.status == 401) {\n      updateError([error.error]);\n      window.scrollTo(100, 100);\n    }\n  };\n\n  var successHandler = function successHandler(data) {\n    if (!data.success) {\n      updateError([data.msg]);\n    } else {\n      updateError([]);\n      updateSuccess(data.msg);\n      closePopUpHandler();\n      (0,common/* removeOverlay */.rG)();\n      fetchUsersData();\n    }\n  };\n\n  var submitFormHandler = function submitFormHandler(event) {\n    event.preventDefault();\n\n    if (editUserData) {\n      updateUser();\n    }\n\n    formData.userName = formData.phoneNumber; // pricingToken;\n\n    var api = new Request/* default */.Z(\"\", successHandler, errorHandler, false);\n    return api.post(urls/* default.login.BASE_URL */.Z.login.BASE_URL + urls/* default.User.CREATE_NEW_USER */.Z.User.CREATE_NEW_USER, formData);\n  };\n\n  var errorHTML = \"\";\n  var errorStyles = \"\";\n  var successStyles = \"\";\n\n  if (errors.length > 0) {\n    errorHTML = errors.map(function (val) {\n      return /*#__PURE__*/react.createElement(\"li\", {\n        key: val\n      }, val);\n    });\n    errorStyles = {\n      color: \"red\",\n      fontSize: \"14px\",\n      marginTop: \"26px\"\n    };\n  } else {\n    successStyles = {\n      color: \"green\",\n      fontSize: \"14px\",\n      marginTop: \"26px\"\n    };\n  }\n\n  console.log(\"editUserData\", editUserData);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal right fade show\",\n    id: \"exampleModal\",\n    tabindex: \"-1\",\n    role: \"dialog\",\n    \"aria-labelledby\": \"myModalLabel2\",\n    style: {\n      display: \"block\",\n      paddingRight: \"15px\"\n    }\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-dialog\",\n    role: \"document\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-content\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-header\"\n  }, /*#__PURE__*/react.createElement(\"h5\", {\n    className: \"modal-title\",\n    id: \"exampleModalLabel\"\n  }, \"Add User\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"close\",\n    \"data-dismiss\": \"modal\",\n    \"aria-label\": \"Close\",\n    onClick: closePopUpHandler\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-body\"\n  }, /*#__PURE__*/react.createElement(\"form\", {\n    onSubmit: submitFormHandler\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"First Name\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"First Name\",\n    name: \"firstName\",\n    value: formData && formData.firstName,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Last Name\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Last Name\",\n    name: \"lastName\",\n    value: formData && formData.lastName,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Address1\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Address1\",\n    name: \"address1\",\n    value: formData && formData.address1,\n    required: true,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Address2\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Address2\",\n    name: \"address2\",\n    value: formData && formData.address2,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Land Mark\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Land Mark\",\n    name: \"landmark\",\n    value: formData && formData.landmark,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Pin Code\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"number\",\n    className: \"form-control\",\n    placeholder: \"Pin Code\",\n    name: \"pincode\",\n    value: formData && formData.pincode,\n    required: true,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Email Id\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"email\",\n    className: \"form-control\",\n    placeholder: \"Email Id\",\n    name: \"email\",\n    value: formData && formData.email,\n    required: true,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"DOB\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"date\",\n    className: \"form-control\",\n    name: \"dob\",\n    value: formData && formData.dob,\n    min: \"1950-01-01\",\n    max: \"2000-12-31\",\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Mobile\"), /*#__PURE__*/react.createElement(\"input\", {\n    type: \"number\",\n    className: \"form-control\",\n    placeholder: \"Mobile\",\n    name: \"phoneNumber\",\n    value: formData && formData.phoneNumber,\n    required: true,\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleFormControlSelect1\"\n  }, \"User Role\"), /*#__PURE__*/react.createElement(\"select\", {\n    className: \"form-control\",\n    name: \"role\",\n    required: true,\n    onChange: handleChange\n  }, /*#__PURE__*/react.createElement(\"option\", {\n    value: \"\"\n  }, \"Choose Role\"), /*#__PURE__*/react.createElement(\"option\", {\n    value: \"PTM_VENDOR\",\n    selected: editUserData && editUserData.role == \"PTM_VENDOR\" ? true : false\n  }, \"Vendor\"), /*#__PURE__*/react.createElement(\"option\", {\n    value: \"PTM_SUB_ADMIN\",\n    selected: editUserData && editUserData.role == \"PTM_SUB_ADMIN\" ? true : false\n  }, \"Sub Admin\"))))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-footer\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary themebtn transparent\",\n    \"data-dismiss\": \"modal\",\n    onClick: closePopUpHandler\n  }, \"Close\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary themebtn\"\n  }, editUserData ? \"Update User\" : \"Save User\")), /*#__PURE__*/react.createElement(\"div\", null, errorHTML && errorStyles ? /*#__PURE__*/react.createElement(\"ul\", {\n    style: errorStyles\n  }, errorHTML) : success && successStyles ? /*#__PURE__*/react.createElement(\"div\", {\n    style: successStyles\n  }, success) : \"\"))))));\n};\n\n/* harmony default export */ const Users_AddUserForm = (AddUserForm);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n;// CONCATENATED MODULE: ./src/Pages/Users/PermissionForm.js\n\n\n\nfunction PermissionForm_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction PermissionForm_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PermissionForm_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PermissionForm_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\nvar PermissionForm = function PermissionForm(props) {\n  var userId = props.userId,\n      closePopUpHandler = props.closePopUpHandler;\n\n  var _useState = (0,react.useState)(\"\"),\n      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n      permissions = _useState2[0],\n      setPermissions = _useState2[1];\n\n  var _useState3 = (0,react.useState)({\n    error: \"\",\n    success: \"\"\n  }),\n      _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var fetchPermissions = function fetchPermissions() {\n    var successHandler = function successHandler(res) {\n      // console.log(\"success\", res);\n      if (res) {\n        setPermissions(res);\n        updateFormData(res.activePermissions);\n      }\n    };\n\n    var options = {\n      headers: {\n        Authorization: (0,common/* getAuthToken */.bW)(),\n        \"api-Authorization\": (0,common/* getAuthToken */.bW)(\"api-Authorization\")\n      }\n    };\n    var promise1 = axios_default().get(\"\".concat(urls/* default.login.BASE_URL */.Z.login.BASE_URL).concat(urls/* default.User.GET_ALL_PERMISISSIONS */.Z.User.GET_ALL_PERMISISSIONS), options)[\"catch\"](function () {\n      return \"\";\n    });\n    var promise2 = axios_default().get(\"\".concat(urls/* default.login.BASE_URL */.Z.login.BASE_URL).concat(urls/* default.User.MANAGE_USER_PERMISSIONS */.Z.User.MANAGE_USER_PERMISSIONS, \"?userName=\").concat(userId), options)[\"catch\"](function () {\n      return \"\";\n    });\n    axios_default().all([promise1, promise2]).then(axios_default().spread(function () {\n      for (var _len = arguments.length, responses = new Array(_len), _key = 0; _key < _len; _key++) {\n        responses[_key] = arguments[_key];\n      }\n\n      var allPermissions = responses[0] && responses[0].data.data;\n      var activePermissions = responses[1] && responses[1].data.data;\n      successHandler({\n        allPermissions: allPermissions,\n        activePermissions: activePermissions\n      });\n    }))[\"catch\"](function (errors) {\n      console.log(\"responseOne errors\", errors);\n    });\n  };\n\n  (0,react.useEffect)(function () {\n    fetchPermissions();\n  }, []);\n\n  var handleClick = function handleClick(event, permKey) {\n    // console.log(\n    //   activePermissions,\n    //   permKey,\n    //   event.target.name,\n    //   event.target.checked\n    // );\n    var activePermissionsCopy = JSON.parse(JSON.stringify(activePermissions));\n\n    if (event.target.checked) {\n      if (activePermissionsCopy[permKey]) {\n        activePermissionsCopy[permKey].push(event.target.name);\n      } else {\n        activePermissionsCopy[permKey] = [event.target.name];\n      }\n    } else {\n      var filteredArray = activePermissionsCopy[permKey].filter(function (item) {\n        return item != event.target.name;\n      });\n      activePermissionsCopy[permKey] = filteredArray;\n    }\n\n    setPermissions(PermissionForm_objectSpread(PermissionForm_objectSpread({}, permissions), {}, {\n      activePermissions: activePermissionsCopy\n    }));\n  };\n\n  var submitFormHandler = function submitFormHandler(event) {\n    event.preventDefault();\n    var activePermissions = permissions.activePermissions;\n    console.log(\"submitFormHandler\", activePermissions);\n    var newPermissions = [];\n    Object.keys(activePermissions).forEach(function (key) {\n      newPermissions = newPermissions.concat(activePermissions[key]);\n    });\n    console.log(\"newPermissions\", newPermissions);\n    var formData = {\n      userName: userId,\n      addApiCode: newPermissions\n    };\n\n    var submitSuccess = function submitSuccess(res) {\n      if (res.success) {\n        setMessage({\n          success: res.msg,\n          error: \"\"\n        });\n      } else {\n        setMessage({\n          error: res.msg,\n          success: \"\"\n        });\n      }\n    };\n\n    var submitError = function submitError(res) {\n      setMessage({\n        error: res.msg,\n        success: \"\"\n      });\n    };\n\n    var api = new Request/* default */.Z(\"\", submitSuccess, submitError, false);\n    return api.post(urls/* default.login.BASE_URL */.Z.login.BASE_URL + urls/* default.User.MANAGE_USER_PERMISSIONS */.Z.User.MANAGE_USER_PERMISSIONS, formData);\n  };\n\n  var allPermissions = permissions.allPermissions,\n      activePermissions = permissions.activePermissions;\n  console.log(\"permissions\", activePermissions);\n  var data = [];\n  var permKeys = allPermissions ? Object.keys(allPermissions) : \"\";\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal right fade show\",\n    id: \"exampleModal\",\n    tabindex: \"-1\",\n    role: \"dialog\",\n    \"aria-labelledby\": \"myModalLabel2\",\n    style: {\n      display: \"block\",\n      paddingRight: \"15px\"\n    }\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-dialog\",\n    role: \"document\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-content\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-header\"\n  }, /*#__PURE__*/react.createElement(\"h5\", {\n    className: \"modal-title\",\n    id: \"exampleModalLabel\"\n  }, \"Manage Permissions\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"close\",\n    \"data-dismiss\": \"modal\",\n    \"aria-label\": \"Close\",\n    onClick: closePopUpHandler\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-body\"\n  }, /*#__PURE__*/react.createElement(\"form\", {\n    onSubmit: submitFormHandler\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\",\n    style: {\n      marginLeft: \"-40px\"\n    }\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: message.success ? \"done\" : \"fail\"\n  }, message.success || message.error), permKeys && Array.isArray(permKeys) ? permKeys.map(function (permKey) {\n    return /*#__PURE__*/react.createElement(\"ul\", null, /*#__PURE__*/react.createElement(\"li\", {\n      style: {\n        listStyle: \"none\",\n        fontWeight: \"bold\",\n        marginBottom: \"10px\"\n      }\n    }, permKey), allPermissions && allPermissions[permKey] && Array.isArray(allPermissions[permKey]) ? allPermissions[permKey].map(function (item) {\n      return /*#__PURE__*/react.createElement(\"li\", {\n        style: {\n          listStyle: \"none\"\n        }\n      }, /*#__PURE__*/react.createElement(\"input\", {\n        type: \"checkbox\",\n        name: item,\n        checked: activePermissions && activePermissions[permKey] && activePermissions[permKey].includes(item) ? true : false,\n        onClick: function onClick(event) {\n          return handleClick(event, permKey);\n        },\n        style: {\n          marginRight: \"10px\"\n        }\n      }), item.replace(/_/g, \" \").replace(\"PTM \", \"\"));\n    }) : \"\");\n  }) : /*#__PURE__*/react.createElement(\"div\", {\n    style: {\n      margin: \"167px 0 156px 0\",\n      fontSize: \"26px\",\n      textAlign: \"center\",\n      color: \"#0aaaba\"\n    }\n  }, \"Loading....\")))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-footer\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary themebtn transparent\",\n    \"data-dismiss\": \"modal\",\n    onClick: closePopUpHandler\n  }, \"Close\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary themebtn\"\n  }, \"Update Permissions\")))))));\n};\n\n/* harmony default export */ const Users_PermissionForm = (PermissionForm);\n;// CONCATENATED MODULE: ./src/Pages/Users/AdminFundForm.js\n\n\n\nfunction AdminFundForm_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction AdminFundForm_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { AdminFundForm_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { AdminFundForm_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nfunction AdminFundForm(_ref) {\n  var userId = _ref.userId,\n      closeAdminFundForm = _ref.closeAdminFundForm,\n      setStatusMsg = _ref.setStatusMsg;\n\n  var _useState = (0,react.useState)({\n    amount: \"\",\n    remark: \"\",\n    ewalletType: \"MAIN_WALLET\",\n    userId: userId\n  }),\n      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var walletSelect = (0,react.useRef)();\n\n  var submitFormHandler = function submitFormHandler(event) {\n    event.preventDefault();\n    var walletAction = walletSelect.current.value;\n    var request = new Request/* default */.Z(\"\", successHandler, errorHandler, true);\n    var walletAPI = \"\".concat(urls/* default.login.BASE_URL */.Z.login.BASE_URL).concat(urls/* default.Wallet.MANAGE_WALLET */.Z.Wallet.MANAGE_WALLET).replace(\"{actionType}\", walletAction);\n    formData.amount = parseInt(formData.amount);\n    request.post(walletAPI, formData);\n  };\n\n  var successHandler = function successHandler(response, headers) {\n    if (response.success) {\n      closeAdminFundForm();\n      setStatusMsg(\"Action to wallet is submitted successfully\");\n    }\n  };\n\n  var errorHandler = function errorHandler(error) {\n    console.log(\"failed call\");\n  };\n\n  var handleChange = function handleChange(event) {\n    setFormData(function (prevState) {\n      return AdminFundForm_objectSpread(AdminFundForm_objectSpread({}, prevState), {}, (0,defineProperty/* default */.Z)({}, event.target.name, event.target.value));\n    });\n  };\n\n  console.log(\"formData\", formData);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal right fade show\",\n    id: \"exampleModal\",\n    tabindex: \"-1\",\n    role: \"dialog\",\n    \"aria-labelledby\": \"myModalLabel2\",\n    style: {\n      display: \"block\",\n      paddingRight: \"15px\"\n    }\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-dialog\",\n    role: \"document\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-content\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-header\"\n  }, /*#__PURE__*/react.createElement(\"h5\", {\n    className: \"modal-title\",\n    id: \"exampleModalLabel\"\n  }, \"Manage Fund\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"close\",\n    \"data-dismiss\": \"modal\",\n    \"aria-label\": \"Close\",\n    onClick: closeAdminFundForm\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-body\"\n  }, /*#__PURE__*/react.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      return submitFormHandler(event);\n    }\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Amount\"), /*#__PURE__*/react.createElement(\"input\", {\n    required: true,\n    type: \"number\",\n    className: \"form-control\",\n    placeholder: \"Amount\",\n    name: \"amount\",\n    onChange: handleChange\n  }))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Action\"), /*#__PURE__*/react.createElement(\"select\", {\n    required: true,\n    ref: walletSelect,\n    className: \"form-control\"\n  }, /*#__PURE__*/react.createElement(\"option\", {\n    value: \"\"\n  }, \"Choose Action\"), /*#__PURE__*/react.createElement(\"option\", {\n    value: \"deposit\"\n  }, \"Deposit\"), /*#__PURE__*/react.createElement(\"option\", {\n    value: \"debit\"\n  }, \"Withdraw\"), /*#__PURE__*/react.createElement(\"option\", {\n    value: \"hold\"\n  }, \"Hold\"), /*#__PURE__*/react.createElement(\"option\", {\n    value: \"hold-withdraw\"\n  }, \"Un Hold\")))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"col-md-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"form-group\"\n  }, /*#__PURE__*/react.createElement(\"label\", {\n    \"for\": \"exampleInputEmail1\"\n  }, \"Remark\"), /*#__PURE__*/react.createElement(\"input\", {\n    required: true,\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Remark\",\n    name: \"remark\",\n    onChange: handleChange\n  })))), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"modal-footer\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary themebtn transparent\",\n    \"data-dismiss\": \"modal\",\n    onClick: closeAdminFundForm\n  }, \"Close\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary themebtn\"\n  }, \"Submit\"))))))); // return (\n  //   <div>\n  //     <div>\n  //       <label>Amount</label>\n  //       <input onChange={(event) => setAmount(event.target.value)} />\n  //     </div>\n  //     <div>\n  //       <label>Remark</label>\n  //       <input onChange={(event) => setRemark(event.target.value)} />\n  //     </div>\n  //     <button onClick={(event) => submitFormHandler(event)}>Submit</button>\n  //   </div>\n  // );\n}\n\n/* harmony default export */ const Users_AdminFundForm = (AdminFundForm);\n// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 19 modules\nvar es = __webpack_require__(4494);\n;// CONCATENATED MODULE: ./src/Pages/Users/Users.js\n\n\n\nfunction Users_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Users_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Users_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Users_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar roleMapping = {\n  PTM_VENDOR: \"Vendor\",\n  PTM_ADMIN: \"Admin\",\n  PTM_SUB_ADMIN: \"Sub Admin\"\n};\nvar styles = {\n  iconContainer: {\n    padding: \"10px\"\n  },\n  bulbContainer: {\n    N: {\n      color: \"red\",\n      padding: \"10px\"\n    },\n    Y: {\n      color: \"green\",\n      padding: \"10px\"\n    }\n  }\n};\n\nvar Users = function Users(props) {\n  var _useState = (0,react.useState)(false),\n      _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n      isPopupVisible = _useState2[0],\n      handlePopUp = _useState2[1];\n\n  var _useState3 = (0,react.useState)({\n    userName: \"\",\n    msg: \"\",\n    status: \"\"\n  }),\n      _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n      userStatus = _useState4[0],\n      setUserStatus = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\"\"),\n      _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n      statusMsg = _useState6[0],\n      setStatusMsg = _useState6[1];\n\n  var _useState7 = (0,react.useState)(\"\"),\n      _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n      userToBeEdit = _useState8[0],\n      setUserId = _useState8[1];\n\n  var _useState9 = (0,react.useState)(\"\"),\n      _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n      editUserData = _useState10[0],\n      setEditUserData = _useState10[1];\n\n  var _useState11 = (0,react.useState)({\n    isPopupVisible: false,\n    userId: \"\"\n  }),\n      _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n      permissionData = _useState12[0],\n      setPermissionData = _useState12[1];\n\n  var _useState13 = (0,react.useState)(\"\"),\n      _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n      adminFormData = _useState14[0],\n      setAdminFormData = _useState14[1];\n\n  var dispatch = props.dispatch;\n\n  var fetchUsersData = function fetchUsersData() {\n    dispatch((0,actions_users/* fetchUsersList */.iI)());\n  };\n\n  (0,react.useEffect)(function () {\n    fetchUsersData();\n  }, []);\n  (0,react.useEffect)(function () {\n    setTimeout(function () {\n      setUserStatus({\n        userName: \"\",\n        status: \"\",\n        msg: \"\"\n      });\n    }, 4000);\n  }, [userStatus.msg]);\n\n  var editClickHandler = function editClickHandler(userId) {\n    handlePopUp(true);\n    (0,common/* addOverlay */.Dw)();\n    setUserId(userId);\n\n    var successHandler = function successHandler(response, headers) {\n      if (response.success == true) {\n        setEditUserData(response.data);\n      }\n    };\n\n    var errorHandler = function errorHandler(error) {};\n\n    var request = new Request/* default */.Z(\"\", successHandler, errorHandler, false);\n    return request.get(\"\".concat(urls/* default.login.BASE_URL */.Z.login.BASE_URL).concat(urls/* default.User.EDIT_USER.replace */.Z.User.EDIT_USER.replace(\"{userId}\", userId)));\n  };\n\n  var adminFundFormHandler = function adminFundFormHandler(userId) {\n    (0,common/* addOverlay */.Dw)();\n    setAdminFormData(userId);\n  };\n\n  var permissionClickHandler = function permissionClickHandler(userId) {\n    (0,common/* addOverlay */.Dw)();\n    setPermissionData({\n      isPopupVisible: true,\n      userId: userId\n    });\n  };\n\n  var openPopupHandler = function openPopupHandler() {\n    document.body.classList.add(\"modal-open\");\n    handlePopUp(true);\n  };\n\n  var handleUserStatus = function handleUserStatus(userId, curentStatus) {\n    var status = curentStatus == \"N\" ? \"Y\" : \"N\";\n\n    var successHandler = function successHandler(response) {\n      console.log(\"responseresponse\", response);\n\n      if (response.success) {\n        var msg = status == \"N\" ? \"deactivated\" : \"activated\";\n        setUserStatus({\n          userName: userId,\n          status: status,\n          msg: \"This user is now \".concat(msg)\n        });\n      }\n    };\n\n    var errorHandler = function errorHandler(error) {};\n\n    var request = new Request/* default */.Z(\"\", successHandler, errorHandler, false);\n    var params = \"?userId=\".concat(userId, \"&status=\").concat(status);\n    return request.put(\"\".concat(urls/* default.login.BASE_URL */.Z.login.BASE_URL).concat(urls/* default.User.MANAGE_USER_STATUS */.Z.User.MANAGE_USER_STATUS).concat(params));\n  };\n\n  var closeAdminFundPopUpHandler = function closeAdminFundPopUpHandler() {\n    setAdminFormData(\"\");\n    (0,common/* removeOverlay */.rG)();\n    document.body.classList.remove(\"modal-open\");\n  };\n\n  var closePopUpHandler = function closePopUpHandler() {\n    setEditUserData(\"\");\n    (0,common/* removeOverlay */.rG)();\n    document.body.classList.remove(\"modal-open\");\n    handlePopUp(false);\n  };\n\n  var closePermissionPopup = function closePermissionPopup() {\n    setPermissionData(Users_objectSpread(Users_objectSpread({}, permissionData), {}, {\n      userId: \"\",\n      isPopupVisible: false\n    }));\n    (0,common/* removeOverlay */.rG)();\n  };\n\n  var users = props.users;\n  var userData = users && users.usersList && users.usersList.data;\n\n  if (userData) {\n    userData = userData.map(function (item) {\n      if (item.userName == userStatus.userName) {\n        item.isActive = userStatus.status;\n      }\n\n      return item;\n    });\n  }\n\n  console.log(\"statusMsg\", statusMsg);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container_full\"\n  }, /*#__PURE__*/react.createElement(SideBar/* default */.Z, props), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"content_wrapper\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"container-fluid\"\n  }, /*#__PURE__*/react.createElement(BreadCrumb/* default */.Z, {\n    heading: \"Users\",\n    value: \"Users\"\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"row\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \" col-sm-12\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card card-shadow mb-4\"\n  }, isPopupVisible ? /*#__PURE__*/react.createElement(Users_AddUserForm, {\n    closePopUpHandler: closePopUpHandler,\n    fetchUsersData: fetchUsersData,\n    props: props,\n    editUserData: editUserData,\n    userToBeEdit: userToBeEdit\n  }) : \"\", permissionData.isPopupVisible ? /*#__PURE__*/react.createElement(Users_PermissionForm, {\n    closePopUpHandler: closePermissionPopup,\n    userId: permissionData.userId\n  }) : \"\", /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-header\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-title\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: \"btn-group\",\n    role: \"group\",\n    \"aria-label\": \"Basic example\"\n  }, /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn-common\"\n  }, \"CSV\"), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn-common\",\n    onClick: function onClick() {\n      return (0,common/* printPage */.ej)();\n    }\n  }, \"Print\"))), /*#__PURE__*/react.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn-common\",\n    \"data-toggle\": \"modal\",\n    \"data-target\": \"#exampleModal\",\n    onClick: openPopupHandler\n  }, \"Add User\")), adminFormData ? /*#__PURE__*/react.createElement(Users_AdminFundForm, {\n    userId: adminFormData,\n    closeAdminFundForm: closeAdminFundPopUpHandler,\n    setStatusMsg: setStatusMsg\n  }) : \"\", /*#__PURE__*/react.createElement(\"div\", {\n    className: \"done\"\n  }, statusMsg), /*#__PURE__*/react.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/react.createElement(\"table\", {\n    id: \"bs4-table\",\n    className: \"table table-bordered table-striped\"\n  }, /*#__PURE__*/react.createElement(\"thead\", null, /*#__PURE__*/react.createElement(\"tr\", null, /*#__PURE__*/react.createElement(\"th\", null, \"Id\"), /*#__PURE__*/react.createElement(\"th\", null, \"Company Name\"), /*#__PURE__*/react.createElement(\"th\", null, \"Mobile\"), /*#__PURE__*/react.createElement(\"th\", null, \"Email\"), /*#__PURE__*/react.createElement(\"th\", null, \"Role\"), /*#__PURE__*/react.createElement(\"th\", null, \"Wallet\"), /*#__PURE__*/react.createElement(\"th\", null, \"Action\"))), /*#__PURE__*/react.createElement(\"tbody\", null, userData && Array.isArray(userData) ? userData.map(function (item, index) {\n    var userClass = \"\";\n\n    if (item.role && roleMapping[item.role]) {\n      userClass = roleMapping[item.role].toLowerCase().replace(\" \", \"-\");\n    }\n\n    console.log(item);\n    var status = item.isActive; // if (userStatus.userName == item.userName) {\n    //   status = userStatus.status;\n    // }\n\n    return /*#__PURE__*/react.createElement(\"tr\", {\n      key: item.userName\n    }, /*#__PURE__*/react.createElement(\"td\", null, index + 1), /*#__PURE__*/react.createElement(\"td\", null, \"\".concat(item.firstName, \" \").concat(item.lastName)), /*#__PURE__*/react.createElement(\"td\", null, item.userName), /*#__PURE__*/react.createElement(\"td\", null, item.email), /*#__PURE__*/react.createElement(\"td\", {\n      className: userClass\n    }, roleMapping[item.role] || \"NA\"), /*#__PURE__*/react.createElement(\"td\", null, \"Rs. \", item.userBalance || \"0\"), /*#__PURE__*/react.createElement(\"td\", null, userStatus.userName == item.userName && /*#__PURE__*/react.createElement(\"div\", {\n      className: \"done\",\n      style: {\n        position: \"absolute\",\n        marginTop: \"-11px\"\n      }\n    }, userStatus.msg), /*#__PURE__*/react.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      }\n    }, /*#__PURE__*/react.createElement(\"div\", {\n      style: styles.iconContainer\n    }, /*#__PURE__*/react.createElement(\"i\", {\n      \"class\": \"icon-pencil\",\n      onClick: function onClick() {\n        return editClickHandler(item.userName);\n      },\n      style: {\n        cursor: \"pointer\"\n      },\n      title: \"update user\"\n    })), /*#__PURE__*/react.createElement(\"div\", {\n      style: styles.iconContainer\n    }, /*#__PURE__*/react.createElement(\"i\", {\n      \"class\": \"icon-key\",\n      onClick: function onClick() {\n        return permissionClickHandler(item.userName);\n      },\n      title: \"Manage Permissions\",\n      style: {\n        cursor: \"pointer\"\n      }\n    })), /*#__PURE__*/react.createElement(\"div\", {\n      style: styles.iconContainer\n    }, /*#__PURE__*/react.createElement(\"i\", {\n      className: \"icon-plus\",\n      title: \"Manage Fund\",\n      onClick: function onClick() {\n        console.log(\"successful\");\n        adminFundFormHandler(item.userName);\n      }\n    })), /*#__PURE__*/react.createElement(\"div\", {\n      style: styles.bulbContainer[status],\n      onClick: function onClick() {\n        return handleUserStatus(item.userName, status);\n      }\n    }, /*#__PURE__*/react.createElement(\"i\", {\n      className: \"icon-bulb\",\n      style: {\n        fontWeight: \"bold\"\n      },\n      title: \"\".concat(item.isActive == \"N\" ? \"Active\" : \"Inactive\")\n    })))));\n  }) : \"\")))))))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return Users_objectSpread({}, state);\n};\n\n/* harmony default export */ const Users_Users = ((0,es/* connect */.$j)(mapStateToProps)(Users));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5553\n");

/***/ })

}]);